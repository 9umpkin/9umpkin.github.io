<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Filter&amp;Listener</title>
    <url>/2023/11/10/Filter-Listener/</url>
    <content><![CDATA[<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>过滤器，可以一次性且有选择性的过滤多个请求&#x2F;响应的数据。</p>
<ul>
<li>处理中文乱码</li>
<li>登陆验证</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Filter-Listener/image-20231110101059484.png"
                      alt="image-20231110101059484"
                ></p>
<h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol>
<li><p>导包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Filter-Listener/image-20231110101540180.png"
                      alt="image-20231110101540180"
                ></p>
</li>
<li><p>编写过滤器</p>
<ol>
<li><p>实现Filter接口，重写对应方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classOver.servlet.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterTest</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 初始化：web服务器启动，就已经初始化了，随时等待过滤对象的出现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化=======================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// chain：链的作用</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    * 2. 必须要让过滤器继续通行</span></span><br><span class="line"><span class="comment">    *    chain.doFilter(request, response);</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter执行前=====================&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;filter执行后=====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁=======================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在web.xml中配置Filter</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.classOver.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.classOver.servlet.filter.filterTest<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>效果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Filter-Listener/image-20231110103230997.png"
                      alt="image-20231110103230997"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Filter-Listener/image-20231110103248403.png"
                      alt="image-20231110103248403"
                ></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Filter-Listener/image-20231110103724733.png"
                      alt="image-20231110103724733"
                ></p>
<h3 id="过滤器常见应用"><a href="#过滤器常见应用" class="headerlink" title="过滤器常见应用"></a>过滤器常见应用</h3><p>用户登录之后才能进入主页，用户注销后就不能进入主页了。</p>
<ol>
<li>用户登录之后，向Sesison中放入用户的数据</li>
<li>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) resp;</span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="literal">null</span>)&#123;</span><br><span class="line">	response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></div>



<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>相当于是一种事件触发器，一旦某一件事情发生，就会触发监听器，并执行其中的方法。</p>
<p>监听三个域对象的监听器</p>
<ul>
<li>ServletContextListener</li>
<li>HttpSessionListener</li>
<li>ServletRequestListener</li>
</ul>
<p>监听域对象的属性变更的监听器</p>
<ul>
<li>ServletContextAttributeListener</li>
<li>HttpSessionAttributeListener</li>
<li>ServletRequestAttributeListener</li>
</ul>
<h3 id="编写一个监听器"><a href="#编写一个监听器" class="headerlink" title="编写一个监听器"></a>编写一个监听器</h3><p>编写Java代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数 ： 统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="comment">//创建session监听： 看你的一举一动</span></span><br><span class="line">    <span class="comment">//一旦创建Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">        	onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一旦销毁Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">        	onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁：</span></span><br><span class="line"><span class="comment">    1. 手动销毁 getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2. 自动销毁</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>web.xml中注册监听器</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listenerclass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="监听器常见应用"><a href="#监听器常见应用" class="headerlink" title="监听器常见应用"></a>监听器常见应用</h3><p>在GUI编程中经常使用；</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;中秋节快乐&quot;</span>); <span class="comment">//新建一个窗体</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="literal">null</span>); <span class="comment">//面板</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>); <span class="comment">//设置窗体的布局</span></span><br><span class="line">      </span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line">        </span><br><span class="line">        frame.add(panel);</span><br><span class="line">       frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//监听事件，监听关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">            	<span class="built_in">super</span>.windowClosing(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie&amp;Session</title>
    <url>/2023/11/02/Cookie-Session/</url>
    <content><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>Cookie和Session都是服务器面向客户（浏览器）所设置的会话机制。</p>
<p>先说说我自己的理解。</p>
<p><strong>Cookie</strong>：</p>
<ol>
<li>是由服务器发送给浏览器，且存储在客户端的一个小的键值对数据（key-value）。</li>
<li>客户端请求的时候拿着这样的东西可以向服务器证明自己的身份。</li>
<li>Cookie是简单的、轻量的、短暂的，浏览器技术。</li>
<li>一般会保存在本地的用户目录下 appdata。</li>
</ol>
<p><strong>Session</strong>：</p>
<ol>
<li>服务器和客户端之间建立的较长的会话，这个会话的容量较大，不仅仅是传递简单的一对数据，还可以传递更复杂的内容比如对象。</li>
<li>同时，Session失效的时间也更长。</li>
<li>最重要的是，繁重的Session并不会存储在客户端（浏览器）当中。他的机制是：CS之间建立Session会话，服务器将JSESSIONID作为一个Cookie存储好，发送给客户端并存储给客户端中。每一次客户端向服务器发起请求的时候，都会附带上这个Cookie，服务器识别到这个Session ID，就会辨别出哪一个Session是和这个客户端之间的会话。</li>
<li>Session可以实现服务器和客户端之间多个Servlet的数据共享，但这种共享是面向客户端的。意思是说，同一个用户访问多个Servlet接口时，本次会话可以作为共享容器；不同用户之间不可以借助某一个Session进行数据共享。这里要和ServletContext做区分，ServletContext是面向Web容器的，访问同一个Web容器中任何接口的任何用户都可以通过同一个ServletContext共享数据。</li>
<li>是服务器技术。</li>
</ol>
<p>Session和cookie的区别： Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个） Session把用户的数据写到用户独占Session中，服务器端保存 （保存重要的信息，减少服务器资 源的浪费） Session对象由服务创建；</p>
<h2 id="Cookie-Demo"><a href="#Cookie-Demo" class="headerlink" title="Cookie Demo"></a>Cookie Demo</h2><p><strong>cookie</strong>：</p>
<ol>
<li>一般会保存在本地的 用户目录下 appdata；</li>
<li>一个Cookie只能保存一个信息； </li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie； </li>
<li>Cookie大小有限制4kb； </li>
<li>300个cookie浏览器上限 </li>
<li>删除Cookie：不设置有效期，关闭浏览器，自动失效； 或者设置有效期时间为 0 ；</li>
</ol>
<p>尝试写一个Cookie来实现数据的传输</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">       <span class="comment">// 1. 获得Cookie</span></span><br><span class="line">       Cookie[] cookies = req.getCookies();</span><br><span class="line">       <span class="comment">// 2. 判断是否有指定的cookie</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">           <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;lastLoginTime&quot;</span>.equals(name))&#123;</span><br><span class="line">               <span class="comment">// 3. 有的话就输出</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">date</span> <span class="operator">=</span> Long.parseLong(value);</span><br><span class="line">               <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">               <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">               resp.getWriter().println(<span class="string">&quot;上次登陆的时间是:&quot;</span>+d);</span><br><span class="line">               flag = <span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 4. 没有的话就创建一个</span></span><br><span class="line">       <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">           <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">           resp.addCookie(cookie);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>实现效果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Cookie-Session/image-20231103094006639.png"
                      alt="image-20231103094006639"
                ></p>
<h2 id="Session-Demo"><a href="#Session-Demo" class="headerlink" title="Session Demo"></a>Session Demo</h2><p>什么是Session：</p>
<ol>
<li>服务器会给每一个用户（浏览器）创建一个Seesion对象； </li>
<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li>
<li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li>
</ol>
<p>使用场景： </p>
<ol>
<li>保存一个登录用户的信息； </li>
<li>购物车信息； </li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>
</ol>
<p>demo1的doget方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 设置编码</span></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 获取Session</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">    <span class="keyword">if</span>(session.isNew())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;新建的：&quot;</span>+session.getId());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;以前的：&quot;</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;classover&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;person&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;classOver&quot;</span>, <span class="number">222</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>demo2的doget方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 设置编码</span></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 获取Session</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) session.getAttribute(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name=&quot;</span>+name);</span><br><span class="line">    System.out.println(<span class="string">&quot;person=&quot;</span>+p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Cookie-Session/image-20231103102739997.png"
                      alt="image-20231103102739997"
                ></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2023/11/22/JDBC/</url>
    <content><![CDATA[<h2 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h2><p>JDBC（Java DataBase Connectivity），即Java数据库连接。简而言之，就是通过Java语言来操作数据库。</p>
<p>我们可以把JDBC理解成是官方定义的一套操作所有关系型数据库的规则，规则即接口。</p>
<p>也就是说，官方定义了一套操作所有关系型数据库的接口，然后让各个数据厂商（Mysql、Oracle等）用实现类去实现这套接口，再把这些实现类打包（数据驱动jar包），并提供数据驱动jar包给我们使用。</p>
<p>我们可以使用这套JDBC接口进行编程，但是真正执行的代码是驱动jar包中的实现类。</p>
<p>为什么？因为JDBC是通过接口来调用方法的，当你导入了驱动jar包（实现类）后，那调用的方法肯定是实现类里面的方法。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JDBC/image-20231122142005420.png"
                      alt="image-20231122142005420"
                ></p>
<p>需要的jar包支持：</p>
<ul>
<li>java.sql</li>
<li>javax.sql</li>
<li>mysql-connecter-java… 连接驱动（必须要导入）</li>
</ul>
<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>选择了23年的新版本，规则较之前有所改变，但不是很多。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="JDBC固定步骤"><a href="#JDBC固定步骤" class="headerlink" title="JDBC固定步骤"></a>JDBC固定步骤</h2><ol>
<li><p>加载驱动</p>
<p>这里要注意，新的版本中启动器已经改成com.mysql.cj.jdbc.Driver了</p>
</li>
<li><p>连接数据库，代表数据库</p>
<p>url规则</p>
<p><code>jdbc:mysql://localhost:3306/数据库名称?key=value...</code>这里常用的两个参数就是useUnicode和characterEncoding，避免中文乱码。</p>
</li>
<li><p>向数据库发送SQL的对象Statement：CRUD</p>
</li>
<li><p>编写SQL</p>
</li>
<li><p>执行SQL</p>
</li>
<li><p>关闭连接</p>
<p>每一个打开的资源都需要关闭，先打开的后关闭。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.连接数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">// 3.向数据库发送SQL的对象Statement，preparedStatement : CRUD</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.编写SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from smbms_user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.执行SQL</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;==================================================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;id = &quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;userCode = &quot;</span>+resultSet.getObject(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;userName = &quot;</span>+resultSet.getObject(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;gender = &quot;</span>+resultSet.getObject(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;userPassword = &quot;</span>+resultSet.getObject(<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.关闭连接，释放资源，先开启的后关闭</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="JDBC预编译"><a href="#JDBC预编译" class="headerlink" title="JDBC预编译"></a>JDBC预编译</h2><p> 1、Statement </p>
<p>该对象用于执行静态的 SQL 语句，并且返回执行结果。 此处的SQL语句必须是完整的，有明确的数据指示。查的是哪条记录？改的是哪条记录？都要指示清楚。</p>
<p>通过调用 Connection 对象的 createStatement 方法创建该对象 </p>
<p>查询：ResultSet excuteQuery(String sql)——返回查询结果的封装对象ResultSet. 用next()遍历结果集，getXX()获取记录数据。</p>
<p>修改、删除、增加：int excuteUpdate(String sql)——返回影响的数据表记录数. </p>
<p>   2、PreparedStatement </p>
<p>SQL 语句被预编译并存储在 PreparedStatement 对象中。然后可以使用此对象多次高效地执行该语句。 </p>
<p>可以通过调用 Connection 对象的 preparedStatement() 方法获取 PreparedStatement 对象</p>
<p>PreparedStatement 对象所执行的 SQL 语句中，参数用问号(?)来表示，调用PreparedStatement 对象的 setXXX() 方法来设置这些参数. setXXX() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值，注意用setXXX方式设置时，需要与数据库中的字段类型对应，例如mysql中字段为varchar，就需要使用setString方法，如果为Date类型，就需要使用setDate方法来设置具体sql的参数。</p>
<p>简单来说就是，预编译的SQL语句不是有具体数值的语句，而是用（？）来代替具体数据，然后在执行的时候再调用setXX（）方法把具体的数据传入。同时，这个语句只在第一次执行的时候编译一次，然后保存在缓存中。之后执行时，只需从缓存中抽取编译过了的代码以及新传进来的具体数据，即可获得完整的sql命令。这样一来就<strong>省下了后面每次执行时语句的编译时间</strong>。</p>
<p>使用预编译的好处：</p>
<p>1：<strong>PreparedStatement</strong>比 <strong>Statement</strong> 更快<br>使用 <strong>PreparedStatement</strong> 最重要的一点好处是它拥有更佳的性能优势，SQL语句会预编译在数据库系统中。执行计划同样会被缓存起来，它允许数据库做参数化查询。使用预处理语句比普通的查询更快，因为它做的工作更少（数据库对SQL语句的分析，编译，优化已经在第一次查询前完成了）。</p>
<p>2：<strong>PreparedStatement</strong>可以防止SQL注入式攻击</p>
<p>SQL 注入攻击:SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令，从而利用系统的 SQL 引擎完成恶意行为的做法。</p>
<p>比如：某个网站的登录验证SQL查询代码为：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL <span class="operator">=</span> ``&quot;SELECT * FROM users WHERE name = &#x27;&quot;` `<span class="operator">+</span> userName <span class="operator">+</span> ``&quot;&#x27; and pw = &#x27;&quot;``<span class="operator">+</span> passWord <span class="operator">+</span>``&quot;&#x27;;&quot;</span><br></pre></td></tr></table></figure></div>

<p>恶意填入：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">userName <span class="operator">=</span> ``&quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;``;``passWord <span class="operator">=</span> ``&quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;``;</span><br></pre></td></tr></table></figure></div>

<p>那么最终SQL语句变成了：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL <span class="operator">=</span> ``&quot;SELECT * FROM users WHERE name = &#x27;1&#x27; OR &#x27;1&#x27;=&#x27;1&#x27; and pw = &#x27;1&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;;&quot;</span><br></pre></td></tr></table></figure></div>

<p>因为WHERE条件恒为真，这就相当于执行：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL <span class="operator">=</span> ``&quot;SELECT * FROM users;&quot;</span><br></pre></td></tr></table></figure></div>

<p>因此可以达到无账号密码亦可登录网站。</p>
<p>如果恶意用户要是更坏一点，SQL语句变成<em>：</em></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL <span class="operator">=</span> ``&quot;SELECT * FROM users WHERE name = &#x27;any_value&#x27; and pw = &#x27;&#x27;; DROP TABLE users&quot;</span><br></pre></td></tr></table></figure></div>

<p>这样一来，虽然没有登录，但是数据表都被删除了。</p>
<p>使用PreparedStatement的参数化的查询可以阻止大部分的SQL注入。在使用参数化查询的情况下，数据库系统不会将参数的内容视为SQL指令的一部分来处理，而是在数据库完成SQL指令的编译后，才套用参数运行，因此就算参数中含有破坏性的指令，也不会被数据库所运行。因为对于参数化查询来说，查询SQL语句的格式是已经规定好了的，需要查的数据也设置好了，缺的只是具体的那几个数据而已。所以用户能提供的只是数据，而且只能按需提供，无法更进一步做出影响数据库的其他举动来。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.连接数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.编写SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from smbms_user where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.向数据库发送SQL的对象preparedStatement : CRUD</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        ps.setInt(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.执行SQL</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;==================================================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;id = &quot;</span> + rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;userCode = &quot;</span> + rs.getObject(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;userName = &quot;</span> + rs.getObject(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;gender = &quot;</span> + rs.getObject(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;userPassword = &quot;</span> + rs.getObject(<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.关闭连接，释放资源，先开启的后关闭</span></span><br><span class="line">        rs.close();</span><br><span class="line">        ps.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JDBC/image-20231122153257276.png"
                      alt="image-20231122153257276"
                ></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>ResultSet一定要设置读取光标，rs.next()才能读取内容。否则会报错。</p>
<h2 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h2><p>要么都成功，要么都失败！ </p>
<p>ACID原则：保证数据的安全。</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交 commit()</span><br><span class="line">事务回滚 rollback()</span><br><span class="line">关闭事务</span><br><span class="line">比如转账：</span><br><span class="line">A:1000</span><br><span class="line">B:1000</span><br><span class="line">A(900) --100--&gt; B(1100)</span><br></pre></td></tr></table></figure></div>

<p>尝试写一下，还算顺利，主要注意一下try-catch的写法还有开启事务和关闭事务的位置。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classOver.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJdbc3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.加载驱动类</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.创建连接</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="comment">// 3.开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 4.编写sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into smbms_user (id, userCode, userName) values (20, 1111, &#x27;tky&#x27;)&quot;</span>;</span><br><span class="line">            <span class="comment">// 5.预编译</span></span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 6.制造错误</span></span><br><span class="line">            <span class="comment">// int i = 1 / 0;</span></span><br><span class="line">            <span class="comment">// 7.执行sql</span></span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">// 8.提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>FeSA: Automatic Federated Swarm Attestation on Dynamic Large-Scale IoT Devices阅读笔记</title>
    <url>/2023/11/28/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、Introduction写作思路"><a href="#一、Introduction写作思路" class="headerlink" title="一、Introduction写作思路"></a>一、Introduction写作思路</h2><p>Introduction这一部分是最考验写作思路和写作水平的一个章节，它的关注点在于如何写出本文方案的意义和必要性，展现出与其他方案相比的优越性。因此这里总结一下这一小节的写作思路，便于学习。</p>
<ol>
<li>描述大环境现状（IOT给人们的生活带来便利…结合了多种技术…）</li>
<li>提出问题（Unfortunately，资源有限，还有安全问题）</li>
<li>阐述已经存在的初步解决方案以及相关信息（RA–&gt;单一认证）</li>
<li>提出现存解决方案的弊端（“with the growing scale of IoT”，又出现了这个解决方案无法解决的新问题；这个解决方案仅适用于部分情况；本文这里提到的是设备群体动态性导致的单一认证低效的问题）</li>
<li>针对上面提出的问题，提出新的解决方案（swarm attestation）</li>
<li>swarm attestation也有一些Motivation &amp; Challenges<ol>
<li>一系列安全问题</li>
<li>群体认证要求在每一轮认证中都执行所有的设备认证，但是低安全敏感的设备并不需要执行这么多次，这个部分就造成了资源浪费（previous scheme是均匀地将认证应用于所有的设备上），说不定还会因为这种资源浪费而带来新的危害。</li>
</ol>
</li>
<li>引出本篇文章的<strong>核心算法</strong>（Automatic Swarm Attestation protocol）<ol>
<li>为每个设备自定义认证期限</li>
<li>通过verify收集到的设备地动、静态特征作为神经网络模型地训练数据，以此来识别可能受到损害地设备。</li>
<li>verify会选择一系列可以的设备进行群体认证</li>
</ol>
</li>
<li>提出上述算法面临的问题（数据集不够+challenge过长）</li>
<li>为了解决这两个挑战，我们提出了FeSA<ol>
<li>利用联邦学习提升模型准确性并保护数据隐私。</li>
<li>在特定的RA中摒弃了challenge-response机制，改用一个新的challenge-query机制，并介绍了一种物理固定边缘代理层，用以减少设备端开销（减少到constant）</li>
</ol>
</li>
<li>简要介绍evaluation的结果——多说好的，少说坏的</li>
<li>贡献总结（本文提出的新方法&#x2F;新工具&#x2F;新的机制+其声称实现的效果【可能不止一个】；本文所做的实验验证【实际环境评估+仿真】）</li>
<li>文章路线（介绍本文各章节在讲什么内容）</li>
</ol>
<h2 id="二、文章总结"><a href="#二、文章总结" class="headerlink" title="二、文章总结"></a>二、文章总结</h2><h3 id="1、文章背景"><a href="#1、文章背景" class="headerlink" title="1、文章背景"></a>1、文章背景</h3><p><strong>远程认证（RA）</strong>被提议作为一种安全措施来检测IoT集群中受感染的设备，而不会给它们带来太多的负担。典型的 RA 方法允许受信任方（验证者）通过质询响应机制检查可能受损的设备（证明者）的完整性。由于其灵活性、安全性、可扩展性和低开销，RA已成为一种经济合理的安全策略选择。</p>
<p><strong>群体认证（SA）</strong>作为远程认证（RA）的一个重要分支，使得可信方（验证者）能够通过质询-响应机制（Challenge-Response）同时验证大型网络（群体）中多个设备（证明者）的安全状态。</p>
<h3 id="2、当前面临的问题"><a href="#2、当前面临的问题" class="headerlink" title="2、当前面临的问题"></a>2、当前面临的问题</h3><p>（1）冗余认证。每一轮群体认证都需要认证所有的设备。</p>
<p>（2）效率低下。时间和能量消耗极高，影响了系统的实时性和能耗效率。</p>
<p>（3）数据隐私泄露风险。认证过程中涉及到的数据可能面临泄露风险，对用户的隐私造成威胁。</p>
<h3 id="3、针对上述问题提出的解决方案"><a href="#3、针对上述问题提出的解决方案" class="headerlink" title="3、针对上述问题提出的解决方案"></a>3、针对上述问题提出的解决方案</h3><p><strong>（1）自动化群体认证协议</strong></p>
<p>根据设备的特性和需求，个性化地设置认证周期，减少了设备的冗余认证。</p>
<p><strong>（2）Challenge-Query机制</strong></p>
<p>可以优化每个设备地认证时间和能量消耗，让认证过程更加高效。</p>
<p><strong>（3）联邦学习的认证方案</strong></p>
<p>通过在本地对模型进行训练和更新，确保了数据隐私的保护，减少了数据泄露的风险。</p>
<p>大多数现存的群体认证方法都只适用于静态网络。广播是一种常见的对于高度动态网络的群体认证方法，然而这种方法会造成难以忍受的开销。</p>
<p>因此FeSA的提出很有必要。</p>
<h3 id="4、-FeSA声称效果"><a href="#4、-FeSA声称效果" class="headerlink" title="4、 FeSA声称效果"></a>4、 FeSA声称效果</h3><p>（1）保护数据隐私</p>
<p>（2）排除冗余证明伦次</p>
<p>（3）将单个设备的开销降低到一个常数</p>
<h3 id="5、-文章贡献总结"><a href="#5、-文章贡献总结" class="headerlink" title="5、 文章贡献总结"></a>5、 文章贡献总结</h3><p>（1）设计了一种自动化群体认证协议，以减少对群体设备的冗余认证。并首次提出了基于联邦学习的认证方法，这种方法能够在保证数据私密性的情况下提升模型的准确性。</p>
<p>（2）提出了一种新的challenge-query机制来优化每一个设备在认证过程中的时间和能量。它还可以适应高度动态的网络并抵抗验证者模拟DoS攻击。</p>
<p>（3）我们在 21 天内构建了一个包含 12 种物联网设备的真实实验环境，以确认 FeSA 确实可以减少冗余证明。</p>
<p>（4）我们模拟了多达 1,000,000 台设备的大规模集群，以验证 FeSA 的效率、可扩展性和动态性。</p>
<h3 id="6、FeSA方案基本框架"><a href="#6、FeSA方案基本框架" class="headerlink" title="6、FeSA方案基本框架"></a>6、FeSA方案基本框架</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231128152321702.png"
                      alt="image-20231128152321702"
                ></p>
<p>could layer：由一系列云服务器组成，是联邦学习的重要终端。它训练随机初始化的模型并分发给所有的verifiers，同时负责每轮认证模型的聚合与更新。</p>
<p>verifier layer： 由认证服务器组成，由设备群体所有者直接维护。它从Edge层收集并存储IoT设备的数据，与Cloud层协同完成认证模型的聚合。同时，在认证过程中，配备最终模型的Verifier将根据收集到的数据，向选择性能异常的设备发出认证Challenge。</p>
<p>edge layer：该层由多组边缘代理设备组成，边缘代理是计算能力和存储容量比IoT集群设备更大的设备，它们广泛分布在整个设备网络中，使得每一个IoT设备都至少可以与一个边缘代理相通信。这些边缘代理的功能是：<strong>从IoT设备处收集数据，存储由Verifier层发来的认证Challenge，接受由IoT Device层发来的Query，并将认证响应转发给Verifier。</strong></p>
<p>IoT设备层：多个群由具有不同计算和存储能力的异构物联网设备组成。它们可能会受到攻击者的危害。物联网设备通过从Edge层的边缘代理处查询认证Challenge来启动认证，执行认证过程，并发送响应到边缘代理。此外，这些设备可以在集群中随机移动。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203150055296.png"
                      alt="image-20231203150055296"
                ></p>
<h3 id="7、FeSA方案详解"><a href="#7、FeSA方案详解" class="headerlink" title="7、FeSA方案详解"></a>7、FeSA方案详解</h3><h4 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h4><p>D –&gt; device</p>
<p>id;</p>
<p>k –&gt; session key</p>
<p>h –&gt; trusted software configuration</p>
<p>T –&gt; 上一次认证的时长</p>
<p>DC –&gt; device category</p>
<p>S –&gt; security level</p>
<p>P –&gt; Privacy level</p>
<p>HW –&gt; hardware level</p>
<p>MT –&gt; 预设的最大认证周期</p>
<p>Δt –&gt; 两轮认证的最小间隔</p>
<h4 id="分布式模型训练"><a href="#分布式模型训练" class="headerlink" title="分布式模型训练"></a>分布式模型训练</h4><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p><strong>Time</strong></p>
<p><strong>Device state (DS)：用短期的统计量来展示DS，统计量又分为离散型和连续型，需要不同的数据处理方法。</strong></p>
<p><strong>Energy (Eng)：通过智能电表进行能源消耗的测量，受损设备通常会又异常的能量开销。使用短期的统计量来表示能源开销。</strong></p>
<p><strong>Traffic (Trf)：网络流量，采用短期检测的数据量，比如接受和发送的数据包数量、数据包大小的统计值、数据包类型的数量等。</strong></p>
<h4 id="自动化群体认证"><a href="#自动化群体认证" class="headerlink" title="自动化群体认证"></a>自动化群体认证</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231128152344960.png"
                      alt="image-20231128152344960"
                ></p>
<p><strong>1.准备阶段</strong></p>
<p>​    Edge层的边缘代理收集相关集群设备的信息并发送给Verifier层的验证者。</p>
<p><strong>2.认证选择</strong></p>
<p>​    协议规定一个最大认证期限ΔT，每一个设备中也规定有一个安全时钟。</p>
<p>​    经由神经网络模型选择的危险设备和超过其最大证明期限内尚未经过认证的设备都将成为下一轮认证的证明者。</p>
<p><strong>3.发起认证Challenge</strong></p>
<p>​    除了选择出的证明者以外，Challenge中还需要包含一个由验证者选择的随机数nonce。</p>
<p><strong>4.存储信息</strong></p>
<p>​    Verifier发起认证Challenge后，认证并不立即开始，而是将Challenge信息存储在Edge层的边缘代理中。</p>
<p>​    每个设备内的安全只读时钟在最小证明间隔 Δt后向最近的边缘代理使用自己的id发起认证Query。</p>
<p><strong>5.边缘代理响应</strong></p>
<p>​    一旦边缘代理收到认证Query，就拿出其中的id进行检查，如果能找到一个Challenge的list中包含了此id，则把对应的随机数nonce发送给该设备。</p>
<p><strong>6.设备认证</strong></p>
<p>​    设备使用会话密钥 k 计算内存上的校验和 r 及其基于哈希的消息认证码 (HMAC) r’，并把二者打包再次发送给边缘代理。</p>
<p><strong>7.边缘代理转发</strong></p>
<p>​    边缘代理收到来自设备的认证信息后，就即刻转发到Verifier层。</p>
<p><strong>8.验证阶段</strong></p>
<p>​    验证者接收到来自边缘代理转发的认证信息，就开始验证。</p>
<p>​    将其中的r（使用会话密钥 k 计算内存上的校验和）与预存的可信软件配置h进行比较，来验证HMAC和设备软件的完整性。</p>
<p>​    如果验证成功，则生成AR结果。</p>
<p>​    否则，验证者则对认证失败的设备进行操作。</p>
<h3 id="8、-评估"><a href="#8、-评估" class="headerlink" title="8、 评估"></a>8、 评估</h3><p>主要围绕以下两个问题进行评估</p>
<blockquote>
<p>联邦学习是否适用于认证问题？</p>
</blockquote>
<blockquote>
<p>FeSA是否适用于大规模的设备集群中？</p>
</blockquote>
<h4 id="联邦学习的适用性评估"><a href="#联邦学习的适用性评估" class="headerlink" title="联邦学习的适用性评估"></a>联邦学习的适用性评估</h4><p>为了验证第一个问题，本文构建了12种不同类型的智能设备和一个集线器设备，它们都依赖于树莓派，然后构建了智能办公实验环境。我们收集了21天的数据来评估基于联邦学习的认证。</p>
<p>TABLE 2罗列了三种联邦学习场景中各种指标的表现。【准确率 (ACC)、精确率 (P)、召回率 (R)、假阳性率 (FPR)、假阴性率 (FNR) 和 F1-Score (F 1)）】</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203151058515.png"
                      alt="image-20231203151058515"
                ></p>
<p>下图为“当全局模型在不同数量的验证者下收敛时的性能指标和轮数”图，横轴为验证者数量，纵轴是两个指标，达到收敛的轮数和性能指标。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203151516553.png"
                      alt="image-20231203151516553"
                ></p>
<p>综上所述，群体之间的设备越相似，预测准确率、精确率、召回率、F1-Score越高，FPR和FNR越低。基于联邦学习的证明确实可以高精度地识别受感染的设备，以减少群体证明中的冗余证明过程。然而，联邦学习的性能指标并不等同于 FeSA 的性能，因为自动群体证明协议保证了整个方案的检测率。无论如何，即使受感染的设备逃避了联邦学习模型的检测，最大证明时间仍然可以确保它无法逃避证明。</p>
<h4 id="大规模设备集群的适用性仿真评估"><a href="#大规模设备集群的适用性仿真评估" class="headerlink" title="大规模设备集群的适用性仿真评估"></a>大规模设备集群的适用性仿真评估</h4><p>为了验证第二个问题，本文通过理论分析和模拟评估了 FeSA 在大规模群中的性能。</p>
<p>下图为“FeSA 对于具有不同数量边缘代理和候选设备的群体的性能”图，E表示边缘代理数量，C表示候选设备数量，横轴为n表示群体设备数量。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203151935228.png"
                      alt="image-20231203151935228"
                ></p>
<p>当边缘代理和候选设备数量存在一定的比例的情况下，其run-time的消耗是一定的，不会发生改变。</p>
<p>下图为“FeSA 对于具有不同数量群体设备和候选设备的群体的性能”图，表示群体设备数量，c表示候选设备数量，横轴为e表示边缘代理设备数量。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203152101106.png"
                      alt="image-20231203152101106"
                ></p>
<p>当群体设备和群体中候选节点的数量一定时，边缘代理越多，每个边缘代理可以连接的候选设备就越少，运行时间就会越少。</p>
<p>这意味着我们只需要引入一定数量的边缘代理，就可以将运行时间限制在一个小区间内。</p>
<p>下面三张图为本文从Run-time of Attestation、 Run-time per device和Energy consumption三个维度对比了多种群体认证方法的效果。</p>
<p>均可以看出FeSA的优越性。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203152126863.png"
                      alt="image-20231203152126863"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203152132713.png"
                      alt="image-20231203152132713"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231203152136951.png"
                      alt="image-20231203152136951"
                ></p>
<h3 id="安全性总结"><a href="#安全性总结" class="headerlink" title="安全性总结"></a>安全性总结</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/FeSA-Automatic-Federated-Swarm-Attestation-on-Dynamic-Large-Scale-IoT-Devices%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20231128153027088.png"
                      alt="image-20231128153027088"
                ></p>
<h2 id="三、相关概念"><a href="#三、相关概念" class="headerlink" title="三、相关概念"></a>三、相关概念</h2><p>这一部分介绍在阅读论文的过程中我所遇到的一些不太明白的专有名词。</p>
<h3 id="Swarm-Attestation"><a href="#Swarm-Attestation" class="headerlink" title="Swarm Attestation"></a>Swarm Attestation</h3><p>群体认证，是一种在物联网设备中广泛应用的认证机制。它通过对设备群体的行为和状态进行验证，以确保设备的可信度和安全性。</p>
<p>在传统的设备认证方法中，通常是以单个设备为单位进行认证。这种方法在大规模物联网中存在一些限制，因为设备数量庞大且分布广泛，逐个认证的方式效率低下且耗费资源。而Swarm Attestation则通过收集设备群体的行为信息，综合判断设备的可信度。</p>
<p>Swarm Attestation的基本原理是，设备通过共同的行为和互相验证来证明它们是可信的一部分。例如，设备可以共同参与特定的网络协议、执行相同的安全策略、分享相似的传感器数据等。通过对这些行为进行监测和分析，可以判断设备是否符合预期的行为模式，从而进行认证。</p>
<p>Swarm Attestation的好处包括对大规模物联网设备的高效认证，减少了认证的时间和资源成本，并提供了更全面的安全性评估。同时，它还能够检测到设备群体中的异常行为或潜在的安全威胁。</p>
<p>总之，Swarm Attestation是一种通过对设备群体行为和状态的验证来实现物联网设备认证的机制，能够提供高效、全面和可信的认证保障。</p>
<h3 id="challenge-response-mechanism"><a href="#challenge-response-mechanism" class="headerlink" title="challenge-response mechanism"></a>challenge-response mechanism</h3><ol>
<li>verifier 发送一个证明质询</li>
<li>收到质询后，证明者会在其内存中计算加密校验和，并根据收到的质询生成证明response。</li>
<li>prover回发证明response</li>
<li>验证者收到响应后，检查响应的有效性。</li>
</ol>
<h3 id="TOCTOU-attack"><a href="#TOCTOU-attack" class="headerlink" title="TOCTOU attack"></a>TOCTOU attack</h3><p>TOCTOU (Time-of-Check to Time-of-Use) 攻击者是指利用计算机系统或应用程序在检查某种状态或条件之后与之实际使用之间的时间间隙进行攻击的人或组织。在这种类型的攻击中，攻击者通过在检查和使用之间修改或篡改数据、配置文件、权限或其他关键资源，利用系统或应用程序的弱点进行攻击。TOCTOU攻击通常发生在并发系统中，其中多个进程或线程可以访问和修改共享资源。攻击者通过在检查和使用资源之间的时间间隙中进行干扰或篡改，绕过对资源访问的限制或验证，从而获取非授权的权限或执行恶意操作。</p>
]]></content>
      <tags>
        <tag>thesis</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM动态代理</title>
    <url>/2023/12/17/JVM%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JSP(Java Server Page)</title>
    <url>/2023/11/06/JSP-Java-Server-Page/</url>
    <content><![CDATA[<h2 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h2><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！ </p>
<p>最大的特点： </p>
<ul>
<li><p>写JSP就像在写HTML </p>
</li>
<li><p>区别： </p>
<ul>
<li>HTML只给用户提供静态的数据</li>
<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>
</ul>
</li>
</ul>
<h2 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h2><p>思路：JSP到底怎么执行的！</p>
<ul>
<li>代码层面没有任何问题</li>
<li>服务器内部工作 <ul>
<li>tomcat中有一个work目录；</li>
<li>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</li>
</ul>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JSP-Java-Server-Page/image-20231106200038223.png"
                      alt="image-20231106200038223"
                ></p>
<p><code>C:\Users\tky\AppData\Local\JetBrains\IntelliJIdea2023.2\tomcat\23ce150e-2f25-4581-9110-7583674ce51f\work\Catalina\localhost\ROOT\org\apache\jsp</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JSP-Java-Server-Page/image-20231106200135691.png"
                      alt="image-20231106200135691"
                ></p>
<p>这里可以看到我们的JSP页面变成了java程序并且编译成了class字节码文件。</p>
<p><strong>结论：浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet。</strong></p>
<p>JSP最终也会被转换成一个Java类，JSP本质上就是一个Servlet。</p>
<p>查看源码，发现一些熟悉的方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspInit</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//JSPService，核心的应用方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException</span><br></pre></td></tr></table></figure></div>

<p>在_jspService方法中能够找到编写html的代码，非常容易辨别这其实就是一个Servlet的Service方法。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JSP-Java-Server-Page/image-20231106200709338.png"
                      alt="image-20231106200709338"
                ></p>
<p>一些内置对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;    <span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;   <span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;         <span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.<span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;           <span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.<span class="type">Object</span> <span class="variable">page</span> <span class="operator">=</span> <span class="built_in">this</span>;               <span class="comment">//page：当前</span></span><br><span class="line">HttpServletRequest request                        <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response                      <span class="comment">//响应</span></span><br></pre></td></tr></table></figure></div>

<p>输出页面前增加的代码，这些对象在JSP页面中可以直接使用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>); <span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="built_in">this</span>, request, response, <span class="literal">null</span>, <span class="literal">true</span>, <span class="number">8192</span>, <span class="literal">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JSP-Java-Server-Page/image-20231106200931943.png"
                      alt="image-20231106200931943"
                ></p>
<p>在JSP页面中，只要是Java代码就会原封不动地输出，如果是HTML代码，就会被转换为如下的格式输出到前端。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="JSP基础语法"><a href="#JSP基础语法" class="headerlink" title="JSP基础语法"></a>JSP基础语法</h2><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">    JSP表达式</span><br><span class="line">    作用：用来将程序的输出，输出到客户端</span><br><span class="line">    &lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%= <span class="keyword">new</span> <span class="title class_">java</span>.util.Date()%&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="JSP脚本片段"><a href="#JSP脚本片段" class="headerlink" title="JSP脚本片段"></a>JSP脚本片段</h3><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">    jsp脚本片段</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">100</span> ; i++) &#123;</span><br><span class="line">    	sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--在代码嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;Hello,World &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h3><p>JSP声明：会被编译到JSP生成Java的类中！</p>
<p>其他的：就会被生成到_jspService方法中！ </p>
<p>在JSP，嵌入Java代码即可！</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;Loading Servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">globalVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kuang</span><span class="params">()</span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;进入了方法Kuang！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line">&lt;%--注释，JSP的注释，不会在客户端显示，HTML就会--%&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h2><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> args.... %&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="meta">@include</span>会将两个页面合二为一</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/footer.jsp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="9大内置对象"><a href="#9大内置对象" class="headerlink" title="9大内置对象"></a>9大内置对象</h2><ul>
<li>PageContext 存东西 </li>
<li>Request 存东西 </li>
<li>Response Session 存东西 </li>
<li>Application 【SerlvetContext】 存东西 </li>
<li>config 【SerlvetConfig】 </li>
<li>out </li>
<li>page ，不用了解 </li>
<li>exception</li>
</ul>
<h2 id="4大作用域"><a href="#4大作用域" class="headerlink" title="4大作用域"></a>4大作用域</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;秦疆1号&quot;</span>); <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;秦疆2号&quot;</span>); <span class="comment">//保存的数据只在一次请求中有效，请求转发会携</span></span><br><span class="line">带这个数据</span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;秦疆3号&quot;</span>); <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器</span></span><br><span class="line">到关闭浏览器</span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;秦疆4号&quot;</span>); <span class="comment">//保存的数据只在服务器中有效，从打开服</span></span><br><span class="line">务器到关闭服务器</span><br></pre></td></tr></table></figure></div>

<p><strong>request</strong>：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>
<p> <strong>session</strong>：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车； </p>
<p><strong>application</strong>：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如： 聊天数据；</p>
<h2 id="JSP标签、JSTL表达式、EL表达式"><a href="#JSP标签、JSTL表达式、EL表达式" class="headerlink" title="JSP标签、JSTL表达式、EL表达式"></a>JSP标签、JSTL表达式、EL表达式</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个版本有好几个CVE漏洞哈哈哈 推荐使用最新的</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;taglibs&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;standard&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;version&gt;1.1.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-impl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="EL表达式："><a href="#EL表达式：" class="headerlink" title="EL表达式："></a>EL表达式：</h3><p>${ } :</p>
<ul>
<li>获取数据 </li>
<li>执行运算 </li>
<li>获取web开发的常用对象</li>
</ul>
<h3 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h3><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">http:<span class="comment">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12</span></span><br><span class="line">--%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;/jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;kuangshen&quot;</span>&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;12&quot;</span>&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="JSTL表达式"><a href="#JSTL表达式" class="headerlink" title="JSTL表达式"></a>JSTL表达式</h3><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和 Java代码一样！</p>
<ul>
<li>格式化标签 </li>
<li>SQL标签 </li>
<li>XML 标签 </li>
<li>核心标签 （掌握部分）</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JSP-Java-Server-Page/image-20231106202002675.png"
                      alt="image-20231106202002675"
                ></p>
<p><strong>JSTL标签库使用步骤:</strong></p>
<ul>
<li>引入对应的 taglib </li>
<li>使用其中的方法 </li>
<li>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</li>
</ul>
<p><strong>c: if</strong></p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h4&gt;<span class="keyword">if</span>测试&lt;/h4&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;coreif.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">--%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span><br><span class="line">	&lt;c:out value=<span class="string">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>c: choose  c: when</strong></p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--定义一个变量score，值为<span class="number">85</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;score&quot;</span> value=<span class="string">&quot;55&quot;</span>/&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;</span><br><span class="line">    	你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;</span><br><span class="line">    	你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;</span><br><span class="line">    	你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;</span><br><span class="line">    	你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>c: forEach</strong></p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    people.add(<span class="number">0</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    people.add(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    people.add(<span class="number">2</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    people.add(<span class="number">3</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    people.add(<span class="number">4</span>,<span class="string">&quot;田六&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;list&quot;</span>,people);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="keyword">var</span> , 每一次遍历出来的变量</span><br><span class="line">    items, 要遍历的对象</span><br><span class="line">    begin, 哪里开始</span><br><span class="line">    end, 到哪里</span><br><span class="line">    step, 步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class="line">	&lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span> &gt;</span><br><span class="line">	&lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaBean</title>
    <url>/2023/11/07/JavaBean/</url>
    <content><![CDATA[<p>12</p>
<h2 id="什么是JavaBean？"><a href="#什么是JavaBean？" class="headerlink" title="什么是JavaBean？"></a>什么是JavaBean？</h2><p>是一个Java中特定的实体类，需要满足以下条件：</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get&#x2F;set方法；</li>
</ul>
<p><strong>一般用来和数据库的字段做映射</strong></p>
<p>ORM：Object Relation Mapping 对象关系映射</p>
<ul>
<li>表 –&gt; 类</li>
<li>字段 –&gt; 属性</li>
<li>行记录 –&gt; 对象</li>
</ul>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>classover1</td>
<td>11</td>
</tr>
<tr>
<td>2</td>
<td>classover12</td>
<td>122</td>
</tr>
<tr>
<td>3</td>
<td>classover13</td>
<td>123</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> string name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">1</span>,<span class="string">&quot;classover1&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">2</span>,<span class="string">&quot;classover12&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">3</span>,<span class="string">&quot;classover13&quot;</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的反射机制</title>
    <url>/2023/12/17/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="1、什么是Java反射"><a href="#1、什么是Java反射" class="headerlink" title="1、什么是Java反射"></a>1、什么是Java反射</h2><p>Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：<strong>反射</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20231217102436836.png"
                      alt="image-20231217102436836"
                ></p>
<h2 id="2、为什么需要Java反射"><a href="#2、为什么需要Java反射" class="headerlink" title="2、为什么需要Java反射"></a>2、为什么需要Java反射</h2><p>通过java语言中的反射机制可以操作字节码文件（可以读和修改字节码文件）</p>
<p>通过反射机制可以操作代码片段。（class文件）</p>
<h2 id="3、Java反射相关的API"><a href="#3、Java反射相关的API" class="headerlink" title="3、Java反射相关的API"></a>3、Java反射相关的API</h2><ul>
<li>java.lang.Class	代表整个字节码。代表一个类型，代表整个类</li>
<li>java.lang.reflect.Method	代表字节码中的方法字节码。代表类中的方法</li>
<li>java.lang.reflect.Constructor	代表字节码中的构造方法字节码。代表类中的构造方法</li>
<li>java.lang.reflect.Field	代表字节码中的属性字节码。代表类中的成员变量（静态变量+实例变量）<br><strong>注</strong>：<strong>必须先获得Class才能获取Method、Constructor、Field</strong></li>
</ul>
<h2 id="4、Class类"><a href="#4、Class类" class="headerlink" title="4、Class类"></a>4、Class类</h2><p>在Object类中定义了以下的方法，此方法将被所有子类继承</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title function_">getClass</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>

<p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20231217102725231.png"
                      alt="image-20231217102725231"
                ></p>
<p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，<strong>JRE 都为其保留一个不变的 Class 类型的对象</strong>。一个 Class 对象包含了特定某个结构(class&#x2F;interface&#x2F;enum&#x2F;annotation&#x2F;primitive type&#x2F;void&#x2F;[])的有关信息。</p>
<ul>
<li>Class 本身也是一个类 </li>
<li>Class 对象只能由系统建立对象 </li>
<li>一个加载的类在 JVM 中只会有一个Class实例 </li>
<li>一个Class对象对应的是一个加载到JVM中的一个.class文件 </li>
<li>每个类的实例都会记得自己是由哪个 Class 实例所生成 </li>
<li>通过Class可以完整地得到一个类中的所有被加载的结构 </li>
<li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li>
</ul>
<p><strong>哪些类型可以有Class对象？</strong> </p>
<ul>
<li>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类。 </li>
<li>interface：接口</li>
<li>[]：数组 </li>
<li>enum：枚举 </li>
<li>annotation：注解@interface </li>
<li>primitive type：基本数据类型 </li>
<li>void</li>
</ul>
<p><strong>对于类型相同维度相同的数组，两个大小不同的数组实例所获取到的class对象都是同一个。</strong></p>
<h2 id="5、获取Class对象的方法"><a href="#5、获取Class对象的方法" class="headerlink" title="5、获取Class对象的方法"></a>5、获取Class对象的方法</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得class办法一:已知某个类的实例，调用该实例的getClass()方法获取Class对象 </span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line"><span class="comment">//获得class办法二:已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出 ClassNotFoundException</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.reflection.Student&quot;</span>);</span><br><span class="line"><span class="comment">//获得class办法三:若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//获得class办法四:只针对内置的基本数据类型</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line"><span class="comment">//获得class办法五:使用ClassLoader，后面再讲</span></span><br></pre></td></tr></table></figure></div>

<h2 id="6、常用方法"><a href="#6、常用方法" class="headerlink" title="6、常用方法"></a>6、常用方法</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>static ClassforName(String name)</td>
<td>返回指定类名name的Class对象</td>
</tr>
<tr>
<td>Object newInstance()</td>
<td>调用缺省构造函数，返回Class对象的一个实例</td>
</tr>
<tr>
<td>getName()</td>
<td>返回此Class对象所表示的实体（类，接口，数组类或 void）的名称。</td>
</tr>
<tr>
<td>Class getSuperClass()</td>
<td>返回当前Class对象的父类的Class对象</td>
</tr>
<tr>
<td>Class[] getinterfaces()</td>
<td>获取当前Class对象的接口</td>
</tr>
<tr>
<td>ClassLoader getClassLoader()</td>
<td>返回该类的类加载器</td>
</tr>
<tr>
<td>Constructor[] getConstructors()</td>
<td>返回一个包含某些Constructor对象的数组</td>
</tr>
<tr>
<td>Method getMothed(String name,Class.. T)</td>
<td>返回一个Method对象，此对象的形参类型为paramType</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>返回Field对象的一个数组</td>
</tr>
</tbody></table>
<h2 id="7、代码"><a href="#7、代码" class="headerlink" title="7、代码"></a>7、代码</h2><h3 id="7-1、访问Java对象的属性"><a href="#7-1、访问Java对象的属性" class="headerlink" title="7.1、访问Java对象的属性"></a>7.1、访问Java对象的属性</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">必须掌握：</span></span><br><span class="line"><span class="comment">    怎么通过反射机制访问一个java对象的属性？</span></span><br><span class="line"><span class="comment">        给属性赋值set</span></span><br><span class="line"><span class="comment">        获取属性的值get</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//不使用反射机制给属性赋值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.no = <span class="number">1111</span>;</span><br><span class="line">        System.out.println(student.no);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制给属性赋值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Student&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> studentClass.newInstance();<span class="comment">// obj就是Student对象。（底层调用无参数构造方法）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取no属性（根据属性的名称来获取Field）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        <span class="comment">// 给obj对象(Student对象)的no属性赋值</span></span><br><span class="line">        noField.set(obj, <span class="number">22222</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取属性的值</span></span><br><span class="line">        <span class="comment">// 两个要素：获取obj对象的no属性的值。</span></span><br><span class="line">        System.out.println(noField.get(obj));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="7-2、调用对象方法"><a href="#7-2、调用对象方法" class="headerlink" title="7.2、调用对象方法"></a>7.2、调用对象方法</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    反射机制，让代码很具有通用性，可变化的内容都是写到配置文件当中，</span></span><br><span class="line"><span class="comment">    将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，</span></span><br><span class="line"><span class="comment">    但是java代码不需要做任何改动。这就是反射机制的魅力。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 不使用反射机制，怎么调用方法</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        System.out.println(userService.login(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>) ? <span class="string">&quot;登入成功！&quot;</span> : <span class="string">&quot;登入失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用反射机制调用方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.UserService&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> userServiceClass.newInstance();</span><br><span class="line">        <span class="comment">// 获取Method</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">loginMethod</span> <span class="operator">=</span> userServiceClass.getDeclaredMethod(<span class="string">&quot;login&quot;</span>, String.class, String.class);</span><br><span class="line"><span class="comment">//        Method loginMethod = userServiceClass.getDeclaredMethod(&quot;login&quot;);//注：没有形参就不传</span></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">// 反射机制中最最最最最重要的一个方法，必须记住。</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">resValues</span> <span class="operator">=</span> loginMethod.invoke(obj, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//注：方法返回值是void 结果是null</span></span><br><span class="line">        System.out.println(resValues);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="7-3、通过反射机制调用构造方法实例化java对象"><a href="#7-3、通过反射机制调用构造方法实例化java对象" class="headerlink" title="7.3、通过反射机制调用构造方法实例化java对象"></a>7.3、通过反射机制调用构造方法实例化java对象</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过反射机制调用构造方法实例化java对象。（这个不是重点）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest12</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//不适用反射创建对象</span></span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vip1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vip</span>();</span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vip2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vip</span>(<span class="number">123</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;2001-10-19&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制创建对象（以前）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Vip&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用无参数构造方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> vipClass.newInstance();<span class="comment">//Class类的newInstance方法</span></span><br><span class="line">        System.out.println(obj1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制创建对象（现在）</span></span><br><span class="line">        <span class="comment">// 第一步：先获取到这个有参数的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c1</span> <span class="operator">=</span> vipClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class, String.class, <span class="type">boolean</span>.class);</span><br><span class="line">        <span class="comment">// 第二步：调用构造方法new对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> c1.newInstance(<span class="number">321</span>, <span class="string">&quot;lsi&quot;</span>, <span class="string">&quot;1999-10-11&quot;</span>, <span class="literal">true</span>);<span class="comment">//Constructor类的newInstance方法</span></span><br><span class="line">        System.out.println(obj2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取无参数构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c2</span> <span class="operator">=</span> vipClass.getDeclaredConstructor();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj3</span> <span class="operator">=</span> c2.newInstance();</span><br><span class="line">        System.out.println(obj3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="8、Java内存分析"><a href="#8、Java内存分析" class="headerlink" title="8、Java内存分析"></a>8、Java内存分析</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20231217104900894.png"
                      alt="image-20231217104900894"
                ></p>
<p><strong>类的加载与ClassLoader的理解</strong> </p>
<ul>
<li>加载： <ul>
<li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构， 然后生成一个代表这个类的java.lang.Class对象.</li>
</ul>
</li>
<li>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。 <ul>
<li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题 </li>
<li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。 </li>
<li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li>
</ul>
</li>
<li>初始化： <ul>
<li>执行类构造器()方法的过程。类构造器()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。 </li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。 </li>
<li>虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</li>
</ul>
</li>
</ul>
<p><strong>类加载器的作用</strong> </p>
<ul>
<li><p>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。 </p>
</li>
<li><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20231217105120709.png"
                      alt="image-20231217105120709"
                ></p>
</li>
<li><p>类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20231217105149533.png"
                      alt="image-20231217105149533"
                ></p>
</li>
</ul>
<h2 id="9、反射控制"><a href="#9、反射控制" class="headerlink" title="9、反射控制"></a>9、反射控制</h2><ul>
<li>Method和Field、Constructor对象都有setAccessible()方法。 </li>
<li>setAccessible作用是启动和禁用访问安全检查的开关。 </li>
<li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。 提高反射的效率。</li>
<li>如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。 </li>
<li>使得原本无法访问的私有成员也可以访问</li>
<li>参数值为false则指示反射的对象应该实施Java语言访问检查</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java请求转发和重定向的区别</title>
    <url>/2023/11/01/Java%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、请求转发和重定向"><a href="#一、请求转发和重定向" class="headerlink" title="一、请求转发和重定向"></a>一、请求转发和重定向</h2><p>请求转发：<br> <code>request.getRequestDispatcher(URL地址).forward(request, response)</code></p>
<p>处理流程：</p>
<ol>
<li>客户端发送请求，Servlet做出业务逻辑处理。</li>
<li>Servlet调用forword()方法，服务器Servlet把目标资源返回给客户端浏览器。</li>
</ol>
<p>这个是递归型</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Java%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/image-20231101144024547.png"
                      alt="image-20231101144024547"
                ></p>
<p>请求转发</p>
<p>2）重定向：<br> <code>response.sendRedirect(URL地址)</code></p>
<p>处理流程：</p>
<ol>
<li>客户端发送请求，Servlet做出业务逻辑处理。</li>
<li>Servlet调用response.sendReadirect()方法，把要访问的目标资源作为response响应头信息发给客户端浏览器。</li>
<li>客户端浏览器重新访问服务器资源xxx.jsp，服务器再次对客户端浏览器做出响应。</li>
</ol>
<p>这个是迭代型</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Java%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/image-20231101144047045.png"
                      alt="image-20231101144047045"
                ></p>
<p>重定向</p>
<p>以上两种情况，你都需要考虑Servlet处理完后，数据如何在jsp页面上呈现。图例是请求、响应的流程，没有标明数据如何处理、展现。</p>
<h2 id="二、转发和重定向的路径问题"><a href="#二、转发和重定向的路径问题" class="headerlink" title="二、转发和重定向的路径问题"></a>二、转发和重定向的路径问题</h2><p>1）使用相对路径在重定向和转发中没有区别</p>
<p> 2）重定向和请求转发使用绝对路径时，根&#x2F;路径代表了不同含义</p>
<p>重定向response.sendRedirect(“xxx”)是服务器向客户端发送一个请求头信息，由客户端再请求一次服务器。**&#x2F;指的Tomcat的根目录**,写绝对路径应该写成”&#x2F;当前Web程序根名称&#x2F;资源名” 。如”&#x2F;WebModule&#x2F;login.jsp”,”&#x2F;bbs&#x2F;servlet&#x2F;LoginServlet”</p>
<p>转发是在<strong>服务器内部</strong>进行的，写绝对路径&#x2F;开头指的是当前的Web应用程序。绝对路径写法就是”&#x2F;login.jsp”或”&#x2F;servlet&#x2F;LoginServlet”。</p>
<p><strong>总结</strong>：以上要注意是区分是从服务器外的请求，还在是内部转发，从服务器外的请求，从Tomcat根写起(就是要包括当前Web的根)；是服务器内部的转发，很简单了，因为在当前服务器内，&#x2F;写起指的就是当前Web的根目录。</p>
<h2 id="三、转发和重定向的区别"><a href="#三、转发和重定向的区别" class="headerlink" title="三、转发和重定向的区别"></a>三、转发和重定向的区别</h2><ol>
<li>request.getRequestDispatcher()是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；服务器内部转发，整个过程处于同一个请求当中。response.sendRedirect()则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。不在同一个请求。重定向，实际上客户端会向服务器端发送两个请求。所以转发中数据的存取可以用request作用域：<code>request.setAttribute(), request.getAttribute()</code>，重定向是取不到request中的数据的。只能用session。</li>
<li>forward()更加高效，在可以满足需要时，尽量使用RequestDispatcher.forward()方法。（思考一下为什么？）</li>
<li>RequestDispatcher是通过调用HttpServletRequest对象的getRequestDispatcher()方法得到的，是属于请求对象的方法。sendRedirect()是HttpServletResponse对象的方法，即响应对象的方法，既然调用了响应对象的方法，那就表明整个请求过程已经结束了，服务器开始向客户端返回执行的结果。</li>
<li>重定向可以跨域访问，而转发是在web服务器内部进行的，不能跨域访问。</li>
</ol>
<p>转自：<a class="link"   href="https://www.jianshu.com/p/29822c2c1ec0" >https://www.jianshu.com/p/29822c2c1ec0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC三层架构</title>
    <url>/2023/11/10/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="什么是MVC？"><a href="#什么是MVC？" class="headerlink" title="什么是MVC？"></a>什么是MVC？</h2><p>model view controller</p>
<p>模型、视图、控制器</p>
<h2 id="早年架构"><a href="#早年架构" class="headerlink" title="早年架构"></a>早年架构</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/image-20231110093144310.png"
                      alt="image-20231110093144310"
                ></p>
<p>用户直接访问控制层Controller，由控制器就可以直接操作数据库。这就导致，我们必须要在Servlet中写CRUD的代码，程序非常臃肿，不利于维护。Servlet需要处理请求、响应、试图跳转、处理JDBC、处理业务代码、处理逻辑代码。</p>
<p>架构上改进：加一层。</p>
<h2 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/image-20231110093405800.png"
                      alt="image-20231110093405800"
                ></p>
<p>Model</p>
<ul>
<li>业务处理：业务逻辑（service）</li>
<li>数据持久层：CRUD（Dao）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起请求</li>
</ul>
<p>Conttroller（Servlet）</p>
<ul>
<li>接收用户的请求（req：请求参数、Session信息等）</li>
<li>交给业务层处理对应的代码</li>
<li>控制试图的跳转</li>
</ul>
<p><code>登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username， password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用 户名和密码是否正确--&gt;数据库</code></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-01-概论</title>
    <url>/2023/12/10/Mybatis-01-%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul>
<li>jdk 8+</li>
<li>MySQL 8.0.35</li>
<li>maven-3.6.3</li>
<li>IDEA</li>
</ul>
<h2 id="1、MyBatis简介"><a href="#1、MyBatis简介" class="headerlink" title="1、MyBatis简介"></a>1、MyBatis简介</h2><h3 id="1-1、什么是MyBatis"><a href="#1-1、什么是MyBatis" class="headerlink" title="1.1、什么是MyBatis"></a>1.1、什么是MyBatis</h3><ul>
<li>MyBatis 是一款优秀的<strong>持久层</strong>框架</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程 </li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象映射成数据库中的记录。 </li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。 </li>
<li>2013年11月迁移到Github。</li>
<li>Mybatis官方文档 : <a class="link"   href="http://www.mybatis.org/mybatis-3/zh/index.html" >http://www.mybatis.org/mybatis-3/zh/index.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </li>
<li>GitHub : <a class="link"   href="https://github.com/mybatis/mybatis-3" >https://github.com/mybatis/mybatis-3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><ul>
<li><strong>持久化是将程序数据在持久状态和瞬时状态转换的机制</strong><ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。 </li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>
</ul>
</li>
<li><strong>为什么需要持久化服务呢？是由于内存本身的缺陷</strong><ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直 呆在内存中，需要持久化来缓存到外存。</li>
</ul>
</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><ul>
<li>完成持久化工作的代码块就叫做持久层，比如dao层【DAO Data Access Object 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现。</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>
</ul>
<h3 id="1-4、为什么需要Mybatis？"><a href="#1-4、为什么需要Mybatis？" class="headerlink" title="1.4、为什么需要Mybatis？"></a>1.4、为什么需要Mybatis？</h3><ul>
<li>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 。</li>
<li>传统的jdbc操作 , 有很多重复代码块。比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码，提高开发效率。</li>
<li>MyBatis 是一个<strong>半自动化的ORM框架 (Object Relationship Mapping)</strong> –&gt;<strong>对象关系映射</strong></li>
<li>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！技术没有高低之分，只有使用这个技术的人有高低之别</li>
<li>MyBatis的优点<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个 sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。 </li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。 </li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。 提供xml标签，支持编写动态sql。 </li>
<li>…….</li>
</ul>
</li>
<li>最重要的一点，使用的人多！公司需要！</li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-03-CRUDdemo</title>
    <url>/2023/12/11/Mybatis-03-CRUDdemo/</url>
    <content><![CDATA[<h2 id="1、selectById"><a href="#1、selectById" class="headerlink" title="1、selectById"></a>1、selectById</h2><p>userMapper.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">selectUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></div>

<p>userMapper.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.classOver.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> mybatisUtil.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectUserById(<span class="number">4</span>);</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-03-CRUDdemo/image-20231211162306226.png"
                      alt="image-20231211162306226"
                ></p>
<h2 id="2、addUser"><a href="#2、addUser" class="headerlink" title="2、addUser"></a>2、addUser</h2><p>userMapper.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertOne</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></div>

<p>userMapper.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOne&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.classOver.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> mybatisUtil.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">tky</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;tky&quot;</span>, <span class="string">&quot;12342&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.insertOne(tky);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3、updateOne"><a href="#3、updateOne" class="headerlink" title="3、updateOne"></a>3、updateOne</h2><p>userMapper.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateOne</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></div>

<p>userMapper.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateOne&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.classOver.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>test</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOne</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> mybatisUtil.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;567567&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.updateOne(user);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-03-CRUDdemo/image-20231211162802234.png"
                      alt="image-20231211162802234"
                ></p>
<h2 id="4、deleteOne"><a href="#4、deleteOne" class="headerlink" title="4、deleteOne"></a>4、deleteOne</h2><p>userMapper.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteOne</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></div>

<p>userMapper.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteOne&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>test</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteOne</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> mybatisUtil.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.deleteOne(<span class="number">4</span>);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5、模糊查询"><a href="#5、模糊查询" class="headerlink" title="5、模糊查询"></a>5、模糊查询</h2><p>userMapper.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">selectLike</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure></div>

<p>userMapper.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.classOver.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectLike</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> mybatisUtil.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = mapper.selectLike(<span class="string">&quot;%李%&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-03-CRUDdemo/image-20231211163830387.png"
                      alt="image-20231211163830387"
                ></p>
<p>要注意List<User> users &#x3D; mapper.selectLike(“%李%”);里面的通配符%。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>mybatis是默认开启事务的，所以对表有修改的操作都需要session.commit才能实现。</li>
<li>所有的增删改操作都需要提交事务</li>
<li>接口所有的普通参数，尽量都写上@Param参数，尤其是多个参数时，必须写上</li>
<li>有时候根据业务的需求，可以考虑使用map传递参数<ul>
<li>【用map的话，其中可以不用灵活设置参数名字，不用必须和库字段名以及实体类参数名相同】</li>
</ul>
</li>
<li>为了规范操作，在SQL的配置文件中，我们尽量将Parameter参数和resultType都写上</li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-02-第一个程序</title>
    <url>/2023/12/11/Mybatis-02-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="1、思路流程"><a href="#1、思路流程" class="headerlink" title="1、思路流程"></a>1、思路流程</h2><ul>
<li>搭建环境<ul>
<li>搭建数据库</li>
<li>导入maven依赖</li>
<li>整理目录结构</li>
</ul>
</li>
<li>导入Mybatis<ul>
<li>编写mybatis核心配置文件</li>
<li>构建sqlSessionFactory【固定三行代码提取成为一个工具类】</li>
</ul>
</li>
<li>编写dao层接口</li>
<li>编写dao接口对应的mapper.xml</li>
<li>编写其他业务代码</li>
<li>测试</li>
</ul>
<h2 id="2、准备代码"><a href="#2、准备代码" class="headerlink" title="2、准备代码"></a>2、准备代码</h2><h3 id="2-1、搭建数据库"><a href="#2-1、搭建数据库" class="headerlink" title="2.1、搭建数据库"></a>2.1、搭建数据库</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis;</span><br><span class="line"></span><br><span class="line">USE mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`id`,`name`,`pwd`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;狂神&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;张</span></span><br><span class="line"><span class="string">三&#x27;</span>,<span class="string">&#x27;abcdef&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;987654&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-02-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/image-20231211101908851.png"
                      alt="image-20231211101908851"
                ></p>
<h3 id="2-2、导入maven依赖"><a href="#2-2、导入maven依赖" class="headerlink" title="2.2、导入maven依赖"></a>2.2、导入maven依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-3、整理目录结构"><a href="#2-3、整理目录结构" class="headerlink" title="2.3、整理目录结构"></a>2.3、整理目录结构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-02-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/image-20231211105043913.png"
                      alt="image-20231211105043913"
                ></p>
<h3 id="2-4、编写mybatis核心配置文件"><a href="#2-4、编写mybatis核心配置文件" class="headerlink" title="2.4、编写mybatis核心配置文件"></a>2.4、编写mybatis核心配置文件</h3><p>在官方文档中复制</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?</span></span></span><br><span class="line"><span class="string"><span class="tag">                useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>chararcterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-5、编写Mybatis工具类"><a href="#2-5、编写Mybatis工具类" class="headerlink" title="2.5、编写Mybatis工具类"></a>2.5、编写Mybatis工具类</h3><p>读取mybatis核心配置文件，使用SqlSessionFactoryBuilder创建一个sqlSessionFactory，再用sqlSessionFactory开启一个sqlSession。【工厂模式】</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classOver.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mybatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3、业务代码"><a href="#3、业务代码" class="headerlink" title="3、业务代码"></a>3、业务代码</h2><h3 id="3-1、编写实体类"><a href="#3-1、编写实体类" class="headerlink" title="3.1、编写实体类"></a>3.1、编写实体类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classOver.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2、编写dao层（mapper）接口"><a href="#3-2、编写dao层（mapper）接口" class="headerlink" title="3.2、编写dao层（mapper）接口"></a>3.2、编写dao层（mapper）接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classOver.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.classOver.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-3、编写mapper-xml【重要】"><a href="#3-3、编写mapper-xml【重要】" class="headerlink" title="3.3、编写mapper.xml【重要】"></a>3.3、编写mapper.xml【重要】</h3><p>namespace是对应的UserMapper接口</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.classOver.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.classOver.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-4、测试"><a href="#3-4、测试" class="headerlink" title="3.4、测试"></a>3.4、测试</h3><h4 id="问题一：未在核心配置文件中注册UserMapper，报初始化错误"><a href="#问题一：未在核心配置文件中注册UserMapper，报初始化错误" class="headerlink" title="问题一：未在核心配置文件中注册UserMapper，报初始化错误"></a>问题一：未在核心配置文件中注册UserMapper，报初始化错误</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-02-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/image-20231211144658815.png"
                      alt="image-20231211144658815"
                ></p>
<p>需要在mybatis-config.xml中注册UserMapper，这里可以选择使用类、资源或者url进行注册，我们选择resources来注册UserMapper.xml。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-02-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/image-20231211144846915.png"
                      alt="image-20231211144846915"
                ></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/classOver/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="问题二：无法正确解析mapper-configuration"><a href="#问题二：无法正确解析mapper-configuration" class="headerlink" title="问题二：无法正确解析mapper configuration"></a>问题二：无法正确解析mapper configuration</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-02-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/image-20231211145138529.png"
                      alt="image-20231211145138529"
                ></p>
<p>这里是因为xml文件被拦截了，target文件夹中根本没有生成UserMapper.xml。这里是由于maven过滤了静态资源的原因，需要配置。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-02-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/image-20231211145552713.png"
                      alt="image-20231211145552713"
                ></p>
<p>在pom.xml中添加</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="成功测试"><a href="#成功测试" class="headerlink" title="成功测试"></a>成功测试</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classOver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.classOver.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.classOver.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.classOver.utils.mybatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> mybatisUtil.getSession();</span><br><span class="line">        <span class="comment">//方法一:已经被淘汰了</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = session.selectList(&quot;org.classOver.dao.UserMapper.selectUser&quot;);</span></span><br><span class="line">        <span class="comment">//方法二: </span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4、总结一下"><a href="#4、总结一下" class="headerlink" title="4、总结一下"></a>4、总结一下</h2><p>经过这个小demo实际上已经能够了解到mybatis的核心观念了，实际上就是使用了一个config.xml文件+util类代替了JDBC中重复书写的getConnection方法，使用XXXMapper.xml代替了JDBC中重复书写的prepareStatement和ResultSet代码和sql。简化了开发的流程，降低了耦合。</p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-04-配置文件</title>
    <url>/2023/12/11/Mybatis-04-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h2><ul>
<li>mybatis-config.xml 系统核心配置文件 </li>
<li>MyBatis 的配置文件包含了会深深影响MyBatis 行为的设置和属性信息。 </li>
<li>能配置的内容如下：</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br><span class="line"><span class="comment">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>我们可以阅读 mybatis-config.xml上面的dtd的头文件！【演示】</p>
<h2 id="2、envrionments元素"><a href="#2、envrionments元素" class="headerlink" title="2、envrionments元素"></a>2、envrionments元素</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p>
</li>
<li><p>子元素节点：environment </p>
<ul>
<li><p>具体的一套环境，通过设置id进行区别，id保证唯一！ </p>
</li>
<li><p>子元素节点：transactionManager - [ 事务管理器 ]</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;[ JDBC | MANAGED ]&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>详情：<a class="link"   href="http://www.mybatis.org/mybatis-3/zh/configuration.html#environments" >http://www.mybatis.org/mybatis-3/zh/configuration.html#environments <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这两种事务管理器类型都不需要设置任何属性。</p>
</li>
<li><p>子元素节点：数据源（dataSource）</p>
<ul>
<li><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源</p>
</li>
<li><p>数据源是必须配置的。</p>
</li>
<li><p>有三种内建的数据源类型</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>unpooled： 这个数据源的实现只是每次被请求时打开和关闭连接。</p>
</li>
<li><p>pooled： 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。 </p>
</li>
<li><p>jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。 </p>
</li>
<li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3、mappers元素"><a href="#3、mappers元素" class="headerlink" title="3、mappers元素"></a>3、mappers元素</h2><p>映射器 : 定义映射SQL语句文件</p>
<p>既然 MyBatis 的行为其他元素已经配置完了，我们现在就要定义 SQL 映射语句了。但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。 Java 在自动查找这方面没有提供一个很好的方法，<strong>所以最佳的方式是告诉 MyBatis 到哪里去找映射文件</strong>。你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 file:&#x2F;&#x2F;&#x2F; 的 URL），或类名和包名等。映射器是MyBatis中最核心的组件之一，在MyBatis 3之前，只支持xml映射器，即：所有的SQL语句都必须在xml文件中配置。而从MyBatis 3开始，还支持接口映射器，这种映射器方式允许以Java代码的方式注解定义SQL 语句，非常简洁。</p>
<h3 id="3-1、资源引入方式"><a href="#3-1、资源引入方式" class="headerlink" title="3.1、资源引入方式"></a>3.1、资源引入方式</h3><p>还是最推荐使用resource进行资源引用，因为class和packgae要求很高，url存在路径问题。</p>
<p><strong>注意：</strong></p>
<ul>
<li><p><strong>对于package和class这种注册方式，如果要将xml文件放到resources包下的话，要让其路径和所对应的java文件一直，因为配置文件查找是根据classpath进行查询的。如下图所示。</strong></p>
<p><strong>因为resources的文件在编译之后都会输出在classpath路径下，也就是和org同级的目录，当在resources中创建了与对应java文件相应的目录后，输出target时会将两个目录的内容合并，由此可得classpath中java文件和xml文件在同一个包中。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-04-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-20231211172518268.png"
                      alt="image-20231211172518268"
                ></p>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-2、Mapper文件"><a href="#3-2、Mapper文件" class="headerlink" title="3.2、Mapper文件"></a>3.2、Mapper文件</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>namespace中文意思：命名空间，作用如下：</p>
<ol>
<li>namespace和子元素的id联合保证唯一 , 区别不同的mapper </li>
<li>绑定DAO接口 <ol>
<li>namespace的命名必须跟某个接口同名</li>
<li>接口中的方法与映射文件中sql语句id应该一一对应</li>
</ol>
</li>
<li>namespace命名规则 : 包名+类名</li>
</ol>
<p>MyBatis 的真正强大在于它的映射语句，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代 码。MyBatis 为聚焦于 SQL 而构建，以尽可能地为你减少麻烦。</p>
<h2 id="4、Properties优化"><a href="#4、Properties优化" class="headerlink" title="4、Properties优化"></a>4、Properties优化</h2><p>数据库这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。</p>
<p>我们来优化我们的配置文件 </p>
<p>第一步 ; 在资源目录下新建一个db.properties</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?</span></span><br><span class="line"><span class="attr">useSSL</span>=<span class="string">true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></div>

<p>第二步 : 将文件导入properties 配置文件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>配置文件优先级问题——properties文件中的配置优先级更高</p>
<p>新特性：使用占位符</p>
<h2 id="5、typeAliases优化"><a href="#5、typeAliases优化" class="headerlink" title="5、typeAliases优化"></a>5、typeAliases优化</h2><p>类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>当这样配置时， <strong>User</strong>可以用在任何使用 <strong>com.kuang.pojo.User</strong> 的地方。</p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>每一个在包 com.kuang.pojo 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 </p>
<p>若有注解，则别名为其注解值。见下面的例子：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="6、其他配置浏览"><a href="#6、其他配置浏览" class="headerlink" title="6、其他配置浏览"></a>6、其他配置浏览</h2><h3 id="6-1、设置"><a href="#6-1、设置" class="headerlink" title="6.1、设置"></a>6.1、设置</h3><ul>
<li>懒加载</li>
<li>日志实现</li>
<li>缓存开启关闭</li>
</ul>
<p>一个配置完整的 settings 元素的示例如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-2、类型处理器"><a href="#6-2、类型处理器" class="headerlink" title="6.2、类型处理器"></a>6.2、类型处理器</h3><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。 </p>
<p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。【了解即可】</p>
<h3 id="6-3、对象工厂"><a href="#6-3、对象工厂" class="headerlink" title="6.3、对象工厂"></a>6.3、对象工厂</h3><p>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 </p>
<p>默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过有参构造方法来实例化。 </p>
<p>如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。【了解即可】</p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-05-生命周期和作用域</title>
    <url>/2023/12/15/Mybatis-05-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="作用域和生命周期"><a href="#作用域和生命周期" class="headerlink" title="作用域和生命周期"></a>作用域和生命周期</h2><p>错误地使用会导致非常严重的并发问题</p>
<p>一下是MyBatis的执行流程图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-05-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/image-20231215092740409.png"
                      alt="image-20231215092740409"
                ></p>
<h2 id="作用域解析"><a href="#作用域解析" class="headerlink" title="作用域解析"></a>作用域解析</h2><ol>
<li>SqlSessionFactoryBuilder：其作用就是创建SqlSessionFactory，创建成功后，就失去了作用，所以他只能存在于创建SqlSessionFactory的方法中，不必让其长期存在。<strong>因此SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。</strong></li>
<li>SqlSessionFactory：<ol>
<li>可以被认为是一个数据库连接池，它的作用是创建SqlSession接口对象。因为MyBatis的本质就是Java对数据库的操作，所以SqlSessionFactory的生命周期存在于整个MyBatis的应用之中。所以一旦创建SqlSessionFactory，就要长期保存它，直至不再使用 MyBatis 应用，所以可以认为 SqlSessionFactory 的生命周期就等同于 MyBatis 的应用周期</li>
<li>由于SqlSessionFactory就是一个对数据库的连接池，所以它站着数据库的连接资源。如果创建多个SqlSessionFactory，就会存在多个数据库连接池，这样不利于对数据库资源的控制，也会导致数据库链接资源被消耗光，出现系统宕机等情况，所以避免发生这样的情况。</li>
<li>在一般的应用中我们往往希望 SqlSessionFactory 作为一个单例，让它在应用中被共享。<strong>所以说 SqlSessionFactory 的最佳作用域是应用作用域。</strong></li>
</ol>
</li>
<li>SqlSession相当于一个数据库连接（Connection对象），你可以在一个事务里面执行多条SQL，然后通过它的commint、rollback等方法，提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给 SqlSessionFactory，否则数据库资源就很快被耗费精光，系统就会瘫痪，所以用 try…catch…finally… 语句来保证其正确关闭。<strong>所以 SqlSession 的最佳的作用域是请求或方法作用域。即一个请求创建一条连接</strong></li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-05-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/image-20231215093518636.png"
                      alt="image-20231215093518636"
                ></p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-07-分页</title>
    <url>/2023/12/15/Mybatis-07-%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h2 id="1、日志工厂"><a href="#1、日志工厂" class="headerlink" title="1、日志工厂"></a>1、日志工厂</h2><p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：</p>
<ul>
<li>SLF4J </li>
<li>Apache </li>
<li>Commons </li>
<li>Logging </li>
<li>Log4j 2 </li>
<li>Log4j </li>
<li>JDK logging</li>
</ul>
<p>具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。 如果一个都未找到，日志功能就会被禁用。</p>
<h3 id="1-1、标准日志实现"><a href="#1-1、标准日志实现" class="headerlink" title="1.1、标准日志实现"></a>1.1、标准日志实现</h3><p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="1-2、Log4j"><a href="#1-2、Log4j" class="headerlink" title="1.2、Log4j"></a>1.2、Log4j</h3><p><strong>简介：</strong> </p>
<ul>
<li>Log4j是Apache的一个开源项目 </li>
<li>通过使用Log4j，我们可以控制日志信息输送的目的地：控制台，文本，GUI组件…. </li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>导入log4j的包</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置文件编写</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下</span></span><br><span class="line"><span class="attr">面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>setting设置日志实现</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在程序中使用Log4j进行输出</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意导包：org.apache.log4j.Logger</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(MyTest.class);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;info：进入selectUser方法&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;debug：进入selectUser方法&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;error: 进入selectUser方法&quot;</span>);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">    	System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试，看控制台输出</p>
<p>使用Log4j 输出日志</p>
<p>可以看到还生成了一个日志的文件 【需要修改file的日志级别】</p>
</li>
</ol>
<h2 id="2、limit实现分页"><a href="#2、limit实现分页" class="headerlink" title="2、limit实现分页"></a>2、limit实现分页</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT stratIndex，pageSize</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>,<span class="number">10</span>; <span class="operator">/</span><span class="operator">/</span> 检索记录行 <span class="number">6</span><span class="number">-15</span></span><br><span class="line"></span><br><span class="line">#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 <span class="number">-1</span>：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">95</span>,<span class="number">-1</span>; <span class="operator">/</span><span class="operator">/</span> 检索记录行 <span class="number">96</span><span class="operator">-</span>last.</span><br><span class="line"></span><br><span class="line">#如果只给定一个参数，它表示返回最大的记录行数目：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>; <span class="operator">/</span><span class="operator">/</span>检索前 <span class="number">5</span> 个记录行</span><br><span class="line"></span><br><span class="line">#换句话说，LIMIT n 等价于 LIMIT <span class="number">0</span>,n。</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>修改Mapper文件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Mapper接口，参数为map</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择全部用户实现分页</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在测试类中传入参数测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询 , 两个参数startIndex , pageSize</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">currentPage</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//第几页</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">//每页显示几个</span></span><br><span class="line">    Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,(currentPage-<span class="number">1</span>)*pageSize);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,pageSize);</span><br><span class="line">    </span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser(map);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">    	System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="3、RowBounds分页"><a href="#3、RowBounds分页" class="headerlink" title="3、RowBounds分页"></a>3、RowBounds分页</h2><ol>
<li><p>mapper接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择全部用户RowBounds实现分页</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByRowBounds</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>mapper文件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserByRowBounds</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">currentPage</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">//第几页</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">//每页显示几个</span></span><br><span class="line">    <span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>((currentPage1)*pageSize,pageSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过session.**方法进行传递rowBounds，[此种方式现在已经不推荐使用了]</span></span><br><span class="line">    List&lt;User&gt; users = session.selectList(<span class="string">&quot;com.kuang.mapper.UserMapper.getUserByRowBounds&quot;</span>, <span class="literal">null</span>, rowBounds);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">    	System.out.println(user);</span><br><span class="line">	&#125;</span><br><span class="line">	session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="4、PageHelper"><a href="#4、PageHelper" class="headerlink" title="4、PageHelper"></a>4、PageHelper</h2><p><a class="link"   href="https://pagehelper.github.io/" >https://pagehelper.github.io/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-07-%E5%88%86%E9%A1%B5/image-20231215101051535.png"
                      alt="image-20231215101051535"
                ></p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-06-ResultMap</title>
    <url>/2023/12/15/Mybatis-06-ResultMap/</url>
    <content><![CDATA[<p>1</p>
<h2 id="1、要解决的问题"><a href="#1、要解决的问题" class="headerlink" title="1、要解决的问题"></a>1、要解决的问题</h2><p>前面的实践一直是让JavaBean中的各个属性和数据库中的字段一一对应且名称相同。但是有时候我们的实体类设计可能会和数据库中的表设计不同。这种情况下，再使用ResultType&#x3D;实体类，就可能无法映射，因此提出了ResultMap，通过这个实现数据库和实体类的字段对应。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">	select id , name , pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、ResultMap"><a href="#2、ResultMap" class="headerlink" title="2、ResultMap"></a>2、ResultMap</h2><h3 id="2-1、自动映射"><a href="#2-1、自动映射" class="headerlink" title="2.1、自动映射"></a>2.1、自动映射</h3><ul>
<li><strong>resultMap</strong> 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC <strong>ResultSets</strong> 数据提取代码中解放出来。 </li>
<li>实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 <strong>resultMap</strong> 能够代替实现同等功能的长达数千行的代码。 </li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
</ul>
<p>你已经见过简单映射语句的示例了，但并没有显式指定 <strong>resultMap</strong> 。比如：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select id , name , pwd</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>上述语句只是简单地将所有的列映射到 HashMap 的键上，这由 resultType 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。你的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p>
<p><strong>ResultMap</strong> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</p>
<h3 id="2-2、手动映射"><a href="#2-2、手动映射" class="headerlink" title="2.2、手动映射"></a>2.2、手动映射</h3><ol>
<li><p>返回值类型为ResultMap</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">	select id , name , pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写ResultMap，实现手动映射\</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>这只是简单介绍一下ResultMap的使用方法，事实上，在实际使用的过程中，还会涉及到多对多、一对多、多对一等各种情况，这需要使用到一些高级的结果集映射，association、collestion这些。本文重在理解结果集映射这个概念。</p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-08-注解</title>
    <url>/2023/12/15/Mybatis-08-%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="1、面向接口编程"><a href="#1、面向接口编程" class="headerlink" title="1、面向接口编程"></a>1、面向接口编程</h2><ul>
<li>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程 </li>
<li><strong>根本原因 : 解耦 , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong></li>
<li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下， 各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；</li>
<li>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交 互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按 照这种思想来编程。</li>
</ul>
<p><strong>接口：</strong></p>
<ul>
<li>实际上是定义（规范、约束）与实现的分离</li>
<li>本身反映了系统设计人员对系统的抽象理解</li>
<li>接口应该有两类<ul>
<li>第一类是对一个个体的抽象，它可以对应为一个抽象体（abstract class）</li>
<li>第二类是对一个个体某一方面的抽象，即形成一个抽象面(interface)</li>
</ul>
</li>
<li>一个个体可能有多个抽象面，抽象体与抽象面是有区别的。</li>
</ul>
<p><strong>三个面向：</strong></p>
<ul>
<li>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法</li>
<li>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现</li>
<li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</li>
</ul>
<h2 id="2、mybatis中利用注解开发"><a href="#2、mybatis中利用注解开发" class="headerlink" title="2、mybatis中利用注解开发"></a>2、mybatis中利用注解开发</h2><p>mybatis最初配置信息是基于 XML ,映射语句(SQL)也是定义在 XML 中的。而到MyBatis 3提供了新的基于注解的配置。不幸的是，Java 注解的的表达力和灵活性十分有限。最强大的 MyBatis 映射并不能用注解来构建。</p>
<ul>
<li>@select () </li>
<li>@update () </li>
<li>@Insert () </li>
<li>@delete ()</li>
</ul>
<p><strong>【注意】利用注解开发就不需要mapper.xml映射文件了</strong></p>
<p><strong>如果既要使用注解又要使用xml映射文件就会发生冲突导致注解失效</strong></p>
<ol>
<li><p>接口中添加注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>mybatis核心配置文件中绑定接口</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.classOver.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> mybatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectAllUsers();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>debug一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-08-%E6%B3%A8%E8%A7%A3/image-20231215141305020.png"
                      alt="image-20231215141305020"
                ></p>
</li>
<li><p>本质上利用了jvm的动态代理机制</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-08-%E6%B3%A8%E8%A7%A3/image-20231215141336884.png"
                      alt="image-20231215141336884"
                ></p>
</li>
<li><p>Mybatis的详细执行流程</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-08-%E6%B3%A8%E8%A7%A3/image-20231215141411940.png"
                      alt="image-20231215141411940"
                ></p>
</li>
</ol>
<h2 id="3、注解增删改"><a href="#3、注解增删改" class="headerlink" title="3、注解增删改"></a>3、注解增删改</h2><p>修改工具类的getSession方法可以实现事务的自动提交</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取SqlSession连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> getSession(<span class="literal">true</span>); <span class="comment">//事务自动提交</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> flag)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sqlSessionFactory.openSession(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">selectUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectUserById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">6</span>, <span class="string">&quot;秦疆&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    mapper.addUser(user);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">6</span>, <span class="string">&quot;秦疆&quot;</span>, <span class="string">&quot;zxcvbn&quot;</span>);</span><br><span class="line">    mapper.updateUser(user);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id删除用</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span><span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser(<span class="number">6</span>);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="关于-Param"><a href="#关于-Param" class="headerlink" title="关于@Param"></a>关于@Param</h3><ul>
<li>@Param注解用于给方法参数起一个名字。以下是总结的使用原则： </li>
<li>在方法只接受一个参数的情况下，可以不使用@Param。 </li>
<li>在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名。 </li>
<li>如果参数是 JavaBean ， 则<strong>不能使用@Param</strong>。 </li>
<li>不使用@Param注解时，参数只能有一个，并且是Javabean。</li>
</ul>
<h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#和$的区别"></a>#和$的区别</h3><p>#{} 的作用主要是替换预编译语句(PrepareStatement)中的占位符? 【推荐使用】</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (#&#123;name&#125;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (?);</span><br></pre></td></tr></table></figure></div>

<p>${} 的作用是<strong>直接</strong>进行字符串替换(可能存在注入危险)</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;$&#123;name&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;kuangshen&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-09-一对多、多对多和动态SQL</title>
    <url>/2023/12/17/Mybatis-09-%E4%B8%80%E5%AF%B9%E5%A4%9A%E3%80%81%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%92%8C%E5%8A%A8%E6%80%81SQL/</url>
    <content><![CDATA[<h2 id="1、多对一"><a href="#1、多对一" class="headerlink" title="1、多对一"></a>1、多对一</h2><p>比如多个学生对应一个老师。</p>
<h3 id="1-1、引入Lombok"><a href="#1-1、引入Lombok" class="headerlink" title="1.1、引入Lombok"></a>1.1、引入Lombok</h3><ol>
<li><p>IDEA安装Lombok插件</p>
</li>
<li><p>引入Maven依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>代码中增加注解就可以啦</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//GET,SET,ToString，有参，无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Data</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">       <span class="keyword">private</span> String name;</span><br><span class="line">       <span class="comment">//多个学生可以是同一个老师，即多对一</span></span><br><span class="line">       <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">### <span class="number">1.2</span>、mybatis配置</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 针对不同的实体类编写Mapper接口</span><br><span class="line"></span><br><span class="line">   **无论有没有需求，都应该写上，以备后来之需！**</span><br><span class="line"></span><br><span class="line">   ```java</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写配置文件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="1-3、查询嵌套"><a href="#1-3、查询嵌套" class="headerlink" title="1.3、查询嵌套"></a>1.3、查询嵌套</h3><p>按照查询进行嵌套处理就像SQL中的子查询 </p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">        思路：</span></span><br><span class="line"><span class="comment">        1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">        2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">        3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般</span></span><br><span class="line"><span class="comment">        使用关联查询？</span></span><br><span class="line"><span class="comment">        1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">        2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">        3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">        多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">        4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    	select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名(这里就是指学生表中和老师相关的列名tid)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        #&#123;id&#125; 取的值，此时的语句，#&#123;&#125;里面其实无论些写什么，都会自动推测对应column=&quot;tid&quot;，所以说里面写什么不重要</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    	select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;&#123;id=tid,name=tid&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">    association中column多参数配置：</span></span><br><span class="line"><span class="comment">    column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class="line"><span class="comment">    其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">	select * from teacher where id = #&#123;id&#125; and name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="1-4、结果嵌套"><a href="#1-4、结果嵌套" class="headerlink" title="1.4、结果嵌套"></a>1.4、结果嵌套</h3><p>按照结果进行嵌套处理就像SQL中的联表查询</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">    1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class="line">    select s.id sid, s.name sname , t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、一对多"><a href="#2、一对多" class="headerlink" title="2、一对多"></a>2、一对多</h2><p>一个老师有多个学生（集合）</p>
<h3 id="2-1、实体类"><a href="#2-1、实体类" class="headerlink" title="2.1、实体类"></a>2.1、实体类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//一个老师多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2、结果嵌套"><a href="#2-2、结果嵌套" class="headerlink" title="2.2、结果嵌套"></a>2.2、结果嵌套</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        思路:</span></span><br><span class="line"><span class="comment">        1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">        2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">        1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">        JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">        JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">        ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-3、查询嵌套"><a href="#2-3、查询嵌套" class="headerlink" title="2.3、查询嵌套"></a>2.3、查询嵌套</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">	select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">	select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-4、小结"><a href="#2-4、小结" class="headerlink" title="2.4、小结"></a>2.4、小结</h3><ol>
<li>关联-association </li>
<li>集合-collection </li>
<li>所以association是用于一对一和多对一，而collection是用于一对多的关系 </li>
<li>JavaType和ofType都是用来指定对象类型的 <ol>
<li>JavaType是用来指定pojo中属性的类型 </li>
<li>ofType指定的是映射到list集合属性中pojo的类型。</li>
</ol>
</li>
</ol>
<p><strong>注意说明：</strong> </p>
<ol>
<li>保证SQL的可读性，尽量通俗易懂</li>
<li>根据实际要求，尽量编写性能更高的SQL语句 </li>
<li>注意属性名和字段不一致的问题</li>
<li>注意一对多和多对一 中：字段和属性对应的问题</li>
<li>尽量使用Log4j，通过日志来查看自己的错误</li>
</ol>
<h2 id="3、动态SQL"><a href="#3、动态SQL" class="headerlink" title="3、动态SQL"></a>3、动态SQL</h2><p>什么是动态SQL：动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句。</p>
<p><strong>官网描述：</strong></p>
<p>MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<p>虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。</p>
<p>动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p>
   <div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line"> -------------------------------</span><br><span class="line">    - if</span><br><span class="line">    - choose (when, otherwise)</span><br><span class="line">    - trim (where, set)</span><br><span class="line">    - foreach</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure></div>

<p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p>
<p>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p>
<h3 id="3-1、if"><a href="#3-1、if" class="headerlink" title="3.1、if"></a>3.1、if</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求1：</span></span><br><span class="line"><span class="comment">    根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">    如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment">    select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    	title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">    	and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title&#x3D;#{title}, 但是如果title为空呢？那么查询语句为 select * from user where and author&#x3D;#{author}，这是错误的 SQL 语句，如何解决呢？请看下面的 where 语句！</p>
<h3 id="3-2、where"><a href="#3-2、where" class="headerlink" title="3.2、where"></a>3.2、where</h3><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND或OR 开头的，则它会剔除掉。【这是我们使用的最多的案例】</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        	title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        	and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-3、set"><a href="#3-3、set" class="headerlink" title="3.3、set"></a>3.3、set</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        	title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        	author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-4、choose-whern-otherwise"><a href="#3-4、choose-whern-otherwise" class="headerlink" title="3.4、choose-whern-otherwise"></a>3.4、choose-whern-otherwise</h3><p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            	title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            	and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            	and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-5、引用SQL片段"><a href="#3-5、引用SQL片段" class="headerlink" title="3.5、引用SQL片段"></a>3.5、引用SQL片段</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一个提取出来的片段，取名字为if-title-author--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    	title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">    	and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引用，提高代码复用性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<p>①、最好基于 单表来定义 sql 片段，提高片段的可重用性 </p>
<p>②、在 sql 片段中不要包括 where</p>
<h3 id="3-6、Foreach"><a href="#3-6、Foreach" class="headerlink" title="3.6、Foreach"></a>3.6、Foreach</h3><p>将数据库中前三个数据的id修改为1,2,3；</p>
<p>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">            item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">            open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">            close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">            separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">            select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">        	id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>其实动态 sql 语句的编写往往就是一个拼接的问题，为了保证拼接准确，我们最好首先要写原生的 sql 语句出来，然后在通过 mybatis 动态sql对照着改，防止出错。多在实践中使用才是熟练掌握它的技巧。</p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SUSCTF2023Writeup</title>
    <url>/2023/10/17/SUSCTF2023Writeup/</url>
    <content><![CDATA[<p>第一次ctf来试试校赛，学习为主。</p>
<h2 id="简单-PHP-Is-All-You-Need"><a href="#简单-PHP-Is-All-You-Need" class="headerlink" title="[简单] PHP Is All You Need"></a>[简单] PHP Is All You Need</h2><p>看到代码先传值rce一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231013100529905.png"
                      alt="image-20231013100529905"
                ></p>
<p>通配符*绕过一下限制（后面是后来复现补的图）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015165145324.png"
                      alt="image-20231015165145324"
                ></p>
<p>感觉全都加粗了 这是一个php捏 看一下源代码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015165250809.png"
                      alt="image-20231015165250809"
                ></p>
<h2 id="简单-easy-rce"><a href="#简单-easy-rce" class="headerlink" title="[简单] easy_rce"></a>[简单] easy_rce</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014091512679.png"
                      alt="image-20231014091512679"
                ></p>
<p>?create_function&#x3D;;}eval(system(“cat%20&#x2F;etc&#x2F;passwd”));&#x2F;&#x2F;</p>
<p>找到了一个flag文件但是打不开，0700就是没有权限，现在是一个普通用户</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014100302237.png"
                      alt="image-20231014100302237"
                ></p>
<p>尝试一下suid提权，就是找到一些以普通用户身份拥有root权限的文件，命令都是在网上找的</p>
<p>这个这个这个mycat感觉有点奇怪呢</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014100925421.png"
                      alt="image-20231014100925421"
                ></p>
<p>就决定是你啦！让他来运行一下flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014104140371.png"
                      alt="image-20231014104140371"
                ></p>
<h2 id="简单-babypowershell"><a href="#简单-babypowershell" class="headerlink" title="[简单] babypowershell"></a>[简单] babypowershell</h2><p>字符串拼接+ASCII码转接</p>
<p>再查到了这个，删掉再输出py，就能看到flag了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014132328915.png"
                      alt="image-20231014132328915"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014132607383.png"
                      alt="image-20231014132607383"
                ></p>
<h2 id="简单-百团"><a href="#简单-百团" class="headerlink" title="[简单] 百团"></a>[简单] 百团</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015170044643.png"
                      alt="image-20231015170044643"
                ></p>
<p>先用010editor看看，翻到最下面有奇怪的东西，看起来像是usehalfflag.txt 的压缩包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014152831543.png"
                      alt="image-20231014152831543"
                ></p>
<p>改成zip解压一下发现需要密码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015165958998.png"
                      alt="image-20231015165958998"
                ></p>
<p>刚刚图上的二维码还没扫，扫出来是一串编码，转成中文是奇怪的东西</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014152431511.png"
                      alt="image-20231014152431511"
                ></p>
<p>查了一下是当铺密码，<a class="link"   href="https://blog.csdn.net/zz_Caleb/article/details/86525978%E8%BF%99%E4%B8%AA%E6%98%AF%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%B8%8D%E9%9C%80%E8%A6%81%E5%B7%A5%E5%85%B7%E7%9B%B4%E6%8E%A5%E6%89%8B%E5%8A%A8%E8%A7%A3%E5%AF%86%E5%BE%88%E5%BF%AB%E7%9A%84%E3%80%82%E6%8E%A5%E5%87%BA%E6%9D%A5%E5%B0%B1%E6%98%AF%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%B8%80%E4%B8%B2%E6%95%B0%E5%AD%97%E3%80%82%E8%BF%99%E4%B8%AA%E6%95%B0%E5%AD%97%E7%9C%8B%E8%B5%B7%E6%9D%A5%E5%BE%88%E5%83%8FASCII%EF%BC%8C%E5%85%88%E6%8E%92%E9%99%A4Bin%EF%BC%8C%E6%8A%8ADec%E5%92%8CHex%E9%83%BD%E8%AF%95%E8%AF%95%EF%BC%8C%E5%B0%B1%E8%83%BD%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%B2%E8%B2%8C%E4%BC%BCflag%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E4%BD%86%E6%98%AF%E7%94%A8susctf%7B%7D%E5%8C%85%E8%A3%B9%E6%8F%90%E4%BA%A4%E9%94%99%E8%AF%AF%E3%80%82%E6%83%B3%E8%B5%B7%E6%9D%A5%E5%88%9A%E6%89%8D%E7%9A%84%E6%96%87%E4%BB%B6%E8%BF%98%E6%B2%A1%E5%BC%80%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%BA%94%E8%AF%A5%E6%98%AF%E5%8E%8B%E7%BC%A9%E5%AF%86%E7%A0%81%E3%80%82" >https://blog.csdn.net/zz_Caleb/article/details/86525978这个是很简单的密码教程，可以不需要工具直接手动解密很快的。接出来就是下面的一串数字。这个数字看起来很像ASCII，先排除Bin，把Dec和Hex都试试，就能得到一串貌似flag的字符，但是用susctf{}包裹提交错误。想起来刚才的文件还没开，这个应该是压缩密码。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014152418140.png"
                      alt="image-20231014152418140"
                ></p>
<p>拿过去把压缩包打开，usehalfflag.txt里面是这个，才发现名字是usehalfflag，half！！！！</p>
<p>应该真正的flag是需要把上面的字符串和txt中的字符串拼在一起再包上susctf{}。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/7eb0496aaa920f50f2018281fa2af90.png"
                      alt="7eb0496aaa920f50f2018281fa2af90"
                ></p>
<h2 id="简单-sleep-away"><a href="#简单-sleep-away" class="headerlink" title="[简单] sleep away"></a>[简单] sleep away</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014173258918.png"
                      alt="image-20231014173258918"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014173533372.png"
                      alt="image-20231014173533372"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231014175542003.png"
                      alt="image-20231014175542003"
                ></p>
<p>?step1&#x3D;0e215962017&amp;backdoor&#x3D;o:8:”safeeval”:2:{s:7:”evalstr”;s:4:”eval”;s:9:”args_down”;s:12:”system(“ls”)”;}</p>
<p>?step1&#x3D;0e215962017&amp;backdoor&#x3D;o:6:”helper”:4:{s:7:”youneed”;s:1:”a”;s:7:”truearg”;s:1:”b”;s:7:”thinkit”;s:1:”c”;s:7:”ture”;s:1:”d”;}</p>
<p><strong>&#x3D;&#x3D;好这个没做出来886TAT&#x3D;&#x3D;</strong></p>
<h2 id="简单-转瞬即逝"><a href="#简单-转瞬即逝" class="headerlink" title="[简单] 转瞬即逝"></a>[简单] 转瞬即逝</h2><p>源码中有提示，就是需要构造一个输入让他和运行时间戳相差5s。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015101606333.png"
                      alt="image-20231015101606333"
                ></p>
<p>直接用这个爆破一下。</p>
<p>这里看了好久，爆破出来除了有login success啥也没有啊，也没有回显。</p>
<p>不过返回了token</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015101541771.png"
                      alt="image-20231015101541771"
                ></p>
<p>拿去浅解密一下呢，也不知道是什么编码，反正不是base64，就直接用cyberchef硬解，发现是JWT，总之就over了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015101511557.png"
                      alt="image-20231015101511557"
                ></p>
<h2 id="简单-SUSTV"><a href="#简单-SUSTV" class="headerlink" title="[简单] SUSTV"></a>[简单] SUSTV</h2><p>先拉到最后听到了外星音</p>
<p>然后看了下波形</p>
<p>去网上搜了一下SSTV的声音，确定方向</p>
<p>下载了MMSSTV，放给他听就出来啦</p>
<p>然后扫码就ok了。这个题没什么弯弯绕绕，<strong>不像有的题：）</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015124241509.png"
                      alt="image-20231015124241509"
                ></p>
<h2 id="简单-维吉尼亚"><a href="#简单-维吉尼亚" class="headerlink" title="[简单] 维吉尼亚"></a>[简单] 维吉尼亚</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015144058562.png"
                      alt="image-20231015144058562"
                ></p>
<p><strong>susctf{}格式，字母在a-f之间</strong></p>
<p><strong>key是10位</strong></p>
<p>密文是ieplnp{bhtnr6m3-04bm-41w3-lg78-c040377ys146}</p>
<p>可以根据性质推算出密钥key：qkxjukbctn再解密一下（一开始想爆破，但是感觉根本不用，直接手算好像更方便一点</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015144208245.png"
                      alt="image-20231015144208245"
                ></p>
<h2 id="简单-queencard"><a href="#简单-queencard" class="headerlink" title="[简单] queencard"></a>[简单] queencard</h2><p>这个题一开始是放进audacity里面看了好久，一秒一秒地也没找出什么问题来，波形和频谱都没啥问题，歌挺好听的。</p>
<p>然后就用010Editor打开看看吧，这里还去查了一下题目里说的private和Jeremiah Denton。一开始以为是摩斯密码，结果方向完全错了。private是private bit的意思，从来没见过这个玩意儿，不知道什么是privatebit。</p>
<p>去学习了一下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015171319538.png"
                      alt="image-20231015171319538"
                ></p>
<p>有方向之后就在找相关的字段，找到private bit，准备开始写脚本</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015160228863.png"
                      alt="image-20231015160228863"
                ></p>
<p>脚本这里，有一个小细节，mf[0]是不能包含进去的，因为他根本不是一个正常的节，他只有208，所以就从mf[1]开始遍历，找了现成的脚本改了数据。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015171746649.png"
                      alt="image-20231015171746649"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015161613957.png"
                      alt="image-20231015161613957"
                ></p>
<h2 id="简单-pollute-me！"><a href="#简单-pollute-me！" class="headerlink" title="[简单] pollute me！"></a>[简单] pollute me！</h2><p>点进实例发现一个输入</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015171937057.png"
                      alt="image-20231015171937057"
                ></p>
<p>看一下源代码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015172121437.png"
                      alt="image-20231015172121437"
                ></p>
<p>发现有好多接口 &#x2F;login &#x2F;register &#x2F;updateinfo &#x2F;eval</p>
<p>这里可以简单推算出是需要结合nodejs原型链污染和命令注入来做的</p>
<p>源码中提示到了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015172242581.png"
                      alt="image-20231015172242581"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015172300605.png"
                      alt="image-20231015172300605"
                ></p>
<p>merge只在&#x2F;updateinfo里面使用到了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015172359456.png"
                      alt="image-20231015172359456"
                ></p>
<p>&#x2F;eval中创建了一个新对象test，目前看来我们就是需要污染这个对象。那我们首先需要创建一个用户，再登陆用户，在该用户进行信息修改的时候，抓包修改post参数，把__proto__参数发送到后台进行污染，再访问&#x2F;eval页面。</p>
<p>先到达updateinfo页面修改信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015172544265.png"
                      alt="image-20231015172544265"
                ></p>
<p>提交表单发现无论如何修改不成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015172702108.png"
                      alt="image-20231015172702108"
                ></p>
<p>重新看一下源码，发现这里会先拿传过来的username和数据库中的username比较，存在才会进行后续操作，否则全部过滤。但是这个表单只传了name值根本就没有username，当然过不去。</p>
<p>重新修改post参数，把proto也加上。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015173026685.png"
                      alt="image-20231015173026685"
                ></p>
<p>然后再访问&#x2F;eval 就成功了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015173013148.png"
                      alt="image-20231015173013148"
                ></p>
<h2 id="简单-why-not-play-a-game"><a href="#简单-why-not-play-a-game" class="headerlink" title="[简单] why not play a game"></a>[简单] why not play a game</h2><p>点进来是这个</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015173121055.png"
                      alt="image-20231015173121055"
                ></p>
<p>发现源码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015173430952.png"
                      alt="image-20231015173430952"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015173502106.png"
                      alt="image-20231015173502106"
                ></p>
<h2 id="简单-算数！"><a href="#简单-算数！" class="headerlink" title="[简单] 算数！"></a>[简单] 算数！</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/SUSCTF2023Writeup/image-20231015173554893.png"
                      alt="image-20231015173554893"
                ></p>
<p>一个算术编码的题，纯手算的，很快 <strong>0.438875求5位字符</strong></p>
<table>
<thead>
<tr>
<th>区间</th>
<th>占比</th>
<th>字符</th>
<th>轮次</th>
</tr>
</thead>
<tbody><tr>
<td>0-1</td>
<td>0.5</td>
<td>a</td>
<td>1</td>
</tr>
<tr>
<td>0-0.5</td>
<td>0.1</td>
<td>l</td>
<td>2</td>
</tr>
<tr>
<td>0.4-0.45</td>
<td>0.3</td>
<td>o</td>
<td>3</td>
</tr>
<tr>
<td>0.425-0.44</td>
<td>0.1</td>
<td>h</td>
<td>4</td>
</tr>
<tr>
<td>0.4385-0.44</td>
<td>0.5</td>
<td>a</td>
<td>5</td>
</tr>
</tbody></table>
<p>最后得到susctf{aloha}</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet-2(ServletContext)</title>
    <url>/2023/10/31/Servlet-2/</url>
    <content><![CDATA[<h2 id="1、ServletContext对象详解"><a href="#1、ServletContext对象详解" class="headerlink" title="1、ServletContext对象详解"></a>1、ServletContext对象详解</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的 web应用；</p>
<p>一个web容器对应一个ServletContext对象，一个web容器中可以创建多个Servlet，因此多个Servlet共享这一个ServletContext对象。这个对象所储存的数据都被多个Servlet所共享。由此可以实现Servlet对象间的数据共享。</p>
<h2 id="2、两Servlet共享数据demo示例"><a href="#2、两Servlet共享数据demo示例" class="headerlink" title="2、两Servlet共享数据demo示例"></a>2、两Servlet共享数据demo示例</h2><p>新建一个Module+两个Servlet（HelloServlet和GetServlet）</p>
<p>注意：记得要重新设置一个tomcat，因为一个Module对应一个target包，仍然使用之前的tomcat无法访问到相应的文件。</p>
<p>目录结构如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231031195840562.png"
                      alt="image-20231031195840562"
                ></p>
<p>GetServlet.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classOver.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tky</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) <span class="built_in">this</span>.getServletContext().getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>HelloServlet.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classOver.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tky</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        context.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tky&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>web.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.classOver.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.classOver.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/get<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>直接访问&#x2F;get，这个时候ServletContext中还没有设置参数。读取到null。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231031195710811.png"
                      alt="image-20231031195710811"
                ></p>
<p>先访问&#x2F;hello，再访问&#x2F;get才能读到相应的内容。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231031195751542.png"
                      alt="image-20231031195751542"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231031195808103.png"
                      alt="image-20231031195808103"
                ></p>
<h2 id="3、读取web初始化参数"><a href="#3、读取web初始化参数" class="headerlink" title="3、读取web初始化参数"></a>3、读取web初始化参数</h2><p>web.xml中有一个标签是context-param，用于设置ServletContext对象的初始参数。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231101140614004.png"
                      alt="image-20231101140614004"
                ></p>
<p>由此可以使用servlet对象对它进行读取</p>
<p>我们在GetServlet中尝试一下。</p>
<p>doGet()如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) <span class="built_in">this</span>.getServletContext().getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">&quot;url:&quot;</span>+url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231101141042581.png"
                      alt="image-20231101141042581"
                ></p>
<h2 id="4、使用context对象实现请求转发"><a href="#4、使用context对象实现请求转发" class="headerlink" title="4、使用context对象实现请求转发"></a>4、使用context对象实现请求转发</h2><p>ServletContext对象可以实现接口间的请求转发，我们尝试访问&#x2F;hello接口然后转发到&#x2F;get接口中</p>
<p>HelloServlet的doGet方法如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        context.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tky&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;this is /hello!&quot;</span>);</span><br><span class="line">        context.getRequestDispatcher(<span class="string">&quot;/get&quot;</span>).forward(req,resp); <span class="comment">// 获得dispatcher后还需要进行forward行动</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果如下，可以看到，url处是&#x2F;hello接口，但是实际展示的页面是&#x2F;get的界面，且在&#x2F;hello中初始化的参数name也可以成功获得值。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231101141705345.png"
                      alt="image-20231101141705345"
                ></p>
<p>注意请求转发和重定向是不一样的，这里另外写了一篇进行区别。</p>
<h2 id="5、使用ServletContext读取配置文件"><a href="#5、使用ServletContext读取配置文件" class="headerlink" title="5、使用ServletContext读取配置文件"></a>5、使用ServletContext读取配置文件</h2><p>ServletContext对象还可以创建文件流对象，由此进行对配置文件的读取。</p>
<p>先写一个properties</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231101144440758.png"
                      alt="image-20231101144440758"
                ></p>
<p>这里有一个问题，就是，当我们获取文件流的时候需要设置一个路径，这个路径应该写哪里呢。结合视频可以发现是从生成的target里面去找，应该写&#x2F;WEB-INF&#x2F;classes&#x2F;aa.properties。</p>
<p><strong>但是为什么应该写这个呢？</strong></p>
<p>ServletContext. getResourceAsStream(String path)：默认从&#x3D;&#x3D;<strong>WebAPP</strong>&#x3D;&#x3D;根目录下取资源，Tomcat下path是否以’&#x2F;‘开头无所谓，  当然这和具体的容器实现有关。</p>
<p>resources中的配置文件在编译后都会输出在classpath目录下，而classpath目录（又称为类路径），就是&#x2F;WEB-INF&#x2F;classes目录。</p>
<p><strong>这个路径看起来和我们的Java代码不是相对路径的关系啊，为什么写这个？</strong></p>
<p><code>/WEB-INF/classes</code> 是一个相对路径，相对于你的 Web 应用程序的根目录。在 Web 应用程序中，根目录通常是指 WAR 文件或部署到 Servlet 容器的根目录。这个路径是相对于根目录的，以便容器可以轻松地查找和加载类文件。</p>
<p>例如，假设你的 Web 应用程序被部署到 Servlet 容器中，它的根目录是 <code>/mywebapp</code>，那么 <code>/WEB-INF/classes</code> 将被解释为 <code>/mywebapp/WEB-INF/classes</code>，这是相对于根目录的路径。这种相对路径的使用使得你的应用程序可以更容易地在不同环境中进行部署，而无需考虑具体的文件系统路径。</p>
<p><strong>什么是Web应用程序的根目录？</strong></p>
<p>Web 应用程序的根目录通常是指 Web 应用程序在 Servlet 容器（如Tomcat、Jetty等）中的部署根目录或 WAR 文件的根目录。这个根目录是 Web 应用程序的起始点，通常包含 WEB-INF 目录和静态资源（如HTML、CSS、JavaScript文件）。</p>
<p>具体来说，Web 应用程序的根目录通常是以下两种情况之一：</p>
<ol>
<li>在Servlet容器中的部署目录：当你将Web应用程序部署到Servlet容器时，容器会在其工作目录中创建一个与你的应用程序同名的目录，这个目录就是你的应用程序的根目录。例如，如果你的Web应用程序叫做”MyWebApp”，那么在Tomcat中，它的根目录可能是<code>$&#123;TOMCAT_HOME&#125;/webapps/MyWebApp</code>。</li>
<li>WAR文件的根目录：如果你将Web应用程序打包成WAR文件并部署，那么WAR文件本身就是你的Web应用程序的根目录。WAR文件通常包含了WEB-INF目录、META-INF目录和静态资源文件，如JSP、HTML、CSS等。</li>
</ol>
<p>在代码中，你可以使用相对路径来引用根目录下的资源。例如，如果你有一个名为<code>index.html</code>的HTML文件在根目录下，你可以使用<code>/index.html</code>来引用它。</p>
<p>总之，Web应用程序的根目录是你的应用程序在Servlet容器中的起始点，通常包含了WEB-INF目录和静态资源文件，用于访问和部署Web应用程序。</p>
<p>以这个module为例：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231101150211573.png"
                      alt="image-20231101150211573"
                ></p>
<p>GetServlet.java的doGet方法如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) context.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> context.getResourceAsStream(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    prop.load(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">&quot;url:&quot;</span>+url+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">&quot;password:&quot;</span>+password+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Servlet-2/image-20231101163631311.png"
                      alt="image-20231101163631311"
                ></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-01-概述</title>
    <url>/2024/02/27/Spring-01/</url>
    <content><![CDATA[<h1 id="一、Spring概述"><a href="#一、Spring概述" class="headerlink" title="一、Spring概述"></a>一、Spring概述</h1><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><ul>
<li>Spring是一个开源免费的框架 , 容器 </li>
<li>Spring是一个轻量级的框架 , 非侵入式的 </li>
<li>控制反转 IoC </li>
<li>面向切面 Aop 对事物的支持对框架的支持</li>
<li>一句话概括：<strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></li>
</ul>
<h2 id="2-组成"><a href="#2-组成" class="headerlink" title="2. 组成"></a>2. 组成</h2><p>spring4.x：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-01/image-20240227171805228.png"
                      alt="image-20240227171805228"
                ></p>
<p>spring5.x：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-01/image-20240227171827050.png"
                      alt="image-20240227171827050"
                ></p>
<p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。</p>
<p>每个模块的功能如下： </p>
<ul>
<li><strong>核心容器</strong>：核心容器提供Spring框架的基本功能。核心容器的主要组件是BeanFactory ，它是工厂模式的实现。BeanFactory 使用控制反转（IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。 </li>
<li><strong>Spring 上下文</strong>：Spring上下文是一个配置文件，向 Spring框架提供上下文信息。Spring上下文包括企业服务，例如JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了Spring框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。 </li>
<li><strong>Spring DAO</strong>：JDBC DAO抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不 同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的DAO异常层次结构。 </li>
<li><strong>Spring ORM</strong>：Spring框架插入了若干个ORM框架，从而提供了ORM的对象关系工具，其中包括JDO、Hibernate和iBatis SQL Map。所有这些都遵从Spring的通用事务和 DAO 异常层次结构。 </li>
<li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与Jakarta Struts的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。 </li>
<li><strong>Spring MVC框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口， MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-02-IoC和DI</title>
    <url>/2024/02/27/Spring-02-IOC/</url>
    <content><![CDATA[<p>IoC：控制反转，DI：依赖注入。这两个是Spring实现的重要功能。</p>
<p>控制反转指的就是：原本交给代码&#x2F;程序员来实现的功能，主动权交到了用户的手上，让用户仅需要修改配置文件的相关配置就可以实现对功能的控制。</p>
<p>IoC也被称为依赖注入（DI）。它是一个过程，对象仅通过构造参数、工厂方法的参数或在对象实例被构造或从工厂方法返回后在其上设置的属性来定义其依赖关系（即它们与之合作的其他对象）。然后容器在创建 bean 时注入这些依赖关系。这个过程从根本上说是Bean本身通过使用<strong>直接构建类</strong>或诸如<strong>服务定位模式的机制</strong>来控制其依赖关系的实例化或位置的逆过程（因此被称为控制反转）。【这是从官网copy的，但我看不懂呢。】</p>
<p>IoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解， 新版本的Spring也可以零配置实现IoC。 Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p>
<p>在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 <strong>Map（key，value）</strong>，Map 中存放的是各种对象。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240227171420513.png"
                      alt="image-20240227171420513"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240227200126222.png"
                      alt="image-20240227200126222"
                ></p>
<h2 id="1-首先举一个小例子"><a href="#1-首先举一个小例子" class="headerlink" title="1. 首先举一个小例子"></a>1. 首先举一个小例子</h2><p>一般来说，在service中调用dao的接口，通常会这样使用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(); <span class="comment">//注意这一行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然而，当user的类型变得越来越多，我们写了大量的实现类对UserDao进行实现的时候，调用相关接口的时候，难道要每次都去修改这一行代码吗？</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240227154504379.png"
                      alt="image-20240227154504379"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoMysqlImpl</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoOracleImpl</span>();</span><br></pre></td></tr></table></figure></div>

<p>这显然是不可能的，对于一个好的程序来说，一旦成型交给用户使用，就应该尽可能地不修改代码就能满足用户灵活的要求。</p>
<p>实际上我们应该这样，在Service层增加一个setUserDao的方法，由此，用户可以根据需求传入想要的user类型，从而得到相应的结果。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240227154935850.png"
                      alt="image-20240227154935850"
                ></p>
<p>这就是控制反转的思想，原本需要程序员修改代码实现的功能，通过接口的设置，把选择权放在了用户的手上，根据用户的选择来实现相应的功能。</p>
<h2 id="2-HelloSpring"><a href="#2-HelloSpring" class="headerlink" title="2. HelloSpring"></a>2. HelloSpring</h2><p>这里开始搭建一个基础的spring程序，我们跟着文档来走吧。</p>
<p>Spring中文文档：<a class="link"   href="https://springdoc.cn/spring/core.html#spring-core" >https://springdoc.cn/spring/core.html#spring-core <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>先创建一个实体类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;my name is &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后配置spring配置文件，框架是在spring官方文档中拿的</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试一下。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mytest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>); <span class="comment">//实例化IoC容器</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        hello.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-思考一下"><a href="#3-思考一下" class="headerlink" title="3. 思考一下"></a>3. 思考一下</h2><ul>
<li>Hello对象是谁创建的？<ul>
<li>由Spring框架在beans容器中创建的，用户可以在xml中进行设置。</li>
</ul>
</li>
<li>Hello对象的属性怎么设置的？<ul>
<li>Spring容器设置的</li>
</ul>
</li>
<li>控制：传统应用程序是由程序本身控制的，是代码控制的；但是在Spring中由Spring来控制</li>
<li>反转：程序不创建对象【没有new这种字眼的代码了】，对象由Spring接手来创建，创建在容器中，程序在哪里需要就直接getBean获取。</li>
<li>依赖注入：利用set方法来进行注入</li>
</ul>
<h2 id="4-使用Spring修改一下第一个小例子"><a href="#4-使用Spring修改一下第一个小例子" class="headerlink" title="4. 使用Spring修改一下第一个小例子"></a>4. 使用Spring修改一下第一个小例子</h2><p>我们的难点主要是要把user、mysql、oracle的选择权交到用户手上而不是每次由程序员改代码实现，配置文件是用户可以操作的，因此我们就是要把对这些的选择写在xml文件中。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;normal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.UserDaoMysqlImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;oracle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.dao.UserDaoOracleImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;oracle&quot;</span>/&gt;</span> <span class="comment">&lt;!--这里更改ref的内容就可以给userDao赋不同的值，从而选择不同的userDaoImpl--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myTest2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.getUserInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240227203315099.png"
                      alt="image-20240227203315099"
                ></p>
<p> <strong>对象由Spring来创建，管理，装配。</strong></p>
<h2 id="5-Spring做了哪些事"><a href="#5-Spring做了哪些事" class="headerlink" title="5. Spring做了哪些事"></a>5. Spring做了哪些事</h2><p>Spring技术对IoC思想进行了实现</p>
<ul>
<li>提供了一个容器，称为IoC容器，用来充当IoC思想的外部。将对象放在IoC容器中，在代码需要对象的时候，IoC容器提供。</li>
<li>IoC容器负责兑现大哥创建、初始化等一系列工作，被创建或者被管理的对象在容器中称为Bean。</li>
<li>DI：依赖注入。如果容器中的对象之间存在依赖关系，则容器会给他们进行关系绑定，这就叫做依赖注入。</li>
</ul>
<p><strong>充分解耦+正常运行</strong></p>
<h2 id="6-IOC创建对象方式"><a href="#6-IOC创建对象方式" class="headerlink" title="6. IOC创建对象方式"></a>6. IOC创建对象方式</h2><h3 id="6-1-通过无参构造创建"><a href="#6-1-通过无参构造创建" class="headerlink" title="6.1 通过无参构造创建"></a>6.1 通过无参构造创建</h3><p>默认就是使用无参构造进行单例对象的创建。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240402195837257.png"
                      alt="image-20240402195837257"
                ></p>
<h3 id="6-2-通过有参构造创建"><a href="#6-2-通过有参构造创建" class="headerlink" title="6.2 通过有参构造创建"></a>6.2 通过有参构造创建</h3><p>修改标签，使用<constructor-arg></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240402200208661.png"
                      alt="image-20240402200208661"
                ></p>
<p>还发现了一个有趣的现象，是之前没有注意到的。那就是当我保留使用无参构造进行对象创建的people-bean，即使我并不在测试代码中get，也会走无参构造来创建这个对象，说明，<strong>在beans.xml装载的过程中，单例模式的对象就已经被容器创建好了</strong>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240402200442783.png"
                      alt="image-20240402200442783"
                ></p>
<p>使用有参构造的时候，除了使用name，还可以使用：</p>
<ul>
<li>type：java.lang.String [java数据类型]</li>
<li>index：0 [属性在类中定义的位置索引]</li>
</ul>
<h2 id="7-Spring配置"><a href="#7-Spring配置" class="headerlink" title="7. Spring配置"></a>7. Spring配置</h2><h3 id="7-1-别名"><a href="#7-1-别名" class="headerlink" title="7.1 别名"></a>7.1 别名</h3><p>在bean标签中设置别名：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address2 address3; address4, address5&quot;</span>&gt;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<p>使用alias标签设置：其中name为bean的已有名字，alias为别名设置。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;address5&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="7-2-Bean设置"><a href="#7-2-Bean设置" class="headerlink" title="7.2 Bean设置"></a>7.2 Bean设置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span></span><br><span class="line"><span class="comment">    如果配置id,又配置了name,那么name是别名</span></span><br><span class="line"><span class="comment">    name可以设置多个别名,可以用逗号,分号,空格隔开</span></span><br><span class="line"><span class="comment">    如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span></span><br><span class="line"><span class="comment">    class是bean的全限定名=包名+类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello2 h2,h3;h4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="7-3-import"><a href="#7-3-import" class="headerlink" title="7.3 import"></a>7.3 import</h3><p>可以用import引入其他的Spring容器配置文件，常用于团队协作</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;&#123;path&#125;/beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="8-DI依赖注入"><a href="#8-DI依赖注入" class="headerlink" title="8. DI依赖注入"></a>8. DI依赖注入</h2><p>依赖注入的意思就是说Spring容器不仅能够创建程序所需要的对象，还可以在这些对象之间存在依赖的情况下，给他们进行关系绑定。</p>
<h3 id="8-1-构造器注入"><a href="#8-1-构造器注入" class="headerlink" title="8.1 构造器注入"></a>8.1 构造器注入</h3><p>上面提到的关于IoC的例子全都是构造器注入。</p>
<h3 id="8-2-setter注入"><a href="#8-2-setter注入" class="headerlink" title="8.2 setter注入"></a>8.2 setter注入</h3><p>Spring还可以使用Setter进行依赖注入，要求必须有set方法 , set方法的方法名由set + 属性首字母大写</p>
<p>如果是boolean类型，没有setter方法，使用is[?]</p>
<p>编写一个people.class</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbys=&quot;</span> + hobbys +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name, Address address, String[] books, List&lt;String&gt; hobbys, Map&lt;String, String&gt; card, Set&lt;String&gt; games, Properties info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">        <span class="built_in">this</span>.hobbys = hobbys;</span><br><span class="line">        <span class="built_in">this</span>.card = card;</span><br><span class="line">        <span class="built_in">this</span>.games = games;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>故意设置了很多属性，便于后面在xml中测试依赖注入，各类配置格式如下</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--String类型注入null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--bean类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--String[]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>book1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>book2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Map&lt;String, Stiring&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;card1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;card2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22222&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;card3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;33333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Set&lt;String&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--List&lt;String&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>music<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>TV<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>singing<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span>&gt;</span>hihihi<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>female<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="8-3-拓展方式注入"><a href="#8-3-拓展方式注入" class="headerlink" title="8.3 拓展方式注入"></a>8.3 拓展方式注入</h3><p>使用p标签和c标签，其实就是在两个空间分别使用属性注入和构造器注入。</p>
<h4 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h4><p>首先需要在beans.xml头部导入xml配置依赖的命名空间</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure></div>

<p>p表示properties，使用set注入，因此没有构造器也并不影响。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.classover.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;tky&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="c标签"><a href="#c标签" class="headerlink" title="c标签"></a>c标签</h4><p>跟p很相似，区别在于p使用set进行注入，c使用有参构造进行注入</p>
<p>导入命名空间后使用</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.classover.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;tky&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="8-4-Bean作用域"><a href="#8-4-Bean作用域" class="headerlink" title="8.4 Bean作用域"></a>8.4 Bean作用域</h3><p>官方文档中可以看到各种作用域的介绍，其实很简单。</p>
<ul>
<li>singleton就是从始至终对于指定的类，如果配置文件中只写了一个bean，那么无论程序从容器中取多少次，容器中都只存在这一个对象。</li>
<li>prototype就是说，每一次从容器中取对象，容器都会新建一个bean（对象）供程序使用。</li>
<li>request、session、application、websocket是web领域的内容，在springmvc中详细学习。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-02-IOC/image-20240402210959550.png"
                      alt="image-20240402210959550"
                ></p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-10-缓存</title>
    <url>/2023/12/17/Mybatis-10-%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>1</p>
<h2 id="1、Mybatis缓存"><a href="#1、Mybatis缓存" class="headerlink" title="1、Mybatis缓存"></a>1、Mybatis缓存</h2><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。 </p>
<p>MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存 </p>
<ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存） </li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。 </li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存。</li>
</ul>
<h2 id="2、一级缓存"><a href="#2、一级缓存" class="headerlink" title="2、一级缓存"></a>2、一级缓存</h2><p>一级缓存就是一个<strong>map</strong>，是一直开启的，我们关闭不了它。</p>
<p>一级缓存也叫本地缓存：</p>
<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
<p>一级缓存是基于SqlSession的，也就是说，在一个SqlSession的生命周期中，这个缓存时默认开启的。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryUserById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-10-%E7%BC%93%E5%AD%98/image-20231217161132783.png"
                      alt="image-20231217161132783"
                ></p>
<p>当然，这个缓存也不可能永远存在，他也有失效的情况：</p>
<ol>
<li>sqlSession不同。每个sqlSession中的缓存相互独立。</li>
<li>sqlSession相同，查询条件不同。当前缓存中，不存在这个数据。</li>
<li>sqlSession相同，查询条件相同，但两次查询之间执行了增删改操作！因为增删改操作可能会对当前数据产生影响。</li>
<li>sqlSession相同，手动清除一级缓存。</li>
</ol>
<h2 id="3、二级缓存"><a href="#3、二级缓存" class="headerlink" title="3、二级缓存"></a>3、二级缓存</h2><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存 </li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存； 【也就是一个mapper.xml对应一个二级缓存】</li>
<li><strong>工作机制</strong> <ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中； </li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中； </li>
<li>新的会话查询信息，就可以从二级缓存中获取内容； </li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<ol>
<li><p>开启全局缓存【mybatis-config.xml】</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>去每个mapper.xml中配置使用二级缓存，配置很简单【xxxMapper.xml】</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">官方示例=====&gt;查看官方文档</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">    <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据 </p>
<p>查出的数据都会被默认先放在一级缓存中 </p>
<p>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</p>
<h2 id="4、缓存原理"><a href="#4、缓存原理" class="headerlink" title="4、缓存原理"></a>4、缓存原理</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Mybatis-10-%E7%BC%93%E5%AD%98/image-20231217161640987.png"
                      alt="image-20231217161640987"
                ></p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-03-自动装配与注解</title>
    <url>/2024/04/08/Spring-03-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-Bean的自动装配"><a href="#1-Bean的自动装配" class="headerlink" title="1. Bean的自动装配"></a>1. Bean的自动装配</h1><p>自动装配是指：Spring会再应用上下文中为某个bean寻找其依赖的bean。</p>
<p>Spring中有三种装配机制：</p>
<ol>
<li>在xml中显式配置</li>
<li>在java中显式配置</li>
<li>触发自动装配</li>
</ol>
<p>两个操作实现自动装配：</p>
<ul>
<li>组件扫描：spring会自动发现应用上下文中所创建的bean</li>
<li>自动装配spring自动满足bean之间的依赖，也就是IoC和DI</li>
</ul>
<p>组件扫描和自动装配组合发挥巨大威力，使的显示的配置降低到最少。 推荐不使用自动装配xml配置 , 而使用注解。</p>
<h2 id="1-1-基本代码"><a href="#1-1-基本代码" class="headerlink" title="1.1 基本代码"></a>1.1 基本代码</h2><p>People.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    @Qualifier(value = &quot;add&quot;)</span></span><br><span class="line"><span class="comment">//    private Address address;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;address111&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Address.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(<span class="type">int</span> id, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>beans.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tky&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SEU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;people&quot;</span>, People.class);</span><br><span class="line">    System.out.println(people.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-2-byName自动装配"><a href="#1-2-byName自动装配" class="headerlink" title="1.2 byName自动装配"></a>1.2 byName自动装配</h2><p><strong>autowire byName (按名称自动装配)</strong></p>
<p>在xml的bean标签内增加一个属性autowire &#x3D; “byName”即可实现自动装配，再删掉针对address的property配置，仍然可以正常运行。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tky&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SEU&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>但是！</strong>如果iu该addrss的bean id为add，就会报空指针错误java.lang.NullPointerException，因为byName是按照属性名称进行查找的，默认使用setter进行装配，因此需要与set后面的属性名一致才能对应装配成功。</p>
<h2 id="1-3-byType自动装配"><a href="#1-3-byType自动装配" class="headerlink" title="1.3 byType自动装配"></a>1.3 byType自动装配</h2><p><strong>autowire byType (按类型自动装配)</strong></p>
<p>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-03-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E4%B8%8E%E6%B3%A8%E8%A7%A3/image-20240409191625493.png"
                      alt="image-20240409191625493"
                ></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yesyes&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tky&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-4-使用注解"><a href="#1-4-使用注解" class="headerlink" title="1.4 使用注解"></a>1.4 使用注解</h2><p>首先，再spring配置文件中引入context文件头，下面第3、6、7行都是新增的context文件头。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>然后，在spring配置文件中开启属性注解支持</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-1-Autowired"><a href="#1-4-1-Autowired" class="headerlink" title="1.4.1 @Autowired"></a>1.4.1 @Autowired</h3><ul>
<li>@Autowired是按类型自动转配的，不支持id匹配。</li>
<li>需要导入 spring-aop的包！</li>
</ul>
<ol>
<li>将实体类中的set方法去掉，使用注解。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>配置文件</li>
</ol>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yesyes&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tky&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>测试成功</li>
</ol>
<p>@Autowired(required&#x3D;false) 说明： false，对象可以为null；true，对象必须存对象，不能为null。</p>
<p>这样配置后，即使在beans.xml中不配置Address bean，程序也能正常运行，否则无法编译通过。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Address address;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-2-Qualifier"><a href="#1-4-2-Qualifier" class="headerlink" title="1.4.2 @Qualifier"></a>1.4.2 @Qualifier</h3><ul>
<li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配 </li>
<li>@Qualifier不能单独使用</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;address111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hihihi&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yesyes&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tky&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>如上述代码所示，当autowired既无法通过address属性名字定位到bean，也无法通过org.example.pojo.Address定位到唯一的bean的时候，可以使用@Qualifier通过限定bean id来确定bean。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;add&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Address address;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-3-Resource"><a href="#1-4-3-Resource" class="headerlink" title="1.4.3 @Resource"></a>1.4.3 @Resource</h3><ul>
<li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配；</li>
<li>其次再进行默认的byName方式进行装配；</li>
<li>如果以上都不成功，则按byType的方式自动装配。</li>
<li>都不成功，则报异常。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;address111&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Address address;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;address111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hihihi&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yesyes&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tky&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-5-小结"><a href="#1-5-小结" class="headerlink" title="1.5 小结"></a>1.5 小结</h2><p>@Autowired与@Resource相同点：</p>
<ul>
<li>都可以用来装配bean，既可以写在字段上，也可以写在setter方法上。</li>
</ul>
<p>@Autowired与@Resource不同点：</p>
<ul>
<li>@Autowired<strong>默认使用类型</strong>进行装配（Spring规范），默认情况下要求依赖对象必须存在，如果要允许null值，设置required属性为false。当存在多个相同类型bean的时候，<strong>就会按照名称</strong>查找与属性名对应的bean，如果还找不到，则会报错。这种情况下，可以配合@Qualifier指定bean id来查找具体的bean。</li>
<li>@Resource（属于J2EE复返），默认使用名称进行装配，可以使用value&#x3D;“xxx”指定名称。如果没有指定，当注解卸载字段上，默认取字段名进行按照名称查找，如果注解写在 setter方法上默认取属性名进行装配。 当找不到与名称匹配的bean时才<strong>按照类型</strong>进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</li>
<li>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先 byName。</li>
</ul>
<h1 id="2-使用注解开发"><a href="#2-使用注解开发" class="headerlink" title="2. 使用注解开发"></a>2. 使用注解开发</h1><h2 id="2-1-注意"><a href="#2-1-注意" class="headerlink" title="2.1 注意"></a>2.1 注意</h2><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-03-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E4%B8%8E%E6%B3%A8%E8%A7%A3/image-20240409194835553.png"
                      alt="image-20240409194835553"
                ></p>
<p>在配置文件当中，还得要引入一个context约束</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-2-Bean的实现"><a href="#2-2-Bean的实现" class="headerlink" title="2.2 Bean的实现"></a>2.2 Bean的实现</h2><p>我们之前都是使用 bean 的标签进行bean注入，但是实际开发中，我们一般都会使用注解！</p>
<ol>
<li><p>配置扫描哪些包下的注解</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在指定包下编写类，增加注解</p>
<p>相当于配置文件中 <bean id = "people" class="当前注解的类"/></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>beans.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.pojo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;address111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hihihi&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.pojo.Address&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yesyes&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean name=&quot;people&quot; class=&quot;org.example.pojo.People&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;name&quot; value=&quot;tky&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>即使不在xml中配置people bean，也可以正常运行，因为注解就是替代了xml配置进行bean的装配。</p>
<h2 id="2-3-属性注入"><a href="#2-3-属性注入" class="headerlink" title="2.3 属性注入"></a>2.3 属性注入</h2><p>可以不用提供set方法，直接在直接名上添加@value(“值”)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;classoverrrrrr&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></div>

<p>如果提供了set方法，在set方法上添加@value(“值”);</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;classoverrrrrr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-4-衍生注解"><a href="#2-4-衍生注解" class="headerlink" title="2.4 衍生注解"></a>2.4 衍生注解</h2><p>我们这些注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！</p>
<p> <strong>@Component三个衍生注解</strong> </p>
<p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。 </p>
<ul>
<li>@Controller：web层 </li>
<li>@Service：service层 </li>
<li>@Repository：dao层</li>
</ul>
<p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p>
<h2 id="2-5-自动装配注解"><a href="#2-5-自动装配注解" class="headerlink" title="2.5 自动装配注解"></a>2.5 自动装配注解</h2><p>在Bean的自动装配已经讲过了，可以回顾！</p>
<h2 id="2-6-作用域"><a href="#2-6-作用域" class="headerlink" title="2.6 作用域"></a>2.6 作用域</h2><p>@scope </p>
<ul>
<li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。 </li>
<li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@value(&quot;classover&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-7-小结"><a href="#2-7-小结" class="headerlink" title="2.7 小结"></a>2.7 小结</h2><p>xml和注解都是Spring中的一种工具，目的都是实现IoC，把bean注入到容器中。</p>
<p>推荐：<strong>xml和注解整合开发</strong></p>
<ul>
<li>xml管理Bean </li>
<li>注解完成属性注入 </li>
<li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>作用： </p>
<ul>
<li>进行注解驱动注册，从而使注解生效 </li>
<li>用于激活那些已经在spring容器里注册过的bean上面的注解，也就是显示的向Spring注册 </li>
<li>如果不扫描包，就需要手动配置bean </li>
<li>如果不加注解驱动，则注入的值为null！</li>
</ul>
<h1 id="3-基于Java类进行配置"><a href="#3-基于Java类进行配置" class="headerlink" title="3. 基于Java类进行配置"></a>3. 基于Java类进行配置</h1><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p>
<p>也就是说不使用xml配置文件，仅需要使用Java类即可完成Spring的配置。</p>
<p>MyConfig.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.example.pojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>User.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;tky&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>没有配置文件，就不能使用ClassPathXmlApplicationContext进行注册了，只能使用AnnotationConfigApplicationContext。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>导入其他配置</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(MyConfig2.class)</span> </span><br></pre></td></tr></table></figure></div>

<p>关于这种Java类的配置方式，我们在之后的SpringBoot 和 SpringCloud中还会大量看到，我们需要知道 这些注解的作用即可！</p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-04-AOP</title>
    <url>/2024/04/09/Spring-04-AOP/</url>
    <content><![CDATA[<h1 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1. 代理模式"></a>1. 代理模式</h1><p>代理模式分为静态代理和动态代理两类，在学习AOP之前，需要一定的代理知识。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-04-AOP/image-20240409202520606.png"
                      alt="image-20240409202520606"
                ></p>
<h2 id="1-1-静态代理"><a href="#1-1-静态代理" class="headerlink" title="1.1 静态代理"></a>1.1 静态代理</h2><p><strong>静态代理角色分析</strong> </p>
<ul>
<li>抽象角色：一般使用接口或者抽象类来实现 </li>
<li>真实角色：被代理的角色 </li>
<li>代理角色：代理真实角色；代理真实角色后，一般会做一些附属的操作。</li>
<li>客户：使用代理角色来进行一些操作。</li>
</ul>
<p><strong>抽象角色</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>真实角色</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>代理角色</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        hetong();</span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hetong</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>客户</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//房东要出租</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中介帮房东出租，代理角色一般会有一些附属操作，这样代理才有意义</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不用面对房东，直接找中介租房即可。</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情</p>
<h2 id="1-2-静态代理的特点"><a href="#1-2-静态代理的特点" class="headerlink" title="1.2 静态代理的特点"></a>1.2 静态代理的特点</h2><p>优点：</p>
<ul>
<li>可以使得我们的真实角色更加纯粹，不再去关注一些公共的事情。</li>
<li>公共的业务由代理来完成，实现了业务的分工。</li>
<li>公共业务发生扩展时变得更加集中和方便。</li>
</ul>
<p>缺点：</p>
<ul>
<li>类多了 , 多了代理类 , 工作量变大了。开发效率降低。</li>
</ul>
<p>我们想要静态代理的好处，又不想要静态代理的缺点，所以，就有了动态代理。</p>
<h2 id="1-3-静态代理与AOP"><a href="#1-3-静态代理与AOP" class="headerlink" title="1.3 静态代理与AOP"></a>1.3 静态代理与AOP</h2><p><strong>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-04-AOP/image-20240409202927737.png"
                      alt="image-20240409202927737"
                ></p>
<h2 id="1-4-动态代理"><a href="#1-4-动态代理" class="headerlink" title="1.4 动态代理"></a>1.4 动态代理</h2><ul>
<li>动态代理的角色和静态代理的一样</li>
<li>动态代理的代理类是动态生成的，静态代理的代理类是我们提前写好的</li>
<li>动态代理分为两类：一类是基于接口动态代理，一类是基于类的动态代理<ul>
<li>基于接口的动态代理——DK动态代理 </li>
<li>基于类的动态代理——cglib </li>
<li>现在用的比较多的是 javasist 来生成动态代理百度一下javasist</li>
<li>我们这里使用JDK的原生代码来实现，其余的道理都是一样的！</li>
</ul>
</li>
</ul>
<p><strong>动态代理的好处</strong></p>
<ul>
<li>静态代理有的它都有，静态代理没有的，它也有！ </li>
<li>可以使得我们的真实角色更加纯粹，不再去关注一些公共的事情</li>
<li>公共的业务由代理来完成，实现了业务的分工</li>
<li>公共业务发生扩展时变得更加集中和方便</li>
<li>一个动态代理 , 一般代理某一类业务</li>
<li>一个动态代理可以代理多个类，代理的是接口</li>
</ul>
<p>首先需要介绍两个类：</p>
<ul>
<li><p>InvocationHandler：调用处理程序，是由代理实例的调用处理程序实现的接口。每个代理实力都有一个相关联的调用处理程序。</p>
<ul>
<li><pre><code class="java">Object invoke(Object proxy, 方法 method, Object[] args)
//参数
//proxy - 调用该方法的代理实例
//method -所述方法对应于调用代理实例上的接口方法的实例。 方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。
//args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。 原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolea
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- Proxy：代理，提供了创建动态代理类和实例的静态方法，他也是有这些方法所创建的所有动态代理类的超类。</span><br><span class="line"></span><br><span class="line">  - 有一个非常重要的方法![image-20240414194306576](../images/Spring-04-AOP/image-20240414194306576.png)</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    //生成代理类</span><br><span class="line">    public Object getProxy()&#123;</span><br><span class="line">    	return Proxy.newProxyInstance(this.getClass().getClassLoader(), rent.getClass().getInterfaces(), this);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="demo01代码实现"><a href="#demo01代码实现" class="headerlink" title="demo01代码实现"></a>demo01代码实现</h3><p>Rent.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Host.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ProxyInvocationHandler.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(Rent rent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建代理实例，参数：代理类、代理类需要实现的接口列表、调度方法调用的调用处理函数</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), rent.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(rent, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Client.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo03;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//房东要出租</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用真实角色动态生成代理类</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        pih.setRent(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理类,代理的是真实角色所对应的接口规范</span></span><br><span class="line">        <span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent) pih.getProxy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不用面对房东，直接找中介租房即可。</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！</strong></p>
<h3 id="UserService动态代理代码实现"><a href="#UserService动态代理代码实现" class="headerlink" title="UserService动态代理代码实现"></a>UserService动态代理代码实现</h3><p>我们也可以编写一个通用的动态代理实现的类！所有的代理对象设置为Object即可</p>
<p>UserService.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>UserServiceImpl.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add one&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete one&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update one&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query one&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ProxyInvocationHandler.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.proxy.demo03.Rent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建代理实例，参数：代理类、代理类需要实现的接口列表、调度方法调用的调用处理函数</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;invoke &quot;</span> +msg+ <span class="string">&quot; method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Client.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//接口规范对应的真实角色</span></span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理处理类,传入要被代理的类，生成想要的代理类</span></span><br><span class="line">        <span class="comment">// 【这个代理类应该满足的是接口的规范,所以代理类应该是UserService类型的而不是UserServiceImpl】</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        pih.setTarget(userService);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) pih.getProxy();</span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="2-AOP"><a href="#2-AOP" class="headerlink" title="2.  AOP"></a>2.  AOP</h1><h2 id="2-1-什么是AOP"><a href="#2-1-什么是AOP" class="headerlink" title="2.1 什么是AOP"></a>2.1 什么是AOP</h2><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-04-AOP/image-20240414194935779.png"
                      alt="image-20240414194935779"
                ></p>
<h2 id="2-2-AOP在Spring中的作用"><a href="#2-2-AOP在Spring中的作用" class="headerlink" title="2.2 AOP在Spring中的作用"></a>2.2 AOP在Spring中的作用</h2><p><strong>提供声明式事务；允许用户自定义切面</strong></p>
<ul>
<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要 关注的部分，就是横切关注点。如日志，安全，缓存，事务等等 ……</li>
<li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</li>
<li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li>
<li>目标（Target）：被通知对象。</li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li>
<li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li>
<li>连接点（JointPoint）：与切入点匹配的执行点。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-04-AOP/image-20240414195057559.png"
                      alt="image-20240414195057559"
                ></p>
<p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-04-AOP/image-20240414195113427.png"
                      alt="image-20240414195113427"
                ></p>
<p>即AOP在不改变原有代码的情况下 , 去增加新的功能。</p>
<h2 id="2-3-使用Spring实现AOP"><a href="#2-3-使用Spring实现AOP" class="headerlink" title="2.3 使用Spring实现AOP"></a>2.3 使用Spring实现AOP</h2><h3 id="导入AOP织入依赖"><a href="#导入AOP织入依赖" class="headerlink" title="导入AOP织入依赖"></a>导入AOP织入依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.21.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="方法一：Spring-API实现"><a href="#方法一：Spring-API实现" class="headerlink" title="方法一：Spring API实现"></a>方法一：Spring API实现</h3><p>UserService.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>UserServiceImpl.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;add one&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;delete one&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;update one&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;query one&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>AOP前置增强类 Log.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot; invokes &quot;</span> + method.getName() + <span class="string">&quot; method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>AOP后置增强类AfterLog.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName()</span><br><span class="line">                +<span class="string">&quot; invoke &quot;</span>+method.getName()+<span class="string">&quot; method with returning &quot;</span></span><br><span class="line">                + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Spring配置文件ApplicationContext.xml，注意导入aop约束。这里的配置主要就是在17-24行，19行注册一个切点，表明在我们运行UserServiceImpl下的所有方法的时候，都要打入一个这样的切点。21-22行针对切点插入增强方法。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 方式一：使用原生API接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="方法二：自定义类实现"><a href="#方法二：自定义类实现" class="headerlink" title="方法二：自定义类实现"></a>方法二：自定义类实现</h3><p>自定义切面类DiyPointcut.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointcut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123; System.out.println(<span class="string">&quot;=====before=====&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123; System.out.println(<span class="string">&quot;=====after=====&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Spring配置文件ApplicationContext.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.config.DiyPointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式二：使用自定义类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="方法三：注解实现"><a href="#方法三：注解实现" class="headerlink" title="方法三：注解实现"></a>方法三：注解实现</h3><p>注解实现的增强切面类AnnotationPointcut.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointcut</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* org.example.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====annotation before======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* org.example.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====annotation after======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* org.example.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(joinPoint.getSignature());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;around-2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在ApplicationContext.xml中注册bean并开启注解支持</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;anno&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.config.AnnotationPointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    方式三：使用注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    通过aop命名空间的&lt;aop:aspectj-autoproxy/&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy/&gt;隐藏起来了&lt;aop:aspectj-autoproxy/&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy poxy-target-class=&quot;true&quot;/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-05-整合mybatis</title>
    <url>/2024/04/14/Spring-05-%E6%95%B4%E5%90%88mybatis/</url>
    <content><![CDATA[<h1 id="1-导入相关jar包"><a href="#1-导入相关jar包" class="headerlink" title="1. 导入相关jar包"></a>1. 导入相关jar包</h1><ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql-connector-j</li>
<li>spring-webmvc</li>
<li>spring-jdbc</li>
<li>aspectjweaver</li>
<li>mybatis-spring【重点】</li>
<li>配置Maven静态资源过滤问题</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-08-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-08-mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Maven静态资源过滤问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.21.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="2-MyBatis步骤"><a href="#2-MyBatis步骤" class="headerlink" title="2. MyBatis步骤"></a>2. MyBatis步骤</h1><h2 id="编写pojo实体类"><a href="#编写pojo实体类" class="headerlink" title="编写pojo实体类"></a>编写pojo实体类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classover.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="实现mybatis配置文件"><a href="#实现mybatis配置文件" class="headerlink" title="实现mybatis配置文件"></a>实现mybatis配置文件</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.classover.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?</span></span></span><br><span class="line"><span class="string"><span class="tag">                useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>chararcterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.classover.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="UserDao接口编写"><a href="#UserDao接口编写" class="headerlink" title="UserDao接口编写"></a>UserDao接口编写</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classover.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.classover.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="接口对应的Mapper映射文件"><a href="#接口对应的Mapper映射文件" class="headerlink" title="接口对应的Mapper映射文件"></a>接口对应的Mapper映射文件</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.classover.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.classover.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user: userList)&#123;</span><br><span class="line">   	 System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="3-MyBatis-Spring"><a href="#3-MyBatis-Spring" class="headerlink" title="3. MyBatis-Spring"></a>3. MyBatis-Spring</h1><p>主要利用Spring优化两个点：</p>
<ul>
<li>dataSource</li>
<li>SqlSessionFactory</li>
</ul>
<h2 id="整合实现一"><a href="#整合实现一" class="headerlink" title="整合实现一"></a>整合实现一</h2><h3 id="1-引入Spring配置文件"><a href="#1-引入Spring配置文件" class="headerlink" title="1. 引入Spring配置文件"></a>1. 引入Spring配置文件</h3><p>在该配置文件中设置datasource和sqlSessionFactory，这两个bean所对应的class都已经由Spring设置好了，直接引用即可。</p>
<p>首先，datasource需要设置如下几个属性：</p>
<ul>
<li>driverClassName</li>
<li>url</li>
<li>username</li>
<li>password</li>
</ul>
<p>其次，sqlSessionFactory需要设置如下几个属性：</p>
<ul>
<li>dataSource【必须】</li>
<li>configLocation【可选】， 用于绑定mybatis配置文件</li>
<li>mapperLocations【可选】，在这里标识了mapper位置，在mybatis配置文件中就不用再注册了</li>
</ul>
<p>最后，注册sqlSession，只需要将工厂放进去即可，但是，SqlSessionTemplate类没有set方法，只能使用构造器进行注册。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--    dataSource:改用Spring的数据源 还可以用c3p0 dbcp druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    sqlSessionFactory:无需再new，在spring容器中管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            String resource = &quot;mybatis-config.xml&quot;;</span></span><br><span class="line"><span class="comment">            //1. 打开流</span></span><br><span class="line"><span class="comment">            InputStream in = Resources.getResourceAsStream(resource);</span></span><br><span class="line"><span class="comment">            //2. 创建sqlsession工厂</span></span><br><span class="line"><span class="comment">            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);</span></span><br><span class="line"><span class="comment">            //3. 使用工厂打开sql会话</span></span><br><span class="line"><span class="comment">            SqlSession sqlSession = factory.openSession(true);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    在这里标识了mapper位置，在mybatis配置文件中就不用再注册了--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:org/classover/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--没有set方法，所以只能使用构造器注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-增加Dao接口实现类，私有化SqlSessionTemplate"><a href="#2-增加Dao接口实现类，私有化SqlSessionTemplate" class="headerlink" title="2. 增加Dao接口实现类，私有化SqlSessionTemplate"></a>2. 增加Dao接口实现类，私有化SqlSessionTemplate</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classover.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.classover.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectAll();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-注册bean"><a href="#3-注册bean" class="headerlink" title="3. 注册bean"></a>3. 注册bean</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.classover.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapperImpl2</span> <span class="variable">userMapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapperImpl.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="整合实现二"><a href="#整合实现二" class="headerlink" title="整合实现二"></a>整合实现二</h2><p>mybatis-spring1.2.3版以上的才有这个。</p>
<p>官方文档截图：dao继承Support类，直接利用 getSqlSession() 获得，然后直接注入SqlSessionFactory。比起方式1，不需要管理SqlSessionTemplate，而且对事务的支持更加友好。可跟踪源码查。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Spring-05-%E6%95%B4%E5%90%88mybatis/image-20240414202736442.png"
                      alt="image-20240414202736442"
                ></p>
<h3 id="1-修改一下实现一的UserMapperImpl"><a href="#1-修改一下实现一的UserMapperImpl" class="headerlink" title="1. 修改一下实现一的UserMapperImpl"></a>1. 修改一下实现一的UserMapperImpl</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.classover.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.classover.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-修改bean配置"><a href="#2-修改bean配置" class="headerlink" title="2. 修改bean配置"></a>2. 修改bean配置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserMapperImpl2没有属性，但是他的父类需要sqlSessionFactory属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.classover.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>总结 : 整合到spring中以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还 可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode-2024-1-14</title>
    <url>/2024/01/14/leetcode-2024-1-14/</url>
    <content><![CDATA[<h2 id="每日一题-83-删除排序链表中的重复元素"><a href="#每日一题-83-删除排序链表中的重复元素" class="headerlink" title="每日一题 83. 删除排序链表中的重复元素"></a>每日一题 83. 删除排序链表中的重复元素</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/2024-1-14-%E6%95%B0%E7%BB%84-1/image-20240114172333487.png"
                      alt="image-20240114172333487"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/2024-1-14-%E6%95%B0%E7%BB%84-1/image-20240114172346923.png"
                      alt="image-20240114172346923"
                ></p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先这里是考虑创了一个新的链表，这样很方便，写起来思路也很顺畅，但是需要开辟新的空间，有一定的负担。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(head.val);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newhead</span> <span class="operator">=</span> q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val == q.val)&#123;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(p.val, <span class="literal">null</span>);</span><br><span class="line">            q.next = l;</span><br><span class="line">            q = q.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/2024-1-14-%E6%95%B0%E7%BB%84-1/image-20240114174011488.png"
                      alt="image-20240114174011488"
                ></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>试试在原始链表中删除的方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(p!= <span class="literal">null</span> &amp;&amp; p.val == q.val)&#123;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            q.next = p;</span><br><span class="line">            q = p;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span>)&#123;</span><br><span class="line">                p = p.next; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/2024-1-14-%E6%95%B0%E7%BB%84-1/image-20240114174030474.png"
                      alt="image-20240114174030474"
                ></p>
<p>居然效果是一样的TAT！</p>
<p>这里我只开了两个ListNode，应该是需要优化到只用一个变量的情况。</p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>再试试，好，even worse TAT</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">null</span> &amp;&amp; q.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q.val == q.next.val)&#123;</span><br><span class="line">                q.next = q.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/2024-1-14-%E6%95%B0%E7%BB%84-1/image-20240114175251514.png"
                      alt="image-20240114175251514"
                ></p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-1-17</title>
    <url>/2024/01/17/leetcode-2024-1-17/</url>
    <content><![CDATA[<h2 id="2744-最大字符串配对数目"><a href="#2744-最大字符串配对数目" class="headerlink" title="2744. 最大字符串配对数目"></a>2744. 最大字符串配对数目</h2><p>给你一个下标从 <strong>0</strong> 开始的数组 <code>words</code> ，数组中包含 <strong>互不相同</strong> 的字符串。</p>
<p>如果字符串 <code>words[i]</code> 与字符串 <code>words[j]</code> 满足以下条件，我们称它们可以匹配：</p>
<ul>
<li>字符串 <code>words[i]</code> 等于 <code>words[j]</code> 的反转字符串。</li>
<li><code>0 &lt;= i &lt; j &lt; words.length</code></li>
</ul>
<p>请你返回数组 <code>words</code> 中的 <strong>最大</strong> 匹配数目。</p>
<p>注意，每个字符串最多匹配一次。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：words = [&quot;cd&quot;,&quot;ac&quot;,&quot;dc&quot;,&quot;ca&quot;,&quot;zz&quot;]</span><br><span class="line">输出：2</span><br><span class="line">解释：在此示例中，我们可以通过以下方式匹配 2 对字符串：</span><br><span class="line">- 我们将第 0 个字符串与第 2 个字符串匹配，因为 word[0] 的反转字符串是 &quot;dc&quot; 并且等于 words[2]。</span><br><span class="line">- 我们将第 1 个字符串与第 3 个字符串匹配，因为 word[1] 的反转字符串是 &quot;ca&quot; 并且等于 words[3]。</span><br><span class="line">可以证明最多匹配数目是 2 。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：words = [&quot;ab&quot;,&quot;ba&quot;,&quot;cc&quot;]</span><br><span class="line">输出：1</span><br><span class="line">解释：在此示例中，我们可以通过以下方式匹配 1 对字符串：</span><br><span class="line">- 我们将第 0 个字符串与第 1 个字符串匹配，因为 words[1] 的反转字符串 &quot;ab&quot; 与 words[0] 相等。</span><br><span class="line">可以证明最多匹配数目是 1 。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：words = [&quot;aa&quot;,&quot;ab&quot;]</span><br><span class="line">输出：0</span><br><span class="line">解释：这个例子中，无法匹配任何字符串。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 50</code></li>
<li><code>words[i].length == 2</code></li>
<li><code>words</code> 包含的字符串互不相同。</li>
<li><code>words[i]</code> 只包含小写英文字母。</li>
</ul>
<h3 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h3><p>首先想的是暴力破解，那么就是一个双层循环中比较两个字符串，当words[i]的反转.equalsto(words[j])时，cnt++。但是这就意味着时间复杂度为n×n×string.length。感觉是很高的复杂度。好吧，字符串都是两位的… 好2b啊这个题。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumNumberOfStringPairs</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(words.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; words.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(words[i].charAt(<span class="number">0</span>) == words[j].charAt(<span class="number">1</span>) &amp;&amp; words[i].charAt(<span class="number">1</span>) == words[j].charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>这里要注意，在Java里面，字符串不能算作一个数组，所以只能用charAt取字符。</strong></p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-1-19【二分查找相关】</title>
    <url>/2024/01/19/leetcode-2024-1-19/</url>
    <content><![CDATA[<p>今天每日一题太难了，先跟代码随想录开始刷题吧哈哈哈哈TAT</p>
<h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><p>好吧这个没什么好说的，巩固一下基础。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid =  (left+right) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="34-在排序数组中查找元素得第一个位置和最后一个位置"><a href="#34-在排序数组中查找元素得第一个位置和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素得第一个位置和最后一个位置"></a>34. 在排序数组中查找元素得第一个位置和最后一个位置</h2><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p>
<p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [], target = 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>nums</code> 是一个非递减数组</li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
</ul>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><strong>捕捉关键词排序数组，感觉就是要用二分法好好好</strong></p>
<p>一开始一直拘泥于原本固定的二分查找模式，分等于、大于、小于三种可能性来讨论，但是无法考虑清楚等于的时候应该怎么处理，当时想了两条路：</p>
<ol>
<li>当nums[mid] &#x3D;&#x3D; target，使res[0] &#x3D; res[1] &#x3D; mid，然后把原始的数组分成左右两半进行递归操作，emmmm，但是这个感觉非常不合理，很麻烦。</li>
<li>当nums[mid] &#x3D;&#x3D; target，使用while循环前向和后向查找第一个和最后一个为target的值，emmm，但是在最坏情况下，时间复杂度为O（n）。</li>
</ol>
<p>最后发现，事实上，二分法的精髓就是在有序数组中查找一个确定的值，这个题的关键在于找到第一个和最后一个等于target的值。那么我们可以使用两个二分循环来查找这两个值。</p>
<p><strong>因为我们本质上还是寻找target的位置</strong>，所以要在&#x3D;&#x3D;中做改变，区别在于：</p>
<ul>
<li>寻找一个唯一的target是直接返回mid</li>
<li>寻找第一个出现的target，当nums[mid] &#x3D;&#x3D; target时，第一个target肯定是出现在mid或者mid左边，所以应该把搜索范围缩小到[left, mid]</li>
<li>寻找最后一个出现的target，当nums[mid] &#x3D;&#x3D; target时，最后一个target肯定是出现在mid或者mid右边，所以应该把搜索范围缩小到[mid, right]</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>; <span class="comment">//注意</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                res[<span class="number">1</span>] = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>; <span class="comment">//注意</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>完全没想到的方法，就是不使用二分法，因为是在二分查找后面的题目，所以先入为主地认为最简单的方法就是二分，实际上直接用首尾循环是最简单的。</p>
<p>核心就是找第一个target和最后一个target，两个循环就可以了，但是要注意边界判断。比如<code>left &lt; nums.length</code>和<code>right &gt;= 0</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; nums.length &amp;&amp; nums[left] &lt; target)&#123; left++; &#125;</span><br><span class="line">        <span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] &gt; target)&#123; right--; &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; nums.length &amp;&amp; right &gt;= <span class="number">0</span> &amp;&amp; left &lt;= right)&#123;</span><br><span class="line">            res[<span class="number">0</span>] = left;</span><br><span class="line">            res[<span class="number">1</span>] = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a>367. 有效的完全平方数</h2><p>给你一个正整数 <code>num</code> 。如果 <code>num</code> 是一个完全平方数，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p>
<p><strong>完全平方数</strong> 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。</p>
<p>不能使用任何内置的库函数，如 <code>sqrt</code> 。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：num = 16</span><br><span class="line">输出：true</span><br><span class="line">解释：返回 true ，因为 4 * 4 = 16 且 4 是一个整数。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：num = 14</span><br><span class="line">输出：false</span><br><span class="line">解释：返回 false ，因为 3.742 * 3.742 = 14 但 3.742 不是一个整数。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= num &lt;= 231 - 1</code></li>
</ul>
<p>比较简单，注意一下<code>((double) num / mid == (double)mid)</code>要考虑double，如果是int的话存在误差导致的误判。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> num / <span class="number">2</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">double</span>) num / mid == (<span class="type">double</span>)mid)&#123; <span class="comment">// 注意比较精度</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (num / mid &lt; mid)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-2-24【数组-移除元素-1】</title>
    <url>/2024/02/24/leetcode-2024-2-24/</url>
    <content><![CDATA[<h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h1><p><strong>提示</strong></p>
<p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要原地移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并原地修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>说明</strong></p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,3,0,4]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></div>

<h2 id="思路一-双向指针"><a href="#思路一-双向指针" class="headerlink" title="思路一 双向指针"></a>思路一 双向指针</h2><p>首先是想到了双向指针的办法，一个从前面扫描一个从后面扫描，但是由于题目只要求记录除val后的长度然后从头输出，所以，前面遇到了就和后面非val值交换，后面遇到了就直接跳过。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//处理空数组</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//首先确定i和j的合法性，循环在i&gt;=j时停止</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= nums.length-<span class="number">1</span> &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; i &lt; j)&#123;</span><br><span class="line">            <span class="comment">//j从后往前遍历，指向逆序第一个不等于val的值，cnt记录val的个数</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] == val)&#123;</span><br><span class="line">                j--;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//i遇到val，就表明要进行交换了，因为刚才处理了j，所以要再次判断i和j的关系以及j的合法性</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= <span class="number">0</span> &amp;&amp; i &lt; j &amp;&amp;nums[i] == val)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = tmp;</span><br><span class="line">                j--;</span><br><span class="line">                cnt++; <span class="comment">//交换一次表明遇到一个val，所以cnt++</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当j==i时，再判断一下这个值即可</span></span><br><span class="line">        <span class="keyword">if</span> (i == j &amp;&amp; nums[j] == val)&#123;</span><br><span class="line">            cnt+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums.length-cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="思路二-快慢指针法"><a href="#思路二-快慢指针法" class="headerlink" title="思路二 快慢指针法"></a>思路二 快慢指针法</h2><p>这个方法是代码随想录中写到的，感觉以前从来没看到过，这里整理一下思路。</p>
<p>定义快慢指针</p>
<ul>
<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li>
<li>慢指针：指向更新新数组下标的位置</li>
</ul>
<p>图是从代码随想录上复制过来的，我暂时对这个方法没什么头绪…</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif"
                      alt="27.移除元素-双指针法"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 快慢指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-2-25【数组-移除元素-2】</title>
    <url>/2024/02/25/leetcode-2024-2-25/</url>
    <content><![CDATA[<h1 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h1><p><strong>提示</strong></p>
<p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你<strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p>
<p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p>
<ul>
<li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li>
<li>返回 <code>k</code> 。</li>
</ul>
<p><strong>判题标准:</strong></p>
<p>系统会用下面的代码来测试你的题解:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = [...]; <span class="comment">// 输入数组</span></span><br><span class="line"><span class="type">int</span>[] expectedNums = [...]; <span class="comment">// 长度正确的期望答案</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> removeDuplicates(nums); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> k == expectedNums.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    <span class="keyword">assert</span> nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>nums</code> 已按 <strong>非严格递增</strong> 排列</li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>乍一看感觉和27的非常相似，但是27是遇到val就得处理，这个题是遇到重复的才需要处理，因此昨天的双向指针法显然有点不好说。<strong>非严格递增数列的意思是整个序列是从小到大的，但是里边会有一些数字会在它本身周围有重复</strong>。这个条件让题目简单很多。首先想到了昨天学的快慢指针法，慢指针找下一个插入的位置，快指针找下一个插入的值。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution26</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> removeDuplicates(num);</span><br><span class="line">        System.out.println(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            System.out.print(num[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || nums.length == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>, fast = slow+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//这个循环中需要非常注意fast的合法性判断</span></span><br><span class="line">        <span class="keyword">while</span> (fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">while</span>(fast &lt; nums.length &amp;&amp; nums[slow] == nums[fast]) fast++;</span><br><span class="line">            <span class="keyword">if</span> (fast &lt; nums.length)&#123;</span><br><span class="line">                nums[++slow] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>不过很快发现这个嵌套的while很傻瓜，在循环里面再循环其实很容易改变外循环的条件，导致下标合法性出问题，就要在外循环的后续部分加很多判断，这很蠢。</p>
<p>改成下面的情况：<strong>当slow和fast相同的时候，fast后移；当二者不相同的时候，就把fast指向的值复制到slow的下一个位置。</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (fast &lt; nums.length)&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[slow] ！= nums[fast])&#123;</span><br><span class="line">        nums[++slow] = nums[fast];</span><br><span class="line">    &#125;</span><br><span class="line">    fast ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h1><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示</strong>:</p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>
</ul>
<h2 id="方案一-很烂的一次遍历"><a href="#方案一-很烂的一次遍历" class="headerlink" title="方案一 很烂的一次遍历"></a>方案一 很烂的一次遍历</h2><p>还是先用了快慢指针法，思路很简单，就是说slow负责找未处理的第一个0，fast负责找slow后面第一个非0，然后把二者进行交换。</p>
<p>这样就可以实现每一个非0都在一次交换中放到最终的位置上，0也随之后移。</p>
<p>呃呃呃结果循环写得乱七八糟，最后时间复杂度还好高…知耻而后勇！看看什么问题</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution283</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        moveZeroes(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            System.out.print(nums[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> slow + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length &amp;&amp; slow &lt; fast)&#123;</span><br><span class="line">            <span class="keyword">while</span>(slow &lt; nums.length &amp;&amp; nums[slow] != <span class="number">0</span>) slow ++;</span><br><span class="line">            fast = slow;</span><br><span class="line">            <span class="keyword">while</span>(fast &lt; nums.length &amp;&amp; nums[fast] == <span class="number">0</span>) fast ++;</span><br><span class="line">            <span class="keyword">if</span> (fast &lt; nums.length &amp;&amp; slow &lt; fast)&#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                nums[fast] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-2-25/image-20240225105609973.png"
                      alt="image-20240225105609973"
                ></p>
<h2 id="方案二-很牛的一次遍历"><a href="#方案二-很牛的一次遍历" class="headerlink" title="方案二 很牛的一次遍历"></a>方案二 很牛的一次遍历</h2><p>这个方法和我的思路是一模一样的，也是基于交换的，但是我的代码写得太烂了TAT。</p>
<p>他是利用了快速排序的思想，正好这里可以复习一下。</p>
<p><strong>快速排序：</strong>每一趟确定一个值的位置，将小于该值的数放在左侧，大于该值的数放在右侧。</p>
<p><strong>该题思路：</strong>使用0做这个分割的中间点，不等于0的数放在左侧，等于0的数放在右侧。</p>
<p>快速排序需要一整趟的遍历才能达到效果，最终两个指针相遇的时候才算一趟，但是这个题实际上分界点和右侧的值是相同的，每交换一次，实际上就已经确定了一个非0数的位置。</p>
<p><code>但是我觉得不从快排的思路来思考，就使用方案一的思路来理解这个想法更好一些。就是说slow指向该放入的地方，fast用于遍历整个数组，遇到slow后面的非0值就放到slow的位置上，然后把自己变成0.</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">moveZeroes3</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.length)&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[slow];</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">            nums[fast] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="方案三-两次遍历"><a href="#方案三-两次遍历" class="headerlink" title="方案三 两次遍历"></a>方案三 两次遍历</h2><p>快慢指针：</p>
<ul>
<li>慢指针：下一个非0值应该在的最终位置</li>
<li>快指针：下一个非0值</li>
</ul>
<p>当快指针遍历结束，表明非0值已经全部就位，使用慢指针为数组末端填充0即可。</p>
<p>感觉我的思路是对的，甚至比这个方法更好，但是由于代码功底太差，导致写了太多的判断条件，因此虽然还是O(n)但是还是没有其他的方法快捷。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">moveZeroes2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//非0值放置</span></span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.length)&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != <span class="number">0</span>)&#123;</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//补0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> slow; i &lt;nums.length; i ++)&#123;</span><br><span class="line">        nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实上述三种方案都是基于快慢指针的，方案一和二是同一思路，它们和方案三的区别在于是交换还是覆盖。</p>
<p>真的是太久没有写代码了，居然能写的这么丑！！！</p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-2-26【数组-移除元素-3】</title>
    <url>/2024/02/26/leetcode-2024-2-26/</url>
    <content><![CDATA[<h1 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a>844. 比较含退格的字符串</h1><p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code> 。<code>#</code> 代表退格字符。</p>
<p><strong>注意：</strong>如果对空文本输入退格字符，文本继续为空。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;ac&quot;。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;&quot;。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a#c&quot;, t = &quot;b&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：s 会变成 &quot;c&quot;，但 t 仍然是 &quot;b&quot;。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 200</code></li>
<li><code>s</code> 和 <code>t</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code></li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>你可以用 <code>O(n)</code> 的时间复杂度和 <code>O(1)</code> 的空间复杂度解决该问题吗</li>
</ul>
<h2 id="方案一-使用栈重构字符串"><a href="#方案一-使用栈重构字符串" class="headerlink" title="方案一 使用栈重构字符串"></a>方案一 使用栈重构字符串</h2><p>这种方法很容易想到，但是时间复杂度O（N+M），空间复杂度O（N+M），注意一下StringBuffer这个类。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution844</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(backspaceCompare(<span class="string">&quot;ab##c&quot;</span>, <span class="string">&quot;c#d#&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(s).equals(build(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">build</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">re</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i ++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                re.append(ch);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!re.isEmpty())&#123;</span><br><span class="line">                    re.deleteCharAt(re.length()-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> re.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-双指针"><a href="#方案二-双指针" class="headerlink" title="方案二 双指针"></a>方案二 双指针</h2><p>大概思路就是从后往前遍历，使用一个flag来标识该值是否需要删除。一旦遇到一个#，flag就+1。当指向一个非#的字符时，首先检查flag的值，如果flag为1，则表示该值需要删除，如果flag为0，则表示该值为有效值。</p>
<p>代码看着比较长，实际上思路比较简单，但是要理清楚并且写出来还是需要一定的代码能力。</p>
<p><strong>我自己没有想到的是这里在选择合法值的时候选择了一个while循环，且不使用循环条件来选取这个合法值，使用break跳出循环来选择这个合法值。</strong></p>
<p>平时一般使用循环来选取合法值都是使用循环条件来选取，比如下面这样能够选取到str中第一个0。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(str[n]!=<span class="number">0</span>) n++;</span><br></pre></td></tr></table></figure></div>

<p><strong>分类讨论如下：</strong></p>
<ol>
<li>当前值为#，则flag++；</li>
<li>当前值不为#，但是flag&gt;0，则是非法值，flag–，i–；</li>
<li>当前值不为#，但是flag&#x3D;&#x3D;0，是合法值，直接跳出循环。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare2</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sflag</span> <span class="operator">=</span> <span class="number">0</span>, tflag = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">si</span> <span class="operator">=</span> s.length()-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ti</span> <span class="operator">=</span> t.length()-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(si &gt;= <span class="number">0</span> || ti &gt;= <span class="number">0</span>)&#123; <span class="comment">//这里也要注意，因为最后还要比较长度！！</span></span><br><span class="line">        <span class="keyword">while</span>(si &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(si) == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                sflag ++;</span><br><span class="line">                si --;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sflag != <span class="number">0</span>)&#123;</span><br><span class="line">                si --;</span><br><span class="line">                sflag --;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//通过跳出循环来选择需要的值非常明智！！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ti &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.charAt(ti) == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                ti --;</span><br><span class="line">                tflag ++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tflag != <span class="number">0</span>)&#123;</span><br><span class="line">                ti --;</span><br><span class="line">                tflag --;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(si &gt;= <span class="number">0</span> &amp;&amp; ti &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(si) != t.charAt(ti))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (si &gt;= <span class="number">0</span> || ti &gt;= <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        si --;</span><br><span class="line">        ti --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>该题的注意点：</strong></p>
<ol>
<li><strong>引入了flag这个值来记录#的个数。</strong></li>
<li><strong>由于一个字符的有效与否只与其后面是否有#相关，所以说我们逆序遍历。</strong></li>
<li><strong>在while循环中不适用循环条件选择合法值，而使用break来选择，也就是说，当合法值条件过多，情况比较负责的时候，可以选择在while循环中，使用if语句来选择出合法值，并break跳出循环以进行后续操作。</strong></li>
<li><strong>注意外部大循环的条件不是&amp;&amp;是||，因为最后还要考虑长度问题。</strong></li>
</ol>
<h1 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h1><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</li>
</ul>
<h2 id="方案一-排序"><a href="#方案一-排序" class="headerlink" title="方案一 排序"></a>方案一 排序</h2><p>正好借这个题目来复习一下各种排序吧。</p>
<h3 id="基本冒泡排序"><a href="#基本冒泡排序" class="headerlink" title="基本冒泡排序"></a>基本冒泡排序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;nums.length; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="带flag的排序"><a href="#带flag的排序" class="headerlink" title="带flag的排序"></a>带flag的排序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">BubbleSort_2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;nums.length; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j])&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> p;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">        p = partition(nums, low, high);</span><br><span class="line">        QuickSort(nums, low, p-<span class="number">1</span>);</span><br><span class="line">        QuickSort(nums, p+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> nums[low];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] &gt; pivot) high--;</span><br><span class="line">        nums[low] = nums[high];</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] &lt;= pivot) low++;</span><br><span class="line">        nums[high] = nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt;= tmp)&#123;</span><br><span class="line">            nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j+<span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ChooseSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; nums.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; min)&#123;</span><br><span class="line">                min = nums[j];</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[minIndex] = nums[i];</span><br><span class="line">        nums[i] = min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="答案的其他部分"><a href="#答案的其他部分" class="headerlink" title="答案的其他部分"></a>答案的其他部分</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">7</span>, -<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">11</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] newNums = sortedSquares(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newNums.length; i++) &#123;</span><br><span class="line">        System.out.print(newNums[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;nums.length; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = tmp * tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    QuickSort(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>); <span class="comment">// 可以选择不同的排序方式</span></span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-双指针-1"><a href="#方案二-双指针-1" class="headerlink" title="方案二 双指针"></a>方案二 双指针</h2><p>但是上述的排序方式都没有使用到原始序列已经有序，平方后的序列也是半有序的这个条件。这里要考虑一下双指针的方法。</p>
<p>好吧双指针也需要创建空间^^，我还在原地想半天。</p>
<p>这个题就是从0为界，或者说从是否为负数为界，向两边有序，所以说从中间开始向两边开始遍历和比较就可以了。一开始没有想到用一个新的数组来装，总想着原地处理。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sortedSquares2(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;nums.length; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) p = i;</span><br><span class="line">        nums[i] = tmp * tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> p, right = p+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right &lt; nums.length)&#123;</span><br><span class="line">        res[i++] = nums[left] &lt;= nums[right] ? nums[left--] : nums[right++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left &gt;= <span class="number">0</span>) res[i++] = nums[left--];</span><br><span class="line">    <span class="keyword">while</span>(right &lt;nums.length) res[i++] = nums[right++];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结一下：没办法又省时间又省空间的时候，总要舍掉一个。</strong></p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-2-27【数组-长度最小的子数组-1】</title>
    <url>/2024/02/27/leetcode-2024-2-27/</url>
    <content><![CDATA[<h1 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a>209. 长度最小的子数组</h1><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p>
<p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= target &lt;= 109</code></li>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>1 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li>
</ul>
<h2 id="方案一-暴力破解【Java超时】"><a href="#方案一-暴力破解【Java超时】" class="headerlink" title="方案一 暴力破解【Java超时】"></a>方案一 暴力破解【Java超时】</h2><p>超时咯</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution209</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(minSubArrayLen(<span class="number">11</span>, nums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; nums.length; j++)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt;= target)&#123;</span><br><span class="line">                    len = Math.min(len, j-i+<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">//这个break可以一定程度地缩短时间</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len&lt;Integer.MAX_VALUE ? len : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-前缀和-二分法"><a href="#方案二-前缀和-二分法" class="headerlink" title="方案二 前缀和+二分法"></a>方案二 前缀和+二分法</h2><p>由于这个数列都是正整数，所以其前缀和数组一定是递增的，这满足了二分法的基本要求。</p>
<p>分析可得，方案一之所以时间复杂度为O(n²)，因为j是从i开始遍历到尾巴上的。</p>
<p>如果说我们采用二分法，来找一个j，使得sum(j) - sum(i-1) &gt;&#x3D; target，那我们就找到了这个j，并且只使用了O(logn)的时间复杂度。</p>
<p>只能说真的花了大功夫写出来，代码功底已经降低到地板了TAT。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minSubArrayLen2</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//前缀和数组构造</span></span><br><span class="line">    <span class="type">int</span>[] prefix = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    prefix[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        prefix[i] = prefix[i-<span class="number">1</span>] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span>  i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> prefix.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="comment">//sum的计算</span></span><br><span class="line">            <span class="keyword">if</span> (i-<span class="number">1</span> &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                sum = prefix[mid] - prefix[i - <span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum = prefix[mid];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//pre是指mid前面一个值所计算得到的sum</span></span><br><span class="line">            pre = sum - nums[mid];</span><br><span class="line">            <span class="comment">//如果mid和大于target而pre和小于target，说明这是我们要找的最合适的</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= target &amp;&amp; pre &lt; target)&#123;</span><br><span class="line">                len = Math.min(len, mid - i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt;= target &amp;&amp; pre &gt; target)&#123; <span class="comment">//mid和pre和都大于target的话，说明我们要找的数在左侧</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//要找的在右侧</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len&lt;Integer.MAX_VALUE ? len : <span class="number">0</span>; <span class="comment">//不要忘记这个！！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里也可以直接使用内置函数Arrays.binarySearch来查这个mid的值，我自己写了就当作是复习一遍二分啦。</p>
<h2 id="方案三-滑动窗口【双指针】"><a href="#方案三-滑动窗口【双指针】" class="headerlink" title="方案三 滑动窗口【双指针】"></a>方案三 滑动窗口【双指针】</h2><p>一开始想从这个思路下手的，但是一直没有理清楚思路。</p>
<p>现在理清楚啦，就是一个窗口，拥有start和end两个指针来标识窗口的大小。</p>
<p>sum用来记录窗口的和，有下面两种情况：</p>
<ul>
<li>sum &lt; target：说明窗口的值不够，那么end需要向后移动，以接近我们的目标值。</li>
<li>sum &gt;&#x3D; target：窗口值一旦达标，表明以这一个start开始的滑动窗口已经结束，<strong>我们需要记录当前窗口的大小</strong>，并把start右移，开始记录下一个窗口的值。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minSubArrayLen3</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[start];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; nums.length &amp;&amp; end &lt; nums.length)&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            end ++;</span><br><span class="line">            <span class="keyword">if</span> (end &lt; nums.length) sum += nums[end];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            len = Math.min(len, end - start + <span class="number">1</span>);</span><br><span class="line">            sum -= nums[start];</span><br><span class="line">            start ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len&lt;Integer.MAX_VALUE ? len : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-2-28【数组-长度最小的子数组-2】</title>
    <url>/2024/02/28/leetcode-2024-2-28/</url>
    <content><![CDATA[<h1 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a>904. 水果成篮</h1><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 <code>fruits</code> 表示，其中 <code>fruits[i]</code> 是第 <code>i</code> 棵树上的水果 <strong>种类</strong> 。</p>
<p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p>
<ul>
<li>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 <strong>单一类型</strong> 的水果。每个篮子能够装的水果总量没有限制。</li>
<li>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li>
<li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</li>
</ul>
<p>给你一个整数数组 <code>fruits</code> ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘全部 3 棵树。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [0,1,2,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘 [1,2,2] 这三棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,3,2,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：可以采摘 [2,3,2,2] 这四棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 4：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：可以采摘 [1,2,1,1,2] 这五棵树。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= fruits.length &lt;= 105</code></li>
<li><code>0 &lt;= fruits[i] &lt; fruits.length</code></li>
</ul>
<h2 id="方案一-暴力破解【超时】"><a href="#方案一-暴力破解【超时】" class="headerlink" title="方案一 暴力破解【超时】"></a>方案一 暴力破解【超时】</h2><p>这个题乍一看就和昨天那个非常像，实际上就是找一个符合要求的最长子数组，昨天是找最小的子数组。</p>
<p>先来试试暴力破解吧，思路是正确的，只是超时了，最后一个测试用例跑不过哈哈哈哈</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution904</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(totalFruit(f));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (fruits.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fruits.length; i ++)&#123;</span><br><span class="line">            <span class="type">int</span>[] mine = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            mine[<span class="number">2</span>-remain] = fruits[i];</span><br><span class="line">            remain--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; fruits.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (fruits[j] == mine[<span class="number">0</span>] || fruits[j] == mine[<span class="number">1</span>])&#123;</span><br><span class="line">                    res = Math.max(res, j - i + <span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(remain &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    mine[<span class="number">2</span>-remain] = fruits[j];</span><br><span class="line">                    remain--;</span><br><span class="line">                    res = Math.max(res, j - i + <span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-滑动窗口"><a href="#方案二-滑动窗口" class="headerlink" title="方案二 滑动窗口"></a>方案二 滑动窗口</h2><p>根据之前的学习自己写的，虽然没有打败100%的人，但是还是成就感满满^^。</p>
<p>设置了两个指针，一个start一个end，end作为主遍历指针。分以下三种情况讨论。</p>
<p>remain记录剩下还能摘的果子的种类数，mine标识已经摘的各类果子的数量，因为题目要求fruits[i] &lt; fruits.length，所以mine的长度也就是和fruits一样长。</p>
<ol>
<li>当remain &#x3D;&#x3D; 0&amp;&amp;mine[fruits[end]] &#x3D;&#x3D; 0：表明end指向的果子我们没有摘过但是我们已经摘了两种果子，这时候就无法再采摘了，不能动end了，只能动start，直到remain&gt;0也就是我们能够继续向后摘果子为止。所以就让start后移直到remain&gt;0。然后再用continue结束本次循环，从头查看怎么动end。<strong>注意：这里显然窗口在变小，而我们res要求最大值，所以这里没有必要求res。</strong></li>
<li>当mine[fruits[end]] !&#x3D; 0：表明这个种类的果子之前采摘过，那可以不用管remain，放心大胆采，<strong>同时记录res的值</strong>。</li>
<li>剩下的情况就是remain&gt;0&amp;&amp;mine[fruits[end]] &#x3D;&#x3D; 0：这个种类的果子没采过且我们采过的果子种类未达到两种，就可以采，<strong>同时remain–且要记录res的值</strong>。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">totalFruit2</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fruits.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] mine = <span class="keyword">new</span> <span class="title class_">int</span>[fruits.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start &lt; fruits.length &amp;&amp; end &lt; fruits.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(remain == <span class="number">0</span> &amp;&amp; mine[fruits[end]] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(remain == <span class="number">0</span>)&#123;</span><br><span class="line">                mine[fruits[start]] --;</span><br><span class="line">                <span class="keyword">if</span> (mine[fruits[start]] == <span class="number">0</span>) remain++;</span><br><span class="line">                start ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (mine[fruits[end]] != <span class="number">0</span>)&#123;</span><br><span class="line">            mine[fruits[end]] ++;</span><br><span class="line">            res = Math.max(res, end-start + <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mine[fruits[end]]++;</span><br><span class="line">            remain --;</span><br><span class="line">            res = Math.max(res, end-start + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        end++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-2-28/image-20240228151521104.png"
                      alt="image-20240228151521104"
                ></p>
<p>第一次写中等题目写成这样，还是蛮高兴的^^（叉腰。让我来看看耗时最短的方案是怎么个事儿&gt;&lt;</p>
<h2 id="方案三-滑动窗口-hashMap"><a href="#方案三-滑动窗口-hashMap" class="headerlink" title="方案三 滑动窗口+hashMap"></a>方案三 滑动窗口+hashMap</h2><p>好吧，原来是用了哈希表，我承认我忘记了Java的特性。但是我的思路是对的，还是好开心（菜狗知足</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">totalFruit3</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; fruits.length; end++)&#123;</span><br><span class="line">        cnt.put(fruits[end], cnt.getOrDefault(fruits[end], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(cnt.size() &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            cnt.put(fruits[start], cnt.get(fruits[start]) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(cnt.get(fruits[start]) == <span class="number">0</span>)&#123;</span><br><span class="line">                cnt.remove(fruits[start]);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, end-start+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这是怎么个事儿呢…官方题解也不是很靠谱的样子捏。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-2-28/image-20240228163657789.png"
                      alt="image-20240228163657789"
                ></p>
<h2 id="方案四-方案二优化"><a href="#方案四-方案二优化" class="headerlink" title="方案四 方案二优化"></a>方案四 方案二优化</h2><p>官方应该是使用hashMap消耗了较多的资源，由此可见还是我们的数组比较靠谱，但是官方题解的代码逻辑比我的清晰干净很多，所以我决定用官方的代码逻辑来优化方案二，减少其中的条件判断，以提升效率，最后提升不少。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">totalFruit4</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fruits.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] mine = <span class="keyword">new</span> <span class="title class_">int</span>[fruits.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt;fruits.length; end ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mine[fruits[end]]==<span class="number">0</span>) remain--;</span><br><span class="line">        mine[fruits[end]]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(remain &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            mine[fruits[start]]--;</span><br><span class="line">            <span class="keyword">if</span> (mine[fruits[start]] == <span class="number">0</span>) remain++;</span><br><span class="line">            start ++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, end-start+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-2-28/image-20240228164933844.png"
                      alt="image-20240228164933844"
                ></p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-3-1【数组-螺旋矩阵-1】</title>
    <url>/2024/03/01/leetcode-2024-3-1/</url>
    <content><![CDATA[<h1 id="59-螺旋矩阵"><a href="#59-螺旋矩阵" class="headerlink" title="59. 螺旋矩阵"></a>59. 螺旋矩阵</h1><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>第一反应就是创建一个二维数组int【n】【n】初始化为全-1，然后把数字填进去。</p>
<p>这里看到《代码随想录》上面有一个原则写得很好，摘抄一下。</p>
<p><strong>坚持循环不变量原则：大家写二分法经常写乱，主要是因为对区间的定义没有想清楚，区间的定义就是不变量。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是循环不变量规则。</strong></p>
<ul>
<li><p>首先，本题要遵循循环不变量原则，也就是说，这个循环的条件如何选择，是本题考察的重点。<strong>这是我没有想到的</strong>。正确的做法应该是，把每走一个正方形作为一次loop，通过矩阵的性质可知，loop&lt;&#x3D;n&#x2F;2，则把这个当成是while循环的条件。</p>
<ul>
<li>我一直想的是用一个笼统的循环指针i和j来控制循环，只要他们没有出界，就永远不出while，然后结束的时候内部break。</li>
</ul>
</li>
<li><p>其次，在每一个方向进行数字填充的时候，需要定义边界，且这个边界会随着循环的进行而改变。</p>
</li>
<li><p>同时，在填充的时候还要规定，右移时左闭右开，下移时上闭下开，左移时右闭左开，上移时下必上开。</p>
</li>
</ul>
<p>综上所述，该题的代码思路如下：</p>
<ol>
<li>首先，定义边界start，每进行一个loop，start就增加1。</li>
<li>设置while大循环，条件为loop++ &lt; n &#x2F; 2（loop初始化为0），这里一开始我不是很理解，因为我对于loop的定义不是很理解，后来发现是这样的性质：<ol>
<li>n为偶数时，循环的次数为n&#x2F;2</li>
<li>n为奇数时，循环的次数为n&#x2F;2，最后再加一个正中间的n²。</li>
</ol>
</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution59</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arr = generateMatrix(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(loop++ &lt; n/<span class="number">2</span>)&#123;</span><br><span class="line">             <span class="keyword">for</span>(j = start; j &lt; n - loop; j ++) res[start][j] = num++;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(i = start; i &lt; n - loop; i ++) res[i][j] = num++;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(; j &gt; start; j --) res[i][j] = num++;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span>(; i &gt; start; i-- ) res[i][j] = num++;</span><br><span class="line"></span><br><span class="line">             start ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) res[start][start] = n*n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-2-29</title>
    <url>/2024/02/29/leetcode-2024-2-29/</url>
    <content><![CDATA[<h1 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a>76. 最小覆盖子串</h1><p><strong>提示</strong></p>
<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>
<p><strong>注意：</strong></p>
<ul>
<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>
<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>
</ul>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br><span class="line">解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#x27;A&#x27;、&#x27;B&#x27; 和 &#x27;C&#x27;。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == s.length</code></li>
<li><code>n == t.length</code></li>
<li><code>1 &lt;= m, n &lt;= 105</code></li>
<li><code>s</code> 和 <code>t</code> 由英文字母组成</li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>感觉和昨天的题目很像，区别在于昨天的对比长度是2，并且只限制长度而不限制内容，且求的是最长子串。该题求最小子串，对比串的长度和内容都有限制。</p>
<p>初步考虑，首先要对对比串t进行预处理，然后用滑动窗口试试。</p>
<p>哈哈初步考虑了两个半小时，写出来这稀碎的代码，看在这道题是困难题的份上，也还是值得。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution76</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(minWindow(<span class="string">&quot;bba&quot;</span>, <span class="string">&quot;abb&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 满足窗口的要求：</span></span><br><span class="line"><span class="comment">         * 1. 字符都有</span></span><br><span class="line"><span class="comment">         * 2. 窗口最小</span></span><br><span class="line"><span class="comment">         * 3. 字符的数量也要一致</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s.contains(t))&#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Character, Integer&gt; pre = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : t.toCharArray()) &#123;</span><br><span class="line">            pre.put(c, pre.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="comment">// 记录每个字符出现的个数,收集一个就-1，等这个值减为0，说明已经满足要求，remain--；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> pre.size();</span><br><span class="line">        <span class="type">char</span>[] sChars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.MAX_VALUE; <span class="comment">//子串长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> -<span class="number">1</span>, end = -<span class="number">1</span>; <span class="comment">//最小子串定位</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j &lt; s.length())&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * i前进的情况：</span></span><br><span class="line"><span class="comment">             * 1. remain==0，表明已经满足要求，需要调整remain来提供j前进的条件。</span></span><br><span class="line"><span class="comment">             * 2. !pre.containsKey(sChars[i])，这个值不需要，那舍弃他是应该的，因为我们需要让窗口保持最小</span></span><br><span class="line"><span class="comment">             * 3. pre.get(sChars[i]) &lt; 0，选多了，右移，避免获取ba最终得到错误答案bba的情况。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">while</span>(remain == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (pre.containsKey(sChars[i]))&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> pre.get(sChars[i]);</span><br><span class="line">                    pre.put(sChars[i], tmp+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (pre.get(sChars[i]) != <span class="number">0</span>) &#123;</span><br><span class="line">                        remain++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; s.length() &amp;&amp; (!pre.containsKey(sChars[i]) || pre.get(sChars[i]) &lt; <span class="number">0</span> )) &#123;</span><br><span class="line">                <span class="keyword">if</span>(pre.containsKey(sChars[i])) pre.put(sChars[i], pre.get(sChars[i]) + <span class="number">1</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(pre.containsKey(sChars[j]))&#123;</span><br><span class="line">                pre.put(sChars[j], pre.get(sChars[j]) -<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(pre.get(sChars[j]) == <span class="number">0</span>) remain --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(remain == <span class="number">0</span> &amp;&amp; len &gt; j - i +<span class="number">1</span>) &#123;</span><br><span class="line">                start = i;</span><br><span class="line">                end = j;</span><br><span class="line">                len = j - i +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start == -<span class="number">1</span> || end == -<span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s.substring(start, end+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-2-29/image-20240229163344605.png"
                      alt="image-20240229163344605"
                ></p>
<p>看了一下题解的思路基本上都是这样，可能因为我代码写得太烂了导致多了很多条件判断，影响了效率。 </p>
<p>这里总结一下整体思路，本质上还是滑动窗口。</p>
<p><strong>变量说明</strong></p>
<ul>
<li>pre：一个HashMap，用来存放t中字符及其数量的键值对，key为字符，value为t中该字符的数量。当滑动窗口中每多一个该字符，则该key对应的value就减一。当pre中的每个键值对的value都为0时，就表明满足要求；存在键值对value小于0，说明窗口中有冗余字符，需要移动前指针i；存在键值对value大于0，说明还存在字符没有包含进入窗口，需要移动后指针j。</li>
<li>remain：用来标记还需要包含的字符。当字符c在pre中对应的value变为0时，remain会–。当remain为0，说明每个字符都已经满足要求。</li>
<li>len：子串长度，用于对比从而得出最短的子串。</li>
<li>start，end：用于记录最小子串的位置。</li>
</ul>
<p><strong>代码思路</strong></p>
<ul>
<li>首先进行精准匹配，当s中有t的时候直接返回t。</li>
<li>否则，使用滑动窗口进行子串匹配<ol>
<li>remain&#x3D;&#x3D;0：表示t中的字符和数量已经全部满足了，此时的滑动窗口已经满足了要求，需要根据长度决定是否记录窗口位置。同时要向前移动i，获取后续满足要求的窗口，对比他们的长度，从而获得最小子串。</li>
<li>向前移动窗口前指针i，除去不必要的值：<ol>
<li>不是t中的字符，可以直接i++；</li>
<li>当指向的字符对应的value&lt;0时，说明窗口中该字符存在冗余，应该右移，i++。</li>
</ol>
</li>
<li>如果pre中含有这个字符，则对应的value–，判断是否为0，然后修改remain</li>
<li>最后根据remain和len决定是否记录窗口。</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-3-10【链表-环形链表】</title>
    <url>/2024/03/08/leetcode-2024-3-10/</url>
    <content><![CDATA[<h1 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a>142. 环形链表 II</h1><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>
<p><strong>不允许修改</strong> 链表</p>
<p><strong>示例 1：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>
</ul>
<p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code> 空间解决此题？</p>
<h2 id="方案一-双指针"><a href="#方案一-双指针" class="headerlink" title="方案一  双指针"></a>方案一  双指针</h2><p>这个题一开始我是没有做出来的，而且其实如果不看题解我一辈子都做不出来TAT，谁能想到是高中物理追击问题啊TAT</p>
<p>该题的分析如下：</p>
<ol>
<li><p>首先，设置快慢两个指针，一个指针每次走一步，一个指针每次走两步，如果链表中存在环，那么两个指针一定会相遇。</p>
</li>
<li><p>设链表共有a+b个节点，其中链表头部到环入口有a个节点（不计入入口），设两指针分别走了f，s步：</p>
<ul>
<li>f &#x3D; 2s</li>
<li>f &#x3D; s + nb(n是f比s多走的环的数量)</li>
</ul>
<p>则可得</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">2s - s - nb = 0</span><br><span class="line">s = nb</span><br><span class="line">f = 2nb</span><br></pre></td></tr></table></figure></div>

<p>则fast和slow指针分别走了2n，n个环的周长。</p>
</li>
<li><p>要找到链表入口点的方法：</p>
<ul>
<li>已知链表长度为a+b，即只要从链表头部走a步即可找到链表入口点。</li>
<li>从入口点开始遍历链表，走无论多少个环都可以再次回到入口点，即从链表头部走a+nb步</li>
</ul>
</li>
<li><p>我们并不知道a是多少，但我们有两个办法可以到达入口点，也就是说我们用这两个指针同步移动，是否相等来判断是否到达环入口点。</p>
<ul>
<li>此时，已知s &#x3D; nb，那么从slow当前位置走a步就能够到达环入口节点。</li>
<li>此时，从链表头部开始移动，走a步即可到达环入口节点。</li>
</ul>
</li>
<li><p>令fast &#x3D; head，然后让fast和slow同步移动，等二者指向同一节点时，该节点即为环入口节点。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy, slow = dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;<span class="keyword">while</span> (fast != slow);</span><br><span class="line"></span><br><span class="line">    fast = dummy;</span><br><span class="line">    <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-3-5【数组-螺旋矩阵-2】</title>
    <url>/2024/03/05/leetcode-2024-3-5/</url>
    <content><![CDATA[<h1 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a>54. 螺旋矩阵</h1><p><strong>提示</strong></p>
<p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p>
<p><strong>示例 1：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 10</code></li>
<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>主要的一点是控制边界，另外就是，本题和矩阵2不同的是，本题不一定是方阵。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution54</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] num = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span>[][] num2 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;, &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; integers = spiralOrder(num);</span><br><span class="line">        System.out.println(integers.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = m - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l; j &lt;= r; j ++) res.add(matrix[t][j]);</span><br><span class="line">            <span class="keyword">if</span>(++t &gt; b) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t; i &lt;= b; i ++) res.add(matrix[i][r]);</span><br><span class="line">            <span class="keyword">if</span>(--r &lt; l) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> r; j &gt;= l; j --)res.add(matrix[b][j]);</span><br><span class="line">            <span class="keyword">if</span>(--b &lt; t) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b; i &gt;= t; i--)res.add(matrix[i][l]);</span><br><span class="line">            <span class="keyword">if</span>(++l &gt; r) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一开始使用的<strong>59螺旋矩阵2</strong>的解题思路，但发现有点行不通。下面分析一下二者的区别吧。</p>
<h3 id="螺旋层数loop作为while循环的条件"><a href="#螺旋层数loop作为while循环的条件" class="headerlink" title="螺旋层数loop作为while循环的条件"></a>螺旋层数loop作为while循环的条件</h3><p>把螺旋矩阵的问题简化为一圈循环的问题，包括以下几个部分：</p>
<ul>
<li>从左到右</li>
<li>从上到下</li>
<li>从右向左</li>
<li>从下向上</li>
</ul>
<p>且全部都是前闭后开的循环，也就是说对于数组[[1,2,3,4],[5,6,7,8],[9,10,11,12]]，第一轮是输出1， 2， 3，第二轮是4， 5， 6，7，以此类推。</p>
<p>但是这样的方法更适合用于方阵，因为对于非方矩阵，其最内一层并不是一个螺旋循环，不是很好处理。</p>
<h3 id="规定上下左右边界"><a href="#规定上下左右边界" class="headerlink" title="规定上下左右边界"></a>规定上下左右边界</h3><p>这个地方也是要抽象成上面的四个部分，但是不同的是，他并不把一次完整的四步当作一个loop来进行循环。而是用边界是否交叉来判断是否结束，在每一个单步结束之后都要判断边界的问题，一旦发现边界交叉就break跳出while循环，表明遍历的结束。</p>
<p>并且，这个方法并不使用前闭后开的方式，而是<strong>使用遍历一行结束一行，遍历一列结束一列的方法，因为结束之后才能移动边界</strong>，从而开启新的一行或者一列的遍历。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实对于这两个方法的区别我还想得不是很清楚，但是我认为第二种方法的普适性会更强一些，无论是方阵还是非方阵都可以完整遍历。</p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-3-6【链表-基本操作】</title>
    <url>/2024/03/06/leetcode-2024-3-6/</url>
    <content><![CDATA[<h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a>203. 移除链表元素</h1><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li>列表中的节点数目在范围 <code>[0, 104]</code> 内</li>
<li><code>1 &lt;= Node.val &lt;= 50</code></li>
<li><code>0 &lt;= val &lt;= 50</code></li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>就是注意考虑清楚head需要被移除的情况，其他的都是常规操作。</p>
<p>另外，Java有自动回收机制，不用手动free内存。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution203</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">7</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">7</span>, node1);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">7</span>, node2);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">7</span>, node3);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">7</span>, node4);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">7</span>, node5);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">7</span>, node6);</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> removeElements(head, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> res;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(p.val);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span> &amp;&amp; head.val == val)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val == val) q.next = p.next;</span><br><span class="line">            <span class="keyword">else</span> q = q.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a>707. 设计链表</h1><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>
<p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。</p>
<p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p>
<p>实现 <code>MyLinkedList</code> 类：</p>
<ul>
<li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li>
<li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li>
<li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>
<li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li>
<li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li>
<li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li>
</ul>
<p><strong>示例：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span><br><span class="line">[[], [1], [3], [1, 2], [1], [1], [1]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, null, 2, null, 3]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MyLinkedList myLinkedList = new MyLinkedList();</span><br><span class="line">myLinkedList.addAtHead(1);</span><br><span class="line">myLinkedList.addAtTail(3);</span><br><span class="line">myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 2</span><br><span class="line">myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 3</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= index, val &lt;= 1000</code></li>
<li>请不要使用内置的 LinkedList 库。</li>
<li>调用 <code>get</code>、<code>addAtHead</code>、<code>addAtTail</code>、<code>addAtIndex</code> 和 <code>deleteAtIndex</code> 的次数不超过 <code>2000</code> 。</li>
</ul>
<h2 id="方案一-单链表"><a href="#方案一-单链表" class="headerlink" title="方案一 单链表"></a>方案一 单链表</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution707</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyLinkedList</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line"></span><br><span class="line">        obj.addAtHead(<span class="number">2</span>);</span><br><span class="line">        obj.addAtIndex(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(obj.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedNode</span>&#123;</span><br><span class="line">    LinkedNode next;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedNode</span><span class="params">(<span class="type">int</span> val, LinkedNode next)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    LinkedNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; cnt++ &lt; index) p = p.next;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="literal">null</span>) <span class="keyword">return</span> p.val;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(val, head);</span><br><span class="line">        head = newHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(val, <span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">LinkedNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">while</span>(p.next != <span class="literal">null</span>) p = p.next;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(val, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(head == <span class="literal">null</span>) head = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(val, <span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">else</span> head = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(val, p);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; cnt++ &lt; index - <span class="number">1</span>) p = p.next;</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">LinkedNode</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(val, p.next);</span><br><span class="line">                p.next = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>) head = head.next;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; cnt++ &lt; index - <span class="number">1</span>) p = p.next;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">LinkedNode</span> <span class="variable">q</span> <span class="operator">=</span> p.next;</span><br><span class="line">                <span class="keyword">if</span> (q != <span class="literal">null</span>) p.next = q.next;</span><br><span class="line">                <span class="keyword">else</span> p.next = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(index);</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<p>单链表主要需要考虑清楚各种情况。</p>
<ol>
<li>头部插入<ul>
<li>head是否为空</li>
</ul>
</li>
<li>尾部插入<ul>
<li>head是否为空</li>
</ul>
</li>
<li>index插入<ul>
<li>插在头部还是插在其他地方</li>
<li>head是否为空</li>
</ul>
</li>
<li>index删除<ul>
<li>删除头部结点还是其他结点</li>
<li>head是否为空</li>
</ul>
</li>
</ol>
<h2 id="方案二-双向指针"><a href="#方案二-双向指针" class="headerlink" title="方案二 双向指针"></a>方案二 双向指针</h2><p>就是节点多一个前向指针，链表多一个尾指针，其他的操作大致相似。</p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-3-7【链表-反转和交换】</title>
    <url>/2024/03/07/leetcode-2024-3-7/</url>
    <content><![CDATA[<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h1><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<p><strong>示例 1：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>
<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>
</ul>
<h2 id="方案一-迭代"><a href="#方案一-迭代" class="headerlink" title="方案一 迭代"></a>方案一 迭代</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本思路是创建一个新的链表，然后使用头插法一个一个取出来再放进去</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>) &#123;</span><br><span class="line">            head = p.next;</span><br><span class="line">            p.next = newHead;</span><br><span class="line">            newHead = p;</span><br><span class="line">            p = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-从后向前递归"><a href="#方案二-从后向前递归" class="headerlink" title="方案二 从后向前递归"></a>方案二 从后向前递归</h2><p>还挺复杂的，一开始没做出来，总结一下。</p>
<p>递归主要要考虑的问题就是，把大问题化为一个又一个相同的子问题，且前后有承接关系。</p>
<p>这道题的子问题就是，当其前面的节点已经翻转，如果在这个基础上翻转当前节点。</p>
<p>也就是我们已经获得了一个<code>ListNode newHead = reverseList(head.next);</code>后把当前节点挂在newHead的末尾。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList2</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h1><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>
<p><strong>示例 1：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">4</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>, node1);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>, node2);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>, node3);</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> swapPairs(node4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(node.val);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">preTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pre != <span class="literal">null</span> &amp;&amp; cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(pre == head) head = cur;</span><br><span class="line">            <span class="keyword">else</span> preTail.next = cur;</span><br><span class="line">            preTail = pre;</span><br><span class="line">            pre = pre.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(pre != <span class="literal">null</span>) cur = pre.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-3-8【链表-删除倒n和相交链表】</title>
    <url>/2024/03/08/leetcode-2024-3-8/</url>
    <content><![CDATA[<h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h1><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>示例 1：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li>链表中结点的数目为 <code>sz</code></li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
<h2 id="方案一-计算链表长度"><a href="#方案一-计算链表长度" class="headerlink" title="方案一 计算链表长度"></a>方案一 计算链表长度</h2><p><strong>一种常用的技巧是添加一个哑节点（dummy node），它的next指针指向链表的头节点。这样一来，我们就不需要对头节点进行特殊的判断了。</strong></p>
<p>采用首先遍历链表获得其长度，然后再移除第len-n+1个节点。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        ListNode node1 = new ListNode(4, null);</span></span><br><span class="line"><span class="comment">//        ListNode node2 = new ListNode(3, node1);</span></span><br><span class="line"><span class="comment">//        ListNode node3 = new ListNode(2, node2);</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> removeNthFromEnd(node4, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(node.val);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加一个哑节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        h.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> h;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录长度</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = Math.max(cnt, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> cnt - n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; cnt) <span class="keyword">return</span> head;</span><br><span class="line">        p = h;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; index-- &gt; <span class="number">1</span>) p = p.next;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="literal">null</span> &amp;&amp; p.next != <span class="literal">null</span>) p.next = p.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-双指针"><a href="#方案二-双指针" class="headerlink" title="方案二 双指针"></a>方案二 双指针</h2><p>就是使用两个指针，首先设置两个指针的距离为n，当后指针遍历到链表末尾的时候，前指针正好可以指向被移除的节点。</p>
<p>但是，当指针指向前置节点的时候删除操作更为方便，因此我们就设置两个指针的距离为n+1，当后指针遍历到链表末尾的时候，前指针正好可以指向被移除的节点的前置节点。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ListNode <span class="title function_">removeNthFromEnd2</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    h.next = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">front</span> <span class="operator">=</span> h;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">back</span> <span class="operator">=</span> h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; back != <span class="literal">null</span> &amp;&amp; i &lt;= n; i ++) back = back.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(back !=<span class="literal">null</span>)&#123;</span><br><span class="line">        back = back.next;</span><br><span class="line">        front = front.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(front != <span class="literal">null</span> &amp;&amp; front.next != <span class="literal">null</span>)front.next = front.next.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个中级题感觉没有什么设计算法的难度，主要是借这个题熟悉链表的各种使用，同时引出哑节点这个技巧。</p>
<h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a>160. 相交链表</h1><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>
<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p>
<p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"
                      alt="img"
                ></a></p>
<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>
<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>
<p><strong>自定义评测：</strong></p>
<p><strong>评测系统</strong> 的输入如下（你设计的程序 <strong>不适用</strong> 此输入）：</p>
<ul>
<li><code>intersectVal</code> - 相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li>
<li><code>listA</code> - 第一个链表</li>
<li><code>listB</code> - 第二个链表</li>
<li><code>skipA</code> - 在 <code>listA</code> 中（从头节点开始）跳到交叉节点的节点数</li>
<li><code>skipB</code> - 在 <code>listB</code> 中（从头节点开始）跳到交叉节点的节点数</li>
</ul>
<p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 <strong>视作正确答案</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png"
                      alt="img"
                ></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br><span class="line">— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png"
                      alt="img"
                ></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png"
                      alt="img"
                ></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>listA</code> 中节点数目为 <code>m</code></li>
<li><code>listB</code> 中节点数目为 <code>n</code></li>
<li><code>1 &lt;= m, n &lt;= 3 * 104</code></li>
<li><code>1 &lt;= Node.val &lt;= 105</code></li>
<li><code>0 &lt;= skipA &lt;= m</code></li>
<li><code>0 &lt;= skipB &lt;= n</code></li>
<li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li>
<li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA] == listB[skipB]</code></li>
</ul>
<p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(m + n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p>
<h2 id="方案一-计算长度"><a href="#方案一-计算长度" class="headerlink" title="方案一 计算长度"></a>方案一 计算长度</h2><p>我自己的思路首先想到的是，先遍历两个链表求出二者的长度，然后求出长度差值n。p指向长的链表头，q指向短的链表头，p先后移n，然后pq同步移动，直到p.next &#x3D;&#x3D; q.next，则可以返回p.next。时间复杂度为 <code>O(m + n)</code> ，空间复杂度为 <code>O(1)</code> 。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution160</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, headA);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, headB);</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> dummyA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> dummyB;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cntA</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cntB</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算两个链表的长度</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            cntA ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">null</span>)&#123;</span><br><span class="line">            cntB++;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让p指向更长的链表头部</span></span><br><span class="line">        <span class="keyword">if</span>(cntA &lt; cntB)&#123;</span><br><span class="line">            p = dummyB;</span><br><span class="line">            q = dummyA;</span><br><span class="line">            d = cntB - cntA;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p = dummyA;</span><br><span class="line">            q = dummyB;</span><br><span class="line">            d = cntA - cntB;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; d; i++) p = p.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span> &amp;&amp; p.next != q.next)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p == <span class="literal">null</span> ? <span class="literal">null</span> : p.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-双指针-1"><a href="#方案二-双指针-1" class="headerlink" title="方案二 双指针"></a>方案二 双指针</h2><p>这个思路是从别人的题解中看到的，太牛了。</p>
<p>首先，两条链表从相交点之后的长度是相同的。我们需要做的事情是，让两个链表从同距离末尾同等距离的位置开始遍历。这个位置只能是较短链表的头节点位置。比较形象的做法就是像方案一一样找到长的部分然后让他先移动一下，消除长度差，两个再同步遍历。但那个代码很繁琐。</p>
<p>本方案的思路是：</p>
<ol>
<li>pA指向A头，pB指向B头，都向后遍历。</li>
<li>如果pA到了末尾，则pA &#x3D; headB，继续遍历。</li>
<li>如果pB到了末尾，则pB &#x3D; headA，继续遍历。</li>
<li>长度差消除，即可同步遍历找到相交点。</li>
</ol>
<p>！！！真的有点震惊这个消除长度差的办法。</p>
<ul>
<li>也就是说，pA和pB的差距即为长度差n，假设headA比headB更短。</li>
<li>那么pA首先到达末尾，此时pB还差n个单位才到末尾。</li>
<li>然后，我们让pA指向headB。</li>
<li>我们知道后续pB也一定会指向headA，但是要等他遍历到末尾，也就是在遍历n个单位后。而当pB遍历n个单位后来到headA，pA已经从headB向后遍历了n个单位。</li>
<li><strong>这时，pA用于遍历更长的链表headB，pB用于遍历更短的链表headA。而pA已经向后移动了n个单位，pB刚好指向短链表的头部。</strong></li>
<li>此时二者的长度差就消失了，可以进行同步遍历了。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">getIntersectionNode2</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(headA == <span class="literal">null</span> || headB == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pA</span> <span class="operator">=</span> headA, pB = headB;</span><br><span class="line">    <span class="keyword">while</span>(pA != pB)&#123;</span><br><span class="line">        pA = pA == <span class="literal">null</span> ? headB : pA.next;</span><br><span class="line">        pB = pB == <span class="literal">null</span> ? headB : pB.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-1【哈希表-字母异位词-1】</title>
    <url>/2024/04/01/leetcode-2024-4-1/</url>
    <content><![CDATA[<h1 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a>242. 有效的字母异位词</h1><p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p>
<p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure></div>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li>
<li><code>s</code> 和 <code>t</code> 仅包含小写字母</li>
</ul>
<p><strong>进阶:</strong> 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>基本思路就是用一个hashmap，遇到s字符就+1，遇到t字符就-1，然后看最后hashmap是否为空。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution242</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(isAnagram(s, t));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] sChar = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] tChar = t.toCharArray();</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Character, Integer&gt; chars = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.min(sChar.length, tChar.length);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">            chars.put(sChar[i], chars.getOrDefault(sChar[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            chars.put(tChar[i], chars.getOrDefault(tChar[i], <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(chars.get(sChar[i]) == <span class="number">0</span>) chars.remove(sChar[i]);</span><br><span class="line">            <span class="keyword">if</span>(chars.containsKey(tChar[i]) &amp;&amp; chars.get(tChar[i]) == <span class="number">0</span>) chars.remove(tChar[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt; sChar.length) &#123;</span><br><span class="line">            chars.put(sChar[i], chars.getOrDefault(sChar[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (chars.get(sChar[i]) == <span class="number">0</span>) chars.remove(sChar[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; tChar.length) &#123;</span><br><span class="line">            chars.put(tChar[i], chars.getOrDefault(tChar[i], <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (chars.get(tChar[i]) == <span class="number">0</span>) chars.remove(tChar[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chars.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​	气晕了，没想到效率如此低。但是这个代码真的非常具有对称美哈哈哈哈我很喜欢。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-4-1/image-20240401111641266.png"
                      alt="image-20240401111641266"
                ></p>
<h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>看了一下题解，原来我的思路是对的，只不过受制于先入为主的思想。因为平时一说hash就会想到hashmap，但是实际上hash包含数组、set和map，这道题只有小写字母，一共就26种，所以用数组是很好实现的，根本不用hashmap，hashmap的存储效率低很多。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram2</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] sChar = s.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] tChar = t.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] chars = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.min(sChar.length, tChar.length);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        chars[sChar[i] - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">        chars[tChar[i] - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt; sChar.length)</span><br><span class="line">        chars[sChar[i++] - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; tChar.length)</span><br><span class="line">        chars[tChar[i++] - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chars[j] != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><p>在评论区看到了一个更快捷，代码也更简洁的剪枝版本。减少了一次对chars的循环。如果两个串字符不相等，则s和t分别多了一个字符，那么肯定存在chars中某一个值大于零某一个值小于零，我们只需要关注小于零即可认为不相等了。很巧妙的思路！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram3</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] chars = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray())</span><br><span class="line">        chars[c - <span class="string">&#x27;a&#x27;</span>] +=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : t.toCharArray()) &#123;</span><br><span class="line">        chars[c - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (chars[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h1><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p>
<p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p>
<p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li>
<li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li>
</ul>
<h2 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h2><p>和上题的思路一样的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution383</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(canConstruct(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;aab&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] chars = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : ransomNote.toCharArray())</span><br><span class="line">            chars[c - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray())</span><br><span class="line">            chars[c - <span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> aChar : chars) <span class="keyword">if</span> (aChar &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a>49. 字母异位词分组</h1><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p>
<p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= strs.length &lt;= 104</code></li>
<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>
<li><code>strs[i]</code> 仅包含小写字母</li>
</ul>
<h2 id="方案一-2"><a href="#方案一-2" class="headerlink" title="方案一"></a>方案一</h2><p>对于每一个字符串，都查看map中是否有自己类别的项，有的话就把自己装进其value的list中。</p>
<p>对于如何唯一确定自己的类别，有下面两种思路：</p>
<ul>
<li>排序：一对字母异位词在对其字母进行排序之后一定是相等的。时间复杂度是O(nklogk)，空间复杂度是O(nk)。n是字符串数组的长度，k是最长的字符串的长度。快速排序时间复杂度是klogk。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    HashMap&lt;String, List&lt;String&gt;&gt; strMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : strs)&#123;</span><br><span class="line">        <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> String.valueOf(arr);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; strList = strMap.getOrDefault(tmp, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        strList.add(s);</span><br><span class="line">        strMap.put(tmp, strList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(strMap.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>计数：像上面的办法一样每一次都使用一个hash表进行字符计数。时间复杂度O(n(k + 26))，空间复杂度是O(n(k + 26))。n是字符串数组的长度，k是最长字符串的长度。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams2</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    HashMap&lt;String, List&lt;String&gt;&gt; strMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : strs)&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray())</span><br><span class="line">            arr[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append((<span class="type">char</span>) i + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        List&lt;String&gt; list = strMap.getOrDefault(tmp, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        list.add(s);</span><br><span class="line">        strMap.put(tmp, list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(strMap.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>两个方法本质上没有什么区别，都是通过哈希表进行分类，主要区别在于分类的方式，首先就是找到对比的点，一个是使用排序后的字符串，一个是使用计数后拼接的字符串。因为这两种字符串可以唯一地确定一类字母异位词，因此把他们作为哈希表的key。</p>
<p>和前面的两道题不同的是，前面两道题是采用hash表判断两个字符串是否是字母异位词。</p>
<h2 id="方案二-1"><a href="#方案二-1" class="headerlink" title="方案二"></a>方案二</h2><p>我一开始想的，对每一个s，都使用str[i]遍历字符串数组，对每一个s和str[i]采用上面的<code>isAnagram</code>方法判断一下，如果true的话就把str[i]加入到s的List中，并在另外开辟的标记数组中把flag[i]设为1，表示已经判断过。每一次循环之后就把这个list加入到一个大的list当中。</p>
<p>但这个方法的效率比较低，时间复杂度O(n²(k))，额。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams3</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] flag = <span class="keyword">new</span> <span class="title class_">int</span>[strs.length];</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(strs[i]);</span><br><span class="line">        flag[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; strs.length; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[j] == <span class="number">1</span> || strs[i].length() != strs[j].length()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : strs[i].toCharArray())</span><br><span class="line">                cnt[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : strs[j].toCharArray())&#123;</span><br><span class="line">                cnt[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">                <span class="keyword">if</span> (cnt[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    a = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a) &#123;</span><br><span class="line">                list.add(strs[j]);</span><br><span class="line">                flag[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-2【哈希表-字母异位词-2】</title>
    <url>/2024/04/02/leetcode-2024-4-2/</url>
    <content><![CDATA[<h1 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a>438. 找到字符串中所有字母异位词</h1><p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的 <strong>异位词</strong> 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>
<p><strong>异位词</strong> 指由相同字母重排列形成的字符串（包括相同的字符串）。</p>
<p><strong>示例 1:</strong> </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;</span><br><span class="line">输出: [0,6]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的异位词。</span><br><span class="line">起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的异位词。</span><br></pre></td></tr></table></figure></div>

<p> <strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abab&quot;, p = &quot;ab&quot;</span><br><span class="line">输出: [0,1,2]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class="line">起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class="line">起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length, p.length &lt;= 3 * 104</code></li>
<li><code>s</code> 和 <code>p</code> 仅包含小写字母</li>
</ul>
<h2 id="方案一-遍历"><a href="#方案一-遍历" class="headerlink" title="方案一 遍历"></a>方案一 遍历</h2><p>遍历字符串s：</p>
<ul>
<li>如果不是异位词，则找到不同的字符，从该字符的后一个字符重新开始遍历</li>
<li>如果是异位词，把当前字符的索引加入list</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution438</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(findAnagrams(<span class="string">&quot;abab&quot;</span>, <span class="string">&quot;ab&quot;</span>).toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] schars = s.toCharArray();</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt; s.length() - len + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(schars, i, len);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : s1.toCharArray())</span><br><span class="line">                arr[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : p.toCharArray())</span><br><span class="line">                arr[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line"><span class="comment">//            for (int j = 0; j &lt; 26; j++) &#123;</span></span><br><span class="line"><span class="comment">//                if (arr[j] &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//                    index = s1.indexOf(j + &#x27;a&#x27;) + 1;</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : s1.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[c - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    index = s1.indexOf(c) + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</span><br><span class="line">                res.add(i);</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                i += index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>最坏时间复杂度为O(nm)，nm分别为两字符串的长度。看起来效率很低，可恶可恶，每次都这样！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-4-2/image-20240402102704970.png"
                      alt="image-20240402102704970"
                ></p>
<h2 id="方案二-滑动窗口"><a href="#方案二-滑动窗口" class="headerlink" title="方案二  滑动窗口"></a>方案二  滑动窗口</h2><p>子串匹配就是很适合用滑动窗口，并且滑动窗口的时间复杂度仅为O(n)，先自己写试试。</p>
<p>窗口大小的变换主要看窗口内是否满足要求：</p>
<ul>
<li>如果不满足：遇到符合条件的，则扩大窗口</li>
<li>一旦满足要求：记录当前窗口位置，缩小窗口，使之向后寻找下一个满足要求的窗口位置。</li>
</ul>
<p>本题的满足要求即为<strong>valid &#x3D;&#x3D; need.size()</strong></p>
<p>设i和j两个指针作为窗口的前后指针：</p>
<p>那么，如何判定一个字符是否在p中，可以使用hashMap;</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">findAnagrams2</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    HashMap&lt;Character, Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    HashMap&lt;Character, Integer&gt; need = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : p.toCharArray())</span><br><span class="line">        need.put(c, need.getOrDefault(c, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>[] schars = s.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt; s.length())&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">cur</span> <span class="operator">=</span> schars[j];</span><br><span class="line">        <span class="keyword">if</span> (need.containsKey(cur) &amp;&amp; valid &lt; p.length() &amp;&amp; need.get(cur) &gt; window.getOrDefault(cur, <span class="number">0</span>))&#123;</span><br><span class="line">            window.put(cur, window.getOrDefault(cur, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (window.get(cur).equals(need.get(cur))) valid ++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (j - i &gt;= p.length())&#123;</span><br><span class="line">            <span class="comment">//记录i</span></span><br><span class="line">            <span class="keyword">if</span> (valid == need.size()) res.add(i);</span><br><span class="line">            <span class="comment">//去除i，收缩窗口</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> window.get(schars[i]) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (total &gt; <span class="number">0</span>)</span><br><span class="line">                window.put(schars[i], total);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                window.remove(schars[i]);</span><br><span class="line">            valid --;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!need.containsKey(cur))&#123;</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">            j = i;</span><br><span class="line">            window.clear();</span><br><span class="line">            valid = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i ++;</span><br><span class="line">            j = i;</span><br><span class="line">            window.clear();</span><br><span class="line">            valid = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (valid == need.size())</span><br><span class="line">        res.add(i);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>感觉代码还是很复杂，决定再改一改。</p>
<p>窗口大小的变换主要看窗口大小是否最大：</p>
<ul>
<li>如果不是：遇到符合条件的，则扩大窗口</li>
<li>一旦窗口大小到极致：<ul>
<li>检查valid是否符合要求，若符合，则记录当前窗口位置。</li>
<li>然后缩小窗口，使之向后寻找下一个满足要求的窗口位置。</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">findAnagrams3</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    HashMap&lt;Character, Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    HashMap&lt;Character, Integer&gt; need = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : p.toCharArray())</span><br><span class="line">        need.put(c, need.getOrDefault(c, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(j &lt; s.length())&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">cur</span> <span class="operator">=</span> s.charAt(j++);</span><br><span class="line">        <span class="keyword">if</span> (need.containsKey(cur))&#123;</span><br><span class="line">            window.put(cur, window.getOrDefault(cur, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (window.get(cur).equals(need.get(cur))) valid ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j - i &gt;= p.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (valid == need.size())</span><br><span class="line">                res.add(i);</span><br><span class="line">            <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (need.containsKey(tmp))&#123;</span><br><span class="line">                <span class="keyword">if</span> (need.get(tmp).equals(window.get(tmp)))&#123;</span><br><span class="line">                    valid --;</span><br><span class="line">                &#125;</span><br><span class="line">                window.put(tmp, window.get(tmp) - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>最终这个方法的效率也不是最高的。</p>
<h2 id="方案三-滑动窗口优化"><a href="#方案三-滑动窗口优化" class="headerlink" title="方案三 滑动窗口优化"></a>方案三 滑动窗口优化</h2><p>看了一下官方题解实在是又臭又长，评论区找到了一个很厉害的代码，学习一下。</p>
<p>在方法二的基础上，我们不再分别统计滑动窗口和字符串p中每种字母的数量，而是统计滑动窗口和字符串p中每种字母数量的差；并引入变量differ来记录当前窗口与字符串p中数量不同的字母的个数，并在滑动窗口的过程中维护它。</p>
<p>在判断滑动窗口中每种字母的数量与字符串p中每种字母的数量是否相同时，只需要判断differ是否为零即可。</p>
<p><strong>并且，只有26个字母的情况下，完全可以使用数组进行效率优化。</strong></p>
<p>TAT好抽象，有点只能意会的感觉。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">findAnagrams4</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : p.toCharArray()) cnt[c - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 纳入窗口就--</span></span><br><span class="line"><span class="comment">         * 丢出窗口就++</span></span><br><span class="line"><span class="comment">         * 当窗口大小为0时，保持cnt和初始状态一致。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt; s.length())&#123;</span><br><span class="line">        <span class="comment">//j作为窗口右指针遍历</span></span><br><span class="line">        <span class="keyword">if</span> (cnt[s.charAt(j) - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            cnt[s.charAt(j++) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (j - i == p.length()) res.add(i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cnt[s.charAt(i++) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-13【字符串-KMP】</title>
    <url>/2024/04/13/leetcode-2024-4-13/</url>
    <content><![CDATA[<h1 id="28-找出字符串中第一个匹配项的下标"><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28. 找出字符串中第一个匹配项的下标"></a>28. 找出字符串中第一个匹配项的下标</h1><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= haystack.length, needle.length &lt;= 104</code></li>
<li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li>
</ul>
<h2 id="方案一-KMP"><a href="#方案一-KMP" class="headerlink" title="方案一 KMP"></a>方案一 KMP</h2><p>很典型的KMP算法，我根本就全都忘了。先回顾一下算法的基本思路。</p>
<ol>
<li><strong>求next数组</strong>：next数组是用来标识，当j位匹配不成功时，j应该回溯的到哪一位。</li>
<li><strong>子串匹配</strong></li>
</ol>
<p>其实是很简单的思路，但是<strong>next数组的构造真的特别抽象。</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution28</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(strStr(<span class="string">&quot;mississippi&quot;</span>, <span class="string">&quot;issip&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];</span><br><span class="line">        <span class="comment">//获取next数组</span></span><br><span class="line">        getNext(needle, next);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; haystack.length())&#123;</span><br><span class="line">            <span class="comment">//如果i和j相等，则继续向后比较</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; haystack.length() &amp;&amp; j &lt; needle.length() &amp;&amp; haystack.charAt(i) == needle.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (j == needle.length()) <span class="keyword">return</span> i - j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) i++;</span><br><span class="line">            <span class="keyword">else</span> j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String needle, <span class="type">int</span>[] next)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>, i = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span>[] ch = needle.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化next数组</span></span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为后面j需要++所以这里需要少算一位</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt; ch.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//1. 如果i == -1，说明当前字符前面的字符串没有可以首尾重叠的点，所以next值应该为0，表明，如果当前字符匹配失败，j应该回溯到0开始和主串重新匹配。</span></span><br><span class="line">            <span class="comment">//   即为next[j+1] = i+1;</span></span><br><span class="line">            <span class="comment">//2. 如果ch[i] == ch[j]，说明，基于“0到j-1的字符中有i = next[j]的字符存在首尾匹配(next数组中存的是当前位的前面的字符串的前后缀匹配数)”，</span></span><br><span class="line">            <span class="comment">//   那么当第i+1位字符(即ch[i]，因为ch下标从0开始)和第j+1位字符(即ch[j]，因为ch下标从0开始)相等时，</span></span><br><span class="line">            <span class="comment">//   则可以说明从0到j的字符串中前后匹配的字符个数为next[j]+1，即为i+1，即next[j+1] = i+1</span></span><br><span class="line">            <span class="keyword">if</span> (i == -<span class="number">1</span> || ch[i] == ch[j]) next[++j] = ++i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//否则，就让i回溯，去找上一个next，如果回溯到i == -1，说明当前字符前面没有匹配的。</span></span><br><span class="line">            <span class="keyword">else</span> i = next[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-朴素匹配"><a href="#方案二-朴素匹配" class="headerlink" title="方案二 朴素匹配"></a>方案二 朴素匹配</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">strStr2</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> haystack.length(), n = needle.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + n &lt; m; i++)&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i+j) != needle.charAt(j))&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a>459. 重复的子字符串</h1><p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。 </p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abab&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;ab&quot; 重复两次构成。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;aba&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcabcabc&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;abc&quot; 重复四次构成。 (或子串 &quot;abcabc&quot; 重复两次构成。)</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 由小写英文字母组成</li>
</ul>
<h2 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h2><p>对字符串进行截取，然后判断这个子串是否存在于后续的每一个段中，如果不在的话，那就pass。这个方法显然非常繁琐而且效率很低。然后我就去看答案了TAT。</p>
<h2 id="方案一-移动匹配"><a href="#方案一-移动匹配" class="headerlink" title="方案一 移动匹配"></a>方案一 移动匹配</h2><p>天，根本没想到这个方法，家人。</p>
<p>如果说一个字符串是由A组成的，他是AA，此处A代表一个小字符串，那么将两个这样的字符串拼接起来，就是AA+AA&#x3D;AAAA，这时，修改首尾的A为A1，则变为A1AAA1，这个串中仍然存在一个原字符串AA。</p>
<p>按照这样的思路就可以进行判断了，如果这样操作后，s仍在串中，就说明s是一个重复的子字符串构成的串。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s + s);</span><br><span class="line"></span><br><span class="line">        sb.setCharAt(<span class="number">0</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        sb.setCharAt(sb.length() - <span class="number">1</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> strStr(sb.toString(), s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];</span><br><span class="line">        getNext(needle, next);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; haystack.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; haystack.length() &amp;&amp; j &lt; needle.length() &amp;&amp; haystack.charAt(i) == needle.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (j == needle.length()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) i++;</span><br><span class="line">            <span class="keyword">else</span> j= next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String needle, <span class="type">int</span>[] next)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>, i = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span>[] ch = needle.toCharArray();</span><br><span class="line"></span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j &lt; ch.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == -<span class="number">1</span> || ch[i] == ch[j]) next[++j] = ++i;</span><br><span class="line">            <span class="keyword">else</span> i = next[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-KMP"><a href="#方案二-KMP" class="headerlink" title="方案二 KMP"></a>方案二 KMP</h2><p>假设字符串s使用多个重复子串构成（这个子串是最小重复单位），重复出现的子字符串长度是x，所以<strong>s是由n * x</strong>组成。</p>
<p>因为字符串s的最长相同前后缀的长度<strong>一定是不包含s本身</strong>，所以 最长相同前后缀长度必然是m * x，而且 n - m &#x3D; 1。</p>
<p>所以如果 <strong>nx % (n - m)x &#x3D; 0</strong>，就可以判定有重复出现的子字符串。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        getNext(s, next);</span><br><span class="line">        <span class="type">int</span> <span class="variable">minlen</span> <span class="operator">=</span> len - next[len];</span><br><span class="line">        <span class="keyword">return</span> next[len] &gt; <span class="number">0</span> &amp;&amp; len % minlen == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String s, <span class="type">int</span>[] next)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> -<span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j &lt; ch.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == -<span class="number">1</span> || ch[i] == ch[j]) next[++j] = ++i;</span><br><span class="line">            <span class="keyword">else</span> i = next[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这两个题都很经典，而且一开始我根本想不出来TAT。</p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-3【哈希表-数组交集+快乐数+两数相加】</title>
    <url>/2024/04/03/leetcode-2024-4-3/</url>
    <content><![CDATA[<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h1><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[9,4]</span><br><span class="line">解释：[4,9] 也是可通过的</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution349</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] intersection = intersection(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : intersection) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1000</span>];</span><br><span class="line">        List&lt;Integer&gt; r = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1)</span><br><span class="line">            cnt[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                r.add(i);</span><br><span class="line">                cnt[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[r.size()];</span><br><span class="line">        <span class="keyword">for</span> (Integer i : r) &#123;</span><br><span class="line">            res[j++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a>350. 两个数组的交集 II</h1><p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>
<li>如果 <code>nums1</code> 的大小比 <code>nums2</code> 小，哪种方法更优？</li>
<li>如果 <code>nums2</code> 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>
</ul>
<h2 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution350</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] intersection = intersect(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : intersection) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersect(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        List&lt;Integer&gt; r = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            cnt[i] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                r.add(i);</span><br><span class="line">                cnt[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[r.size()];</span><br><span class="line">        <span class="keyword">for</span> (Integer i : r) &#123;</span><br><span class="line">            res[j++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h1><p>写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>
<p><strong>「快乐数」</strong> 定义为：</p>
<ul>
<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>
<li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li>
<li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li>
</ul>
<p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1（2是平方）</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<h2 id="方案一-2"><a href="#方案一-2" class="headerlink" title="方案一"></a>方案一</h2><p>计算平方是很简单的，但是如何判断非快乐数一定得不到结果为1呢？这个我一直不太明白。后来看题解发现是，非快乐数在计算中一定会落入循环中，比如它们的平方和序列会进入一个固定的循环，例如4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4。</p>
<p>之前有做过类似的题，识别循环可以使用快慢指针，慢指针走一步，快指针走两步，如果二者会相遇的话，那么就存在循环。</p>
<p>该题也可以这样解。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution202</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isHappy(<span class="number">19</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            sum += Math.pow(n % <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> n, fast = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            slow = square(slow);</span><br><span class="line">            fast = square(fast);</span><br><span class="line">            fast = square(fast);</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="number">1</span> || slow == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(slow != fast);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<h2 id="方案一-hashmap"><a href="#方案一-hashmap" class="headerlink" title="方案一 hashmap"></a>方案一 hashmap</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pair</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(pair))&#123;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(pair);</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-4【哈希表-四数相加】</title>
    <url>/2024/04/04/leetcode-2024-4-4/</url>
    <content><![CDATA[<h1 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454. 四数相加 II"></a>454. 四数相加 II</h1><p>四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p>
<ul>
<li><code>0 &lt;= i, j, k, l &lt; n</code></li>
<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>
</ul>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></div>

<p> <strong>提示：</strong></p>
<ul>
<li><code>n == nums1.length</code></li>
<li><code>n == nums2.length</code></li>
<li><code>n == nums3.length</code></li>
<li><code>n == nums4.length</code></li>
<li><code>1 &lt;= n &lt;= 200</code></li>
<li><code>-228 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 228</code></li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>a+b+c+d &#x3D; 0，即a+b &#x3D; -（c+d）</p>
<p>那么，我们可以设置两个map来分别计算a+b和c+d。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution454</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(fourSumCount(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">2</span>, -<span class="number">1</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">2</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; abMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; cdMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k : nums1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> p : nums2)&#123;</span><br><span class="line">                abMap.put(k+p, abMap.getOrDefault(k+p, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k : nums3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> p : nums4)&#123;</span><br><span class="line">                cdMap.put(k+p, cdMap.getOrDefault(k+p, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> sum : cdMap.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (abMap.containsKey(-sum))</span><br><span class="line">                res += (cdMap.get(sum) * abMap.get(-sum));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是因为hashmap存取很慢且时间复杂度为O(n²)，所以效率很低。决定看看题解。</p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-6【哈希表-三数之和】</title>
    <url>/2024/04/06/leetcode-2024-4-6/</url>
    <content><![CDATA[<h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h1><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p>
<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<h2 id="方案一-hash"><a href="#方案一-hash" class="headerlink" title="方案一 hash"></a>方案一 hash</h2><p>一样的是先用一个二次循环把a+b的值存入hashmap，然后再遍历nums数组，看有没有-nums[i]的值，有的话就找到了一个元组。</p>
<p>但是有一个非常难办的事，就是去重。</p>
<ul>
<li>求a+b的时候需要去重，a和b不能来自同一个单位。</li>
<li>找-nums[i]时需要去重，这个值不能和a和b来自同一个单位。</li>
<li>元组也需要去重。</li>
</ul>
<p>前两个点一开始用下标进行去重，如果元组中存入下标的话，那么第三步就自然而然去重了，但是这个题是在元组中存入数值，使用我上面的思路，可能出现下标不同但值相同的两组元组。非常难办，因此我觉得这个方法很可能不适合这个题目。</p>
<h2 id="方案二-双指针"><a href="#方案二-双指针" class="headerlink" title="方案二 双指针"></a>方案二 双指针</h2><p>采用了二分法的思想。</p>
<p>首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。依然还是在数组中找到 abc 使得a+b+c &#x3D;0，我们这里相当于 a &#x3D; nums[i]，b &#x3D; nums[left]，c &#x3D; nums[right]。</p>
<p>接下来如何移动left和right呢</p>
<ul>
<li>如果nums[i] + nums[left] + nums[right] &gt; 0 就说明此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些.</li>
<li>如果 nums[i] + nums[left] + nums[right] &lt; 0 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。</li>
</ul>
<p>时间复杂度：O(n^2)。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = threeSum2(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">4</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : lists) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;[ &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span>(right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>比较难理解的是，去重的部分。其实主要的思路就是，如果接下来的一个值和我刚才处理的值相等，就可能会发生重复。</p>
<p><strong>注意：这个题目是装数值，所以它可以排序，如果是装下标的话，排序就会打乱顺序，就不可以这样做。</strong></p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-7【哈希表-四数之和】</title>
    <url>/2024/04/07/leetcode-2024-4-7/</url>
    <content><![CDATA[<h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h1><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<ul>
<li><code>0 &lt;= a, b, c, d &lt; n</code></li>
<li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li>
<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>
</ul>
<p>你可以按 <strong>任意顺序</strong> 返回答案 。 </p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,2,2,2,2], target = 8</span><br><span class="line">输出：[[2,2,2,2]]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
</ul>
<h2 id="方案一-双指针"><a href="#方案一-双指针" class="headerlink" title="方案一 双指针"></a>方案一 双指针</h2><p>和三数之和的思路是一样的，不过要多套一层循环。时间复杂度O（n三次方）。</p>
<p>提升效率的点主要在剪枝这个方面。下面代码的剪枝效率还不是最高的，还可以再剪，比如</p>
<ul>
<li>从i开始连着的4个都比target大，那么从i开始不会再有四个数的和相加能等于target了。</li>
<li>nums[i]+最后三个都小于target，那么这个i实在太小了，应该试试下一个i。</li>
<li>对j也可以进行一次这样的剪枝。</li>
</ul>
<p>下属代码没有采用这么复杂的方法，懒得改啦。</p>
<p>还有一个小技巧，<strong>当四数之和相加可能会超过int范围的时候，可以强转化成long进行操作。</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution18</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = fourSum(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1000000000</span>,<span class="number">1000000000</span>,<span class="number">1000000000</span>,<span class="number">1000000000</span>&#125;, -<span class="number">294967296</span>);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : lists) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;[ &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">//剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt; target) <span class="keyword">return</span> res;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="comment">//剪枝</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] &gt; <span class="number">0</span> &amp;&amp; nums[i] + nums[j] &gt; target) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum &gt; target)</span><br><span class="line">                        right--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target)</span><br><span class="line">                        left ++;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</span><br><span class="line">                        <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left ++;</span><br><span class="line">                        <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right --;</span><br><span class="line"></span><br><span class="line">                        left ++;</span><br><span class="line">                        right --;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-8【字符串-反转-1】</title>
    <url>/2024/04/08/leetcode-2024-4-8/</url>
    <content><![CDATA[<h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h1><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须**<a class="link"   href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" >原地 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>修改输入数组**、使用 O(1) 的额外空间解决这一问题。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s[i]</code> 都是 <a class="link"   href="https://baike.baidu.com/item/ASCII" >ASCII <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 码表中的可打印字符</li>
</ul>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution344</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] s = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        reverseString(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            System.out.print(c + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len / <span class="number">2</span> ; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> s[i];</span><br><span class="line">            s[i] = s[len - i - <span class="number">1</span>];</span><br><span class="line">            s[len - i - <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541. 反转字符串 II"></a>541. 反转字符串 II</h1><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p>
<ul>
<li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li>
<li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li>
</ul>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, k = 2</span><br><span class="line">输出：&quot;bacd&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由小写英文组成</li>
<li><code>1 &lt;= k &lt;= 104</code></li>
</ul>
<h2 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h2><p>基本思路就是基本思路，就是感觉没有什么特别的地方。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution541</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(reverseStr(<span class="string">&quot;abcdefg&quot;</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> chars.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (len - begin &gt;= <span class="number">2</span> * k &amp;&amp; (i + <span class="number">1</span>) % (<span class="number">2</span> * k) == <span class="number">0</span>) &#123;</span><br><span class="line">                end = i - k;</span><br><span class="line">                reverseString(chars, begin, end);</span><br><span class="line">                begin = i + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (len - begin &lt; <span class="number">2</span> * k &amp;&amp; len - begin &gt;= k)&#123;</span><br><span class="line">                end = begin + k - <span class="number">1</span>;</span><br><span class="line">                reverseString(chars, begin, end);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (len - begin &lt; k)&#123;</span><br><span class="line">                end = len - <span class="number">1</span>;</span><br><span class="line">                reverseString(chars, begin, end);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (begin + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin, j = end; i &lt;= mid ; i++, j--) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> s[i];</span><br><span class="line">            s[i] = s[j];</span><br><span class="line">            s[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方案二-代码优化"><a href="#方案二-代码优化" class="headerlink" title="方案二 代码优化"></a>方案二 代码优化</h2><p>优化的点有以下几个：</p>
<ul>
<li>i不需要每一个值都遍历，我们只需要每隔2k判断一次即可</li>
<li>方案一是考虑，每找到一个2k，就回头。这样的话就会剩下一部分长度小于2k的。然而方案二只需要从当前的i往后看，如果后面长度大于k就翻转前k，如果后面的小于k就全部反转，一次跳2k步。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution541</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(reverseStr(<span class="string">&quot;abcdefg&quot;</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> chars.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i += (<span class="number">2</span> * k)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + k - <span class="number">1</span> &lt; len)</span><br><span class="line">                reverseString(chars, i, i + k - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                reverseString(chars, i, len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(begin &lt; end)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> s[begin];</span><br><span class="line">            s[begin++] = s[end];</span><br><span class="line">            s[end--] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-代码随想录哈希表总结</title>
    <url>/2024/04/07/leetcode-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="哈希表总结篇"><a href="#哈希表总结篇" class="headerlink" title="哈希表总结篇"></a>哈希表总结篇</h1><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>以前以为只有hashmap是哈希表，现在才知道原来最最基础的数组也是一种哈希表。</p>
<p>哈希函数是把传入的key映射到符号表的索引上。</p>
<p>哈希碰撞处理有多个key映射到相同索引上时的情景，处理碰撞的普遍方式是拉链法和线性探测法。</p>
<p>常见的哈希结构有数组、set、map。</p>
<h2 id="1-数组作为哈希表"><a href="#1-数组作为哈希表" class="headerlink" title="1. 数组作为哈希表"></a>1. 数组作为哈希表</h2><p>包含小写字母的，对存取效率要求很高的题目就很适合用数组。但要记住，<strong>数组的大小不可变且受限。</strong></p>
<p>使用数组做的题目当然都可以用map来做，但是map要维护红黑树或者符号表，还要进行哈希函数的运算，所以空间时间效率都比不上数组。</p>
<h2 id="2-set作为哈希表"><a href="#2-set作为哈希表" class="headerlink" title="2. set作为哈希表"></a>2. set作为哈希表</h2><p>当题目中的数值不限定大小的时候，我们无法使用数组进行归类，只能使用set或者map，而set是自动去重的。需要去重的数据很适合用set进行操作。</p>
<h2 id="3-map作为哈希表"><a href="#3-map作为哈希表" class="headerlink" title="3. map作为哈希表"></a>3. map作为哈希表</h2><p>数组和set的局限：</p>
<ul>
<li>数组大小受限，如果元素很少而哈希值太大会造成内存空间的浪费。</li>
<li>set是一个集合，里面放的元素只能是一个key而不是key-value。</li>
</ul>
<p>所以在不适合使用上述两种结构的时候，map是很好的选择。</p>
<p>然而，map也有难以处理的情况，比如三数之和、四数之和这两个题，不仅需要考虑key和value，还要去重。因此这两个题目都更推荐使用双指针法。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-代码随想录字符串总结</title>
    <url>/2024/04/13/leetcode-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h1><p>在字符串反转里面使用了双指针法进行操作。 </p>
<p><strong>其实很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></p>
<p>那么针对数组删除操作的问题，其实在27. 移除元素中就已经提到了使用双指针法进行移除操作。</p>
<p>同样的道理在151.翻转字符串里的单词中我们使用O(n)的时间复杂度，完成了删除冗余空格。</p>
<p>使用for循环里调用库函数erase来移除元素其实是O(n^2)的操作，因为erase就是O(n)的操作，所以这也是典型的不知道库函数的时间复杂度，上来就用的案例了。</p>
<h1 id="反转系列"><a href="#反转系列" class="headerlink" title="反转系列"></a>反转系列</h1><p>在反转上还可以在加一些玩法，其实考察的是对代码的掌控能力。</p>
<p>在541.反转字符串II中，一些同学可能为了处理逻辑：<strong>每隔2k个字符的前k的字符，写了一堆逻辑代码或者再搞一个计数器，来统计2k，再统计前k个字符【我一开始就是这样写的，看看人家怎么优化的！！！】</strong>。</p>
<p>其实<strong>当需要固定规律一段一段去处理字符串的时候，要想想在在for循环的表达式上做做文章。只要让 i +&#x3D; (2 * k)，i 每次移动 2 * k 就可以了，然后判断是否需要有反转的区间。因为要找的也就是每2 * k 区间的起点，这样写程序会高效很多</strong>。</p>
<p>在151.翻转字符串里的单词中要求翻转字符串里的单词，这道题目可以说是综合考察了字符串的多种操作。是考察字符串的好题。</p>
<p>这道题目通过 <strong>先整体反转再局部反转</strong>，实现了反转字符串里的单词。后来发现反转字符串还有一个牛逼的用处，就是达到左旋的效果。</p>
<p>在”字符串：反转个字符串还有这个用处？”中，我们通过<strong>先局部反转再整体反转</strong>达到了左旋的效果。</p>
<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p>
<p>前缀表：起始位置到下标i之前（包括i）的子串中，有多大长度的相同前缀后缀。</p>
<p>那么使用KMP可以解决两类经典问题：</p>
<ol>
<li>匹配问题：28. 实现 strStr()</li>
<li>重复子串问题：459.重复的子字符串</li>
</ol>
<p>再一次强调了什么是前缀，什么是后缀，什么又是最长相等前后缀。</p>
<ul>
<li>前缀：指不包含最后一个字符的所有以第一个字符开头的连续子串。</li>
<li>后缀：指不包含第一个字符的所有以最后一个字符结尾的连续子串。</li>
</ul>
<p>然后<strong>针对前缀表到底要不要减一，这其实是不同KMP实现的方式</strong>。其中主要<strong>理解j&#x3D;next[x]这一步最为关键！</strong></p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode - 代码随想录双指针法总结</title>
    <url>/2024/04/13/leetcode-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="数组篇"><a href="#数组篇" class="headerlink" title="数组篇"></a>数组篇</h1><p>原地移除数组上的元素，我们说到了数组上的元素，不能真正的删除，只能覆盖。</p>
<p>一些同学可能会写出如下代码（伪代码）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] == target) &#123;</span><br><span class="line">        array.erase(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个代码看上去好像是O(n)的时间复杂度，其实是O(n^2)的时间复杂度，因为erase操作也是O(n)的操作。</p>
<p>所以此时使用双指针法才展现出效率的优势：<strong>通过两个指针在一个for循环下完成两个for循环的工作。</strong></p>
<p>两个指针就是：</p>
<ul>
<li>慢指针指向下一个要填入的位置</li>
<li>快指针指向下一个要被填入慢指针位置的值</li>
</ul>
<h1 id="字符串篇"><a href="#字符串篇" class="headerlink" title="字符串篇"></a>字符串篇</h1><p>使用双指针法，<strong>定义两个指针（也可以说是索引下标），一个从字符串前面，一个从字符串后面，两个指针同时向中间移动，并交换元素。</strong>，时间复杂度是O(n)。</p>
<p>在替换空格中介绍使用双指针填充字符串的方法，如果想把这道题目做到极致，就不要只用额外的辅助空间了！</p>
<p>思路就是<strong>首先扩充数组到每个空格替换成”%20”之后的大小。然后双指针从后向前替换空格。</strong></p>
<p><strong>其实很多数组（字符串）填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></p>
<p>那么在字符串：花式反转还不够！中，我们使用双指针法，用O(n)的时间复杂度完成字符串删除类的操作，因为题目要删除冗余空格。</p>
<p><strong>在删除冗余空格的过程中，如果不注意代码效率，很容易写成了O(n^2)的时间复杂度。其实使用双指针法O(n)就可以搞定。主要还是大家用erase用的比较随意，一定要注意for循环下用erase的情况，一般可以用双指针写效率更高</strong></p>
<h1 id="链表篇"><a href="#链表篇" class="headerlink" title="链表篇"></a>链表篇</h1><p><strong>翻转链表是现场面试，白纸写代码的好题，考察了候选者对链表以及指针的熟悉程度，而且代码也不长，适合在白纸上写。</strong></p>
<p>在链表：听说过两天反转链表又写不出来了？中，讲如何使用双指针法来翻转链表，<strong>只需要改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</strong></p>
<p>思路还是很简单的，代码也不长，但是想在白纸上一次性写出bugfree的代码，并不是容易的事情。</p>
<p>在链表中求环，应该是双指针在链表里最经典的应用，在链表：环找到了，那入口呢？中讲解了如何通过双指针判断是否有环，而且还要找到环的入口。</p>
<p><strong>使用快慢指针（双指针法），分别定义 fast 和 slow指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。</strong></p>
<p>那么找到环的入口，其实需要点简单的数学推理，我在文章中把找环的入口清清楚楚的推理的一遍，如果对找环入口不够清楚的同学建议自己看一看链表：环找到了，那入口呢？。</p>
<h1 id="N数之和篇"><a href="#N数之和篇" class="headerlink" title="N数之和篇"></a>N数之和篇</h1><p>在哈希表：解决了两数之和，那么能解决三数之和么？中，讲到使用哈希法可以解决1.两数之和的问题</p>
<p>其实使用双指针也可以解决1.两数之和的问题，只不过1.两数之和求的是两个元素的下标，没法用双指针，如果改成求具体两个元素的数值就可以了，大家可以尝试用双指针做一个leetcode上两数之和的题目，就可以体会到我说的意思了。</p>
<p>使用了哈希法解决了两数之和，但是哈希法并不适用于三数之和！使用哈希法的过程中要把符合条件的三元组放进vector中，然后在去去重，这样是非常费时的，很容易超时，也是三数之和通过率如此之低的根源所在。去重的过程不好处理，有很多小细节，如果在面试中很难想到位。时间复杂度可以做到O(n^2)，但还是比较费时的，因为不好做剪枝操作。</p>
<p>所以这道题目使用双指针法才是最为合适的，用双指针做这道题目才能就能真正体会到，<strong>通过前后两个指针不算向中间逼近，在一个for循环下完成两个for循环的工作。</strong></p>
<p>只用双指针法时间复杂度为O(n^2)，但比哈希法的O(n2)效率高得多，哈希法在使用两层for循环的时候，能做的剪枝操作很有限。</p>
<p>在双指针法：一样的道理，能解决四数之和中，讲到了四数之和，其实思路是一样的，<strong>在三数之和的基础上再套一层for循环，依然是使用双指针法。</strong>对于三数之和使用双指针法就是将原本暴力O(n^3)的解法，降为O(n2)的解法，四数之和的双指针解法就是将原本暴力O(n4)的解法，降为O(n3)的解法。同样的道理，五数之和，n数之和都是在这个基础上累加。</p>
<p><strong>【注意：这里的双指针法实际上是先排序再沿用了二分法的思想，虽然也是使用了两个指针，但是和前面的快慢指针、首尾指针以及窗口双指针法有本质区别】</strong></p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-代码随想录数组总结</title>
    <url>/2024/03/05/leetcode-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="数组总结篇"><a href="#数组总结篇" class="headerlink" title="数组总结篇"></a>数组总结篇</h1><p>跟着代码随想录把数组的典型例题都刷了一遍，相似的题目也都刷了，这篇博客来总结一下各种典型的题目和方法。</p>
<h2 id="1-二分法"><a href="#1-二分法" class="headerlink" title="1. 二分法"></a>1. 二分法</h2><p>使用二分法有两个前提：</p>
<ol>
<li>有序</li>
<li>无重复元素</li>
</ol>
<p>感觉代码随想录里面写的什么原则之类的给我绕晕了，我还是就从简单的角度来理解二分法吧。目前我的理解就是，在有序且无重复的序列中查找确定值或者区间值，比如查找值为7的数、查找和最接近15的区间、查找大于10的最小的数。这类查找都可以使用二分法而让效率变得更高。</p>
<h2 id="2-双指针"><a href="#2-双指针" class="headerlink" title="2. 双指针"></a>2. 双指针</h2><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p><strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作</strong></p>
<p>通常这个方法适用于在原数组中移除元素，首先我们需要知道数组是不能删除单个元素的，只能覆盖。因为数组是一串连续的地址，不能从中间释放某一个单位。因此我们只能重新调整元素的位置以实现想要的元素在前面，不想要的元素在后面的假性删除。</p>
<p>快慢指针很适合用于这种要求：</p>
<ul>
<li>快指针：用于遍历数组，从而选择下一个要放置的元素</li>
<li>慢指针：指向下一个元素要放置的位置</li>
</ul>
<h3 id="前后指针"><a href="#前后指针" class="headerlink" title="前后指针"></a>前后指针</h3><p>这个方法实际上是我做题的时候自己想到的，适用性并没有很广泛（目前看来）。我的灵感是来自于快速排序，前后指针分别去找合适的值，然后进行前后调换。比如说题目283，要求把0移动到数组的末尾，那么我们就可以利用快排的思想，利用前后指针交换，把非0值移动到左侧，0值移动到右侧。</p>
<p><strong>【这里其实我还有一个疑问，因为前后指针交换是不能保证相同类型元素的相对位置不变的，比如在快排中，相同的两个3可能改变相对位置；同理，在移除0的过程中，非0值的相对位置也会发生改变，但不知道为什么这个题目可以这样做。】</strong></p>
<h2 id="3-滑动窗口"><a href="#3-滑动窗口" class="headerlink" title="3. 滑动窗口"></a>3. 滑动窗口</h2><p>这个思想真的好牛，只能说狠狠学到了。</p>
<p><strong>滑动窗口的精妙之处在于根据当前序列和大小的情况，不断调节子序列的起始位置，从而降低时间复杂度。</strong></p>
<p>最主要的是要找到：</p>
<ul>
<li>窗口起始位置改变的条件<ul>
<li>窗口满足要求</li>
<li>消除垃圾元素</li>
<li>去除重复</li>
</ul>
</li>
</ul>
<h2 id="4-模拟行为"><a href="#4-模拟行为" class="headerlink" title="4. 模拟行为"></a>4. 模拟行为</h2><p>就是最后写的螺旋数组这一类题目了</p>
<p>要点：</p>
<ul>
<li>数组分为方阵和非方阵</li>
<li>无论以何种方式遍历数组都要找到相应的边界（可能是动态或者非动态的边界）</li>
</ul>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-代码随想录链表总结</title>
    <url>/2024/03/10/leetcode-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="链表总结篇"><a href="#链表总结篇" class="headerlink" title="链表总结篇"></a>链表总结篇</h1><h2 id="链表分类"><a href="#链表分类" class="headerlink" title="链表分类"></a>链表分类</h2><p>基本上分为单链表、双链表和循环链表三类。</p>
<h2 id="哑节点"><a href="#哑节点" class="headerlink" title="哑节点"></a>哑节点</h2><p>对于链表来说，必须要针对节点进行操作，如果是一个空链表或者说是单链表对头节点进行操作，操作和其他的的情况比起来就要麻烦一些，需要另外判断。但是针对链表的操作非常多，如果每个地方都要进行这样的判断，就多了很多不必要的代码。</p>
<p>因此在对链表进行操作之前，在其头前面加一个哑节点，我们就可以确保链表中每一个有效节点之前都有一个节点，且该链表一定非空。对于每一个有效节点的操作都可以保持一致了。哑节点并不是有效节点，它仅仅用来方便我们的操作。</p>
<h2 id="链表基本操作"><a href="#链表基本操作" class="headerlink" title="链表基本操作"></a>链表基本操作</h2><ul>
<li><p>获取第index个节点的值</p>
<ul>
<li>单链表：遍历O(n)</li>
<li>双链表：遍历O(n)</li>
</ul>
</li>
<li><p>头插法</p>
<ul>
<li>单链表和双链表都是O(1)</li>
</ul>
</li>
<li><p>尾插法</p>
<ul>
<li>单链表O(n)</li>
<li>双链表O(1)</li>
</ul>
</li>
<li><p>在第index节点的前面插入一个节点</p>
<ul>
<li>单链表：遍历到index节点的前两个位置O(n)</li>
<li>双链表：遍历到index节点O(n)</li>
</ul>
</li>
<li><p>删除第index节点</p>
<ul>
<li>单双链表都是O(n)</li>
</ul>
</li>
</ul>
<h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p><strong>迭代</strong>基本思想就是双指针法，从前往后一个一个反转。</p>
<p><strong>递归</strong>有两种方法，一种是从前向后翻转，一种是从后向前。</p>
<ol>
<li>从后向前：使用head.next进行遍历。考虑，当后面的节点已经翻转的情况下，如何翻转当前节点。</li>
<li>从前向后：添加一个指向当前节点的指针cur，用指针进行从前向后的遍历。</li>
</ol>
<h2 id="删除倒数第N个节点"><a href="#删除倒数第N个节点" class="headerlink" title="删除倒数第N个节点"></a>删除倒数第N个节点</h2><p>这道题的思路主要是使用两个指针，然后保持二者距离为N，则当前指针到达链表末尾时，后指针即为倒数第n节点。</p>
<h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><p>这道题也是用双指针解决的，可见双指针的思路是多么重要。该题的关键是意识到两条链表<strong>从相交点之后长度都一样</strong>这一点，所以最主要的一点是消除两条链表的长度差，然后让双指针同步向后移动，二者指向同一节点时，该节点即为相交节点。</p>
<p>消除长度差其实就是找到长度差n，两种方法：</p>
<ol>
<li>傻瓜法：先遍历两条链表找到二者的长度，相减即可找到n。</li>
<li>聪明法：设置两个指针pA和pB分别指向两条链表【此处假设pA为长链表指针，pB为短链表指针】，当pB到达链表末尾时，pA还差n步才达到链表末尾。<strong>此时就已经找到n了，但这并不是一个具体数值，我们还要让他体现在链表首部</strong>。则让pB去指向长链表头部。然后两指针继续向后遍历，当pA遍历到链表末尾时，两指针都已经向后走了n步，让pA再指向短链表头部。此时，pA指向短链表头部，pB指向长链表第n个节点，找到n且已消除。</li>
</ol>
<p>该题一样是保持双指针间隔为n，但是这个n并不像上题一样直接给出，而是一个抽象的需要通过题目来计算得出。傻瓜法是直接求得n的值再操作，虽然繁琐但是思路简单清晰，聪明法并不直接求出n的值，而是直接让双指针通过别的办法间隔n再把这个间隔转移到链表首部，代码简洁但是思路比较难。都要掌握。</p>
<h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>这个题没有做过的话基本上没什么思路。很像高中物理追击问题。把题目抽象出来看，该题依然是要找一个从链表头部到环入口的间隔a。与前两个题不同的是：</p>
<ul>
<li>a没有直接给出</li>
<li>a无法用傻瓜法求出具体的值</li>
</ul>
<p>那么就需要采用聪明法，设置两个指针，<strong>找到两个指针能够同步移动的条件。</strong>上题是消除长度差，而该题更复杂，需要使用一定的数学分析。</p>
<p>对于一个长度为a+b的环形链表（a为单链表，b为环），首先对环入口点进行分析：</p>
<ul>
<li>从head走a步可以到达环入口</li>
<li><strong>从head走a+tb步也可以到达环入口</strong>（t为正整数）</li>
</ul>
<p>设置两个指针fast和slow对其进行遍历，fast步长为2，slow步长为1。如果存在环，则二者一定会相遇。相遇时可以通过二者走过的节点长度列方程如下：</p>
<ul>
<li>f &#x3D; 2s</li>
<li>f &#x3D; s + nb</li>
</ul>
<p>其中n为f比s走得更多环的圈数。</p>
<p>解方程可得s &#x3D; nb，f &#x3D; 2nb。此时n一定是0或者正整数，那么s和head已经具备同步后移的条件了，因为s和head同时向后走a步都能到达环入口。</p>
]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>nowcoder-Java专项错题【持续更新】</title>
    <url>/2023/12/17/nowcoder-Java%E4%B8%93%E9%A1%B9%E9%94%99%E9%A2%98/</url>
    <content><![CDATA[<h2 id="Java综合概念"><a href="#Java综合概念" class="headerlink" title="Java综合概念"></a>Java综合概念</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul>
<li>Java只支持单继承，也就是说一个儿子只能有一个父亲，但是一个父亲可以有多个儿子。</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul>
<li>Java可以实现多个接口</li>
<li>接口没有构造方法，不可以进行实例化</li>
<li>不能定义普通成员变量，但是可以定义静态成员变量，需要用static final public来修饰</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>抽象类不能被实例化，虽然他有构造方法，但是仅使用来进行初始化，而不是实例化</li>
<li>可以定义普通成员变量和静态成员变量</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/nowcoder-Java%E4%B8%93%E9%A1%B9%E9%94%99%E9%A2%98/image-20231217165918024.png"
                      alt="image-20231217165918024"
                ></p>
<h2 id="Java关键字继承"><a href="#Java关键字继承" class="headerlink" title="Java关键字继承"></a>Java关键字继承</h2><h3 id="权限修饰符问题"><a href="#权限修饰符问题" class="headerlink" title="权限修饰符问题"></a>权限修饰符问题</h3><p>public&gt;protected&gt;默认(包访问权限)&gt;private</p>
<p>因为protected除了可以被同一包访问，还可以被包外的子类所访问</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/nowcoder-Java%E4%B8%93%E9%A1%B9%E9%94%99%E9%A2%98/image-20231217165554786.png"
                      alt="image-20231217165554786"
                ></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="split字符串分割方法"><a href="#split字符串分割方法" class="headerlink" title="split字符串分割方法"></a>split字符串分割方法</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/nowcoder-Java%E4%B8%93%E9%A1%B9%E9%94%99%E9%A2%98/image-20231217165759363.png"
                      alt="image-20231217165759363"
                ></p>
<p>String split 这个方法默认返回一个数组，如果没有找到分隔符，会把整个字符串当成一个长度为1的字符串数组返回到结果， 所以此处结果就是1。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**  * String split 这个方法默认返回一个数组，  * 如果没有找到分隔符，  * 会把整个字符串当成一个长度为1的字符串数组  * 返回到结果， 所以此处结果就是1  */</span>  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSpringSpilte</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;12,3&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        System.out.print(str.split(<span class="string">&quot;,&quot;</span>).length);</span><br><span class="line">        System.out.print(str2.split(<span class="string">&quot;,&quot;</span>).length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">2</span>， <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-2024-4-9【字符串-反转-2】</title>
    <url>/2024/04/09/leetcode-2024-4-9/</url>
    <content><![CDATA[<h1 id="151-反转字符串中的单词"><a href="#151-反转字符串中的单词" class="headerlink" title="151. 反转字符串中的单词"></a>151. 反转字符串中的单词</h1><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p>
<p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p>
<p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p>
<p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：反转后的字符串中不能存在前导空格和尾随空格。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a good   example&quot;</span><br><span class="line">输出：&quot;example good a&quot;</span><br><span class="line">解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 包含英文大小写字母、数字和空格 <code>&#39; &#39;</code></li>
<li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li>
</ul>
<p><strong>进阶：</strong>如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 <code>O(1)</code> 额外空间复杂度的 <strong>原地</strong> 解法。</p>
<h2 id="方案一-开辟新数组"><a href="#方案一-开辟新数组" class="headerlink" title="方案一 开辟新数组"></a>方案一 开辟新数组</h2><p>时间复杂度O(n)，空间复杂度O(n)。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution151</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(reverseWords(<span class="string">&quot;a good   example&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>, end = s.length() -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 除去首尾不必要的空格</span></span><br><span class="line">        <span class="keyword">while</span> (s.charAt(begin) == <span class="string">&#x27; &#x27;</span>) begin ++;</span><br><span class="line">        <span class="keyword">while</span> (s.charAt(end) == <span class="string">&#x27; &#x27;</span>) end --;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] str = s.substring(begin, end+<span class="number">1</span>).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27; &#x27;</span> &amp;&amp; str[i] == str[i+<span class="number">1</span>]) len --;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(len);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] newS = <span class="keyword">new</span> <span class="title class_">char</span>[len];</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(str));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> <span class="number">0</span>, oldI = str.length- <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (newI &lt; len)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">endI</span> <span class="operator">=</span> oldI;</span><br><span class="line">            <span class="keyword">while</span>(str[oldI] != <span class="string">&#x27; &#x27;</span> &amp;&amp; oldI &gt; <span class="number">0</span>) oldI--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (oldI == <span class="number">0</span> ? oldI : oldI+<span class="number">1</span>); i &lt;= endI ; i++)</span><br><span class="line">                newS[newI++] = str[i];</span><br><span class="line">            <span class="keyword">if</span> (oldI != <span class="number">0</span>) newS[newI++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span>(str[oldI] == <span class="string">&#x27; &#x27;</span> &amp;&amp; oldI &gt; <span class="number">0</span>) oldI--;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(newS));</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(newS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-4-9/image-20240409112749130.png"
                      alt="image-20240409112749130"
                ></p>
<h2 id="方案二-双重翻转"><a href="#方案二-双重翻转" class="headerlink" title="方案二 双重翻转"></a>方案二 双重翻转</h2><p>先翻转整体再翻转局部，时间复杂度O(n²)，空间复杂度O(1)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(reverseWords2(<span class="string">&quot;a good   example&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseWords2</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 去除不必要的空格</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> eraseBlankSpace(s);</span><br><span class="line">    <span class="comment">//        System.out.println(sb);</span></span><br><span class="line">    <span class="comment">//2. 整体翻转</span></span><br><span class="line">    reverseString(sb, <span class="number">0</span>, sb.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//        System.out.println(sb);</span></span><br><span class="line">    <span class="comment">//3. 局部翻转</span></span><br><span class="line">    reverseStr(sb);</span><br><span class="line">    <span class="comment">//        System.out.println(sb);</span></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseStr</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;sb.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sb.charAt(i) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            reverseString(sb, start, i - <span class="number">1</span>);</span><br><span class="line">            start = i + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == sb.length() - <span class="number">1</span>)&#123;</span><br><span class="line">            reverseString(sb, start, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(StringBuilder sb, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> sb.charAt(start);</span><br><span class="line">        sb.setCharAt(start++,sb.charAt(end));</span><br><span class="line">        sb.setCharAt(end--, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//        sb.reverse();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title function_">eraseBlankSpace</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>, end = s.length() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(begin &lt; s.length() &amp;&amp; s.charAt(begin) == <span class="string">&#x27; &#x27;</span>) begin++;</span><br><span class="line">    <span class="keyword">while</span>(end &gt;= <span class="number">0</span> &amp;&amp; s.charAt(end) == <span class="string">&#x27; &#x27;</span>) end --;</span><br><span class="line">    <span class="type">char</span>[] str = s.substring(begin, end+<span class="number">1</span>).toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; str.length)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; j &lt; str.length &amp;&amp; str[j] == <span class="string">&#x27; &#x27;</span> &amp;&amp; str[j] == str[j-<span class="number">1</span>]) j++;</span><br><span class="line">        sb.append(str[j++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/leetcode-2024-4-9/image-20240409112656292.png"
                      alt="image-20240409112656292"
                ></p>
<h1 id="右旋字符串"><a href="#右旋字符串" class="headerlink" title="右旋字符串"></a>右旋字符串</h1><p><a class="link"   href="https://kamacoder.com/problempage.php?pid=1065" >卡码网题目链接(opens new window) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>字符串的右旋转操作是把字符串尾部的若干个字符转移到字符串的前面。给定一个字符串 s 和一个正整数 k，请编写一个函数，将字符串中的后面 k 个字符移到字符串的前面，实现字符串的右旋转操作。</p>
<p>例如，对于输入字符串 “abcdefg” 和整数 2，函数应该将其转换为 “fgabcde”。</p>
<p>输入：输入共包含两行，第一行为一个正整数 k，代表右旋转的位数。第二行为字符串 s，代表需要旋转的字符串。</p>
<p>输出：输出共一行，为进行了右旋转操作后的字符串。</p>
<p>样例输入：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">abcdefg </span><br></pre></td></tr></table></figure></div>

<p>样例输出：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">fgabcde</span><br></pre></td></tr></table></figure></div>

<p>数据范围：1 &lt;&#x3D; k &lt; 10000, 1 &lt;&#x3D; s.length &lt; 10000;</p>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>反转再反转</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Kama55</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, cnt - <span class="number">1</span>);</span><br><span class="line">        reverseString(sb, cnt, s.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sb);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(StringBuilder s, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> s.charAt(start);</span><br><span class="line">            s.setCharAt(start++, s.charAt(end));</span><br><span class="line">            s.setCharAt(end--, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <tags>
        <tag>leetcode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet-3(HttpServletResponse&amp;HttpServletRequest)</title>
    <url>/2023/11/02/servlet-3/</url>
    <content><![CDATA[<p>servlet有两个非常重要的参数，我们常常写作req和resp，其实就是HttpServletResponse和HttpServletRequest，本篇对这两个对象做一些简单的介绍。</p>
<p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse； </p>
<p>如果要获取客户端请求过来的参数：找HttpServletRequest </p>
<p>如果要给客户端响应一些信息：找HttpServletResponse</p>
<h2 id="1、HttpServletResponse"><a href="#1、HttpServletResponse" class="headerlink" title="1、HttpServletResponse"></a>1、HttpServletResponse</h2><p>这是响应对象，用于Servlet向客户端发送服务器的响应，其中可以设置相关的响应参数。</p>
<p>查看源码后可以发现一些输出方式：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure></div>

<p>一些可以设置的值：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String var1)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLength</span><span class="params">(<span class="type">int</span> var1)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLengthLong</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String var1)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addHeader</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;</span><br></pre></td></tr></table></figure></div>

<p>接下来主要以Demo形式对则个对象进行了解。</p>
<h3 id="文件下载Demo"><a href="#文件下载Demo" class="headerlink" title="文件下载Demo"></a>文件下载Demo</h3><p>首先需要过一遍文件下载的原理：把一个服务器上的文件通过Servlet发送到客户端然后让他能够成功下载。</p>
<ol>
<li>文件路径是什么</li>
<li>设置下载的文件名</li>
<li>设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件 名URLEncoder.encode编码，否则有可能乱码</li>
<li>开通一个下载文件的输入流InputStream</li>
<li>创建一个buffer缓存区</li>
<li>在Servlet中用InputStream把文件内容写到buffer中</li>
<li>获取响应输出流ServletOutputStream</li>
<li>把buffer中的东西写到输出流中</li>
</ol>
<p>doGet代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//  1. 文件路径是什么，因为代码套了很多层，所以相对路径不好处理，建议使用绝对路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;F:\\Java-Learning\\JavaWorkstation\\servlet\\servlet-03\\src\\main\\resources\\img.png&quot;</span>;</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        <span class="comment">//  2. 设置下载的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;\\&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//  3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件 名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span>+ URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//  4. 开通一个下载文件的输入流FileInputStream</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">        <span class="comment">//  5. 创建一个buffer缓存区</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//  6. 获取响应输出流ServletOutputStream</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        <span class="comment">//  7. 在Servlet中用InputStream把文件内容写到buffer中，并把buffer中的东西写到输出流中</span></span><br><span class="line">        <span class="keyword">while</span>((len = is.read(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写验证码"><a href="#编写验证码" class="headerlink" title="编写验证码"></a>编写验证码</h3><p>主要的思路就是使用ImageIO.write(image,”jpg”, resp.getOutputStream());把图片输出到客户端流中，这里就不自己写了，直接抄狂神的代码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//如何让浏览器3秒自动刷新一次;</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g</span> <span class="operator">=</span> (Graphics2D) image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="literal">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">makeNum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>前面已经对转发和重定向进行了一个简单的区分了。这里尝试一下重定向。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure></div>

<p>doGet方法代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        method 1:</span></span><br><span class="line"><span class="comment">//        resp.sendRedirect(&quot;/servlet_03/download&quot;);</span></span><br><span class="line"><span class="comment">//        method 2:</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;/servlet_03/download&quot;</span>);</span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>两种方法都可以实现重定向。</p>
<h2 id="2、HttpServletRequest"><a href="#2、HttpServletRequest" class="headerlink" title="2、HttpServletRequest"></a>2、HttpServletRequest</h2><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet-3/image-20231102153159799.png"
                      alt="image-20231102153159799"
                ></p>
<p>获取参数的两个方法，一个返回字符串，一个返回字符串数组（适用于checkbox）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getParameter</span><span class="params">(String var1)</span>;</span><br><span class="line">String[] getParameterValues(String var1);</span><br></pre></td></tr></table></figure></div>

<h3 id="登录Demo"><a href="#登录Demo" class="headerlink" title="登录Demo"></a>登录Demo</h3><p>写一个登录页面来使用这两个方法吧</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;<span class="number">1</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;2&quot;</span>&gt;<span class="number">2</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;3&quot;</span>&gt;<span class="number">3</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>doGet方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       String[] hobbies = req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">       System.out.println(<span class="string">&quot;password:&quot;</span>+password);</span><br><span class="line">       System.out.println(<span class="string">&quot;hobbies:&quot;</span>+ Arrays.toString(hobbies));</span><br><span class="line">       System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(req.getContextPath());</span><br><span class="line">       <span class="comment">//通过请求转发</span></span><br><span class="line">       <span class="comment">//这里的 / 代表当前的web应用</span></span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet-3/image-20231102160710960.png"
                      alt="image-20231102160710960"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet-3/image-20231102160742024.png"
                      alt="image-20231102160742024"
                ></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu20.04 vue环境搭建</title>
    <url>/2023/07/25/ubuntu20-04-vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><strong>&#x3D;&#x3D;注意：Ubuntu18.04搭建vue会遇到version &#96;GLIBC_2.28’ not found (required by报错，ubuntu18.04默认GLIBC是2.27，如果这里要进行2.28的升级，需要自己下载资源包进行安装，过程非常容易出错，而且更换后会影响linux内核运行，因此最好直接更换ubuntu版本&#x3D;&#x3D;</strong></p>
<h2 id="1-apt添加清华源"><a href="#1-apt添加清华源" class="headerlink" title="1. apt添加清华源"></a>1. apt添加清华源</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>

<p>把以下内容复制到文件末尾</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></div>

<p>然后更新</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></div>

<h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h2><p>连接nodesource源</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></div>

<p>下载</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure></div>

<h2 id="3-安装npm和cnpm"><a href="#3-安装npm和cnpm" class="headerlink" title="3. 安装npm和cnpm"></a>3. 安装npm和cnpm</h2><p>先换源</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm config set registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>

<p>npm更新</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure></div>

<p>安装cnpm</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>

<h2 id="4-安装vue"><a href="#4-安装vue" class="headerlink" title="4. 安装vue"></a>4. 安装vue</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cnpm install vue -g</span><br><span class="line"></span><br><span class="line">sudo cnpm install @vue/cli -g</span><br><span class="line"> </span><br><span class="line">sudo cnpm install webpack -g</span><br></pre></td></tr></table></figure></div>

<p>因为是新系统，基本都比较顺利，除了第一个坑</p>
<p>中途安装不要忘记用-v查看版本，确认安装成功</p>
]]></content>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet-1（基本原理&amp;demo）</title>
    <url>/2023/10/29/servlet%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>终于到Servlet啦。</p>
<h2 id="1、先理清楚Servlet的逻辑和原理"><a href="#1、先理清楚Servlet的逻辑和原理" class="headerlink" title="1、先理清楚Servlet的逻辑和原理"></a>1、先理清楚Servlet的逻辑和原理</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>
<p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p>
<h3 id="Servlet架构"><a href="#Servlet架构" class="headerlink" title="Servlet架构"></a>Servlet架构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231030193051080.png"
                      alt="image-20231030193051080"
                ></p>
<h3 id="Servlet的工作模式"><a href="#Servlet的工作模式" class="headerlink" title="Servlet的工作模式"></a>Servlet的工作模式</h3><ul>
<li>客户端发送请求至服务器；</li>
<li>服务器启动并调用 Servlet，Servlet 根据客户端请求生成响应内容并将其传给服务器；</li>
<li>服务器将响应返回客户端。</li>
</ul>
<h3 id="Servlet相关类的继承关系"><a href="#Servlet相关类的继承关系" class="headerlink" title="Servlet相关类的继承关系"></a>Servlet相关类的继承关系</h3><p>实际上，我们所写的Servlet类是继承HttpServlet，且重写了其中的doXX()方法而实现的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231030193429822.png"
                      alt="image-20231030193429822"
                ></p>
<h2 id="2、写一个简单的Servlet让他跑起来"><a href="#2、写一个简单的Servlet让他跑起来" class="headerlink" title="2、写一个简单的Servlet让他跑起来"></a>2、写一个简单的Servlet让他跑起来</h2><h3 id="创建一个web的Maven项目"><a href="#创建一个web的Maven项目" class="headerlink" title="创建一个web的Maven项目"></a>创建一个web的Maven项目</h3><p>这里采用了一个Project套Module的方式进行编写。这样关于Servlet的相关学习代码都可以写在这个Project中啦。需要关注的是目录结构和pom文件。</p>
<p><strong>项目区别</strong>：父项目Servlet是一个空的Maven项目，删掉了其中的src包；子项目servlet-01是一个使用模板生成的web maven项目，其中又webapp包。</p>
<p><strong>pom文件关联</strong>：父项目的pom中有modules标签，标明了servlet-01是一个子模块；子项目的pom中有parent标签，表明了Servlet是一个父项目。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231029151011664.png"
                      alt="image-20231029151011664"
                ></p>
<h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3><p><strong>这里注意：</strong>是一个module对应一个target（也可以说是artifact）。</p>
<p>采用本地的server，注意jre版本。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231030190331857.png"
                      alt="image-20231030190331857"
                ></p>
<p>这里没有像老版本那样提示fix，但是我们还没有指定artifact，需要手动设置一下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231030190513878.png"
                      alt="image-20231030190513878"
                ></p>
<p>选择war会生成target文件。</p>
<h3 id="修改web-xml文件"><a href="#修改web-xml文件" class="headerlink" title="修改web.xml文件"></a>修改web.xml文件</h3><p>（maven-archetype-webapp这个模板生成的配置文件版本过低不匹配</p>
<p>这里要想要tomcat能够运行起来，需要替换web.xml的开头声明。但是我们应该去哪里找和我们的tomcat版本匹配的声明版本呢。这个时候联想到tomcat目录下好像也有一个webapp包，而且在本地的tomcat启动之后他是可以访问相应页面的。所以我们尝试去看看有没有web.xml。</p>
<p>然后发现果然有，而且版本确实比模板生成的高很多。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231029150718072.png"
                      alt="image-20231029150718072"
                ></p>
<p>就把内容全部复制到我们的web.xml中，然后删掉不需要的内容，形成下面的文件抬头。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h3><p>导入servlet相关的依赖</p>
<p>好了，我们可以发现pom.xml中的依赖都是用dependency包裹起来的内容，包含版本和依赖名称。现在去在线仓库找找相关的。</p>
<p>一般选用的时间近+人多的，暂且选一个4.0.1</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231029151634810.png"
                      alt="image-20231029151634810"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231029151712670.png"
                      alt="image-20231029151712670"
                ></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scope 作用域暂时用不到，可以删掉&lt;scope&gt;provided&lt;/scope&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>maven功能很强大，他会紧接着导入此依赖所需要的其他依赖。（但要注意依赖冲突</p>
<h3 id="写一个servlet接口"><a href="#写一个servlet接口" class="headerlink" title="写一个servlet接口"></a>写一个servlet接口</h3><p>继承HttpServlet类，然后重写两个重要的方法。（目前只用到get&#x2F;post方法啦）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231029152049166.png"
                      alt="image-20231029152049166"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classover;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tky</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;Hello, Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写Servlet映射"><a href="#编写Servlet映射" class="headerlink" title="编写Servlet映射"></a>编写Servlet映射</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.classover.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>访问试试</p>
<p>默认页面访问正常，说明服务器配置ok</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231030190849327.png"
                      alt="image-20231030190849327"
                ></p>
<p>访问&#x2F;hello接口也能够成功访问。同时我们可以看到target包成功生成，servlet-01:war服务器启动成功。overover！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231030190800792.png"
                      alt="image-20231030190800792"
                ></p>
<h3 id="关于url-pattern"><a href="#关于url-pattern" class="headerlink" title="关于url-pattern"></a>关于url-pattern</h3><p>一个Servlet可以映射到多个url中，但是多个Servlet不可以映射到同一个url，会造成冲突。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231031184240094.png"
                      alt="image-20231031184240094"
                ></p>
<p>同时，这里还要提到一个特殊的url，就是&#x2F;*，这里的星号是通配符，可以匹配所有长度的字符。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231031185029858.png"
                      alt="image-20231031185029858"
                ></p>
<p>目前我们有两个HelloServlet和HelloServlet2。其中第一个确定了两个精确匹配，hello2配置了&#x2F;*的路径匹配，看看访问&#x2F;hello会到哪个界面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231031185211887.png"
                      alt="image-20231031185211887"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/servlet%E7%9B%B8%E5%85%B3/image-20231031185227442.png"
                      alt="image-20231031185227442"
                ></p>
<p>可以看出精确匹配的优先级高于路径匹配。这里对各种url进行一个总结。</p>
<h4 id="servlet四种匹配方式"><a href="#servlet四种匹配方式" class="headerlink" title="servlet四种匹配方式"></a>servlet四种匹配方式</h4><ul>
<li>servlet四种匹配方式<ul>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D" >精确匹配 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D" >路径匹配 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E6%89%A9%E5%B1%95%E5%90%8D%E5%8C%B9%E9%85%8D" >扩展名匹配 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E7%BC%BA%E7%9C%81%E5%8C%B9%E9%85%8D" >缺省匹配 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E5%8C%B9%E9%85%8D%E9%A1%BA%E5%BA%8F" >匹配顺序 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>注意<ul>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E5%92%8C%E6%89%A9%E5%B1%95%E5%90%8D%E5%8C%B9%E9%85%8D%E6%97%A0%E6%B3%95%E5%90%8C%E6%97%B6%E8%AE%BE%E7%BD%AE" >路径匹配和扩展名匹配无法同时设置 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E5%92%8C%E5%90%AB%E4%B9%89%E5%B9%B6%E4%B8%8D%E7%9B%B8%E5%90%8C" >“&#x2F;*”和”&#x2F;”含义并不相同 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://blog.csdn.net/u012188107/article/details/80927865#%E8%BD%AC%E8%BD%BD%E9%93%BE%E6%8E%A5" >转载链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
<h5 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h5><p>中配置的项必须与url完全精确匹配。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/user/users.html&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;/index.html&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;/user/addUser.action&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure></div>

<h5 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h5><p>以“&#x2F;”字符开头，并以“&#x2F;*”结尾的字符串用于路径匹配</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/user/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure></div>

<p>路径以&#x2F;user&#x2F;开始，后面的路径可以任意。</p>
<h5 id="扩展名匹配"><a href="#扩展名匹配" class="headerlink" title="扩展名匹配"></a>扩展名匹配</h5><p>以“*.”开头的字符串被用于扩展名匹配</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">123456</span><br></pre></td></tr></table></figure></div>

<h5 id="缺省匹配"><a href="#缺省匹配" class="headerlink" title="缺省匹配"></a>缺省匹配</h5><p>任意路径匹配</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;1234</span><br></pre></td></tr></table></figure></div>

<h5 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h5><p>按范围有小到大 精确 -&gt; 路径 -&gt; 拓展名 -&gt; 缺省</p>
<h5 id="路径匹配和扩展名匹配无法同时设置"><a href="#路径匹配和扩展名匹配无法同时设置" class="headerlink" title="路径匹配和扩展名匹配无法同时设置"></a>路径匹配和扩展名匹配无法同时设置</h5><blockquote>
<p>匹配方法只有三种，要么是路径匹配（以“&#x2F;”字符开头，并以“&#x2F;<em>”结尾），要么是扩展名匹配（以“</em>.”开头），要么是精确匹配，三种匹配方法不能进行组合，不要想当然使用通配符或正规则。如&#x2F;user&#x2F;<em>.action是非法的另外注意：&#x2F;aa&#x2F;</em>&#x2F;bb是精确匹配，合法，这里的*不是通配的含义</p>
</blockquote>
<h5 id="“-”和”-”含义并不相同"><a href="#“-”和”-”含义并不相同" class="headerlink" title="“&#x2F;*”和”&#x2F;”含义并不相同"></a>“&#x2F;*”和”&#x2F;”含义并不相同</h5><ul>
<li>“&#x2F;*”<strong>属于路径匹配</strong>，并且可以匹配所有request，由于<strong>路径匹配的优先级仅次于精确匹配</strong>，所以“&#x2F;*”会覆盖所有的扩展名匹配，很多404错误均由此引起，所以这是一种特别恶劣的匹配模式，一般只用于filter的url-pattern</li>
<li>“&#x2F;”是servlet中特殊的匹配模式，切该模式有且仅有一个实例，优先级最低，不会覆盖其他任何url-pattern，只是会替换servlet容器的内建default servlet ，该模式同样会匹配所有request。</li>
<li>配置“&#x2F;”后，一种可能的现象是myServlet会拦截诸如<a class="link"   href="http://localhost:8080/appDemo/user/addUser.action%E3%80%81http://localhost:8080/appDemo/user/updateUser%E7%9A%84%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%BD%86%E6%98%AF%E5%B9%B6%E4%B8%8D%E4%BC%9A%E6%8B%A6%E6%88%AAhttp://localhost:8080/appDemo/user/users.jsp%E3%80%81http://localhost:8080/appDemo/index.jsp%EF%BC%8C%E8%BF%99%E6%98%AF%E5%BA%94%E4%B8%BAservlet%E5%AE%B9%E5%99%A8%E6%9C%89%E5%86%85%E7%BD%AE%E7%9A%84%E2%80%9C*.jsp%E2%80%9D%E5%8C%B9%E9%85%8D%E5%99%A8%EF%BC%8C%E8%80%8C%E6%89%A9%E5%B1%95%E5%90%8D%E5%8C%B9%E9%85%8D%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E9%AB%98%E4%BA%8E%E7%BC%BA%E7%9C%81%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%89%80%E4%BB%A5%E6%89%8D%E4%BC%9A%E6%9C%89%E4%B8%8A%E8%BF%B0%E7%8E%B0%E8%B1%A1%E3%80%82" >http://localhost:8080/appDemo/user/addUser.action、http://localhost:8080/appDemo/user/updateUser的格式的请求，但是并不会拦截http://localhost:8080/appDemo/user/users.jsp、http://localhost:8080/appDemo/index.jsp，这是应为servlet容器有内置的“*.jsp”匹配器，而扩展名匹配的优先级高于缺省匹配，所以才会有上述现象。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Maven和Tomcat的java项目搭建</title>
    <url>/2023/10/09/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本机上前几年学习的时候已经下载好了Maven和Tomcat，最近打算继续学习java方向的开发和安全，所以打算再捡起来啦。</p>
<p>注意三者版本冲突</p>
<h2 id="1-创建maven项目-完善目录结构"><a href="#1-创建maven项目-完善目录结构" class="headerlink" title="1. 创建maven项目+完善目录结构"></a>1. 创建maven项目+完善目录结构</h2><p>使用Webapp模板</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009142258054-1696841307416-1.png"
                      alt="image-20231009142258054"
                ></p>
<p>设置一下maven的目录、配置文件和本地仓库</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009142553557-1696841307417-2.png"
                      alt="image-20231009142553557"
                ></p>
<p>等待IDEA响应完成后可以发现，左边侧栏并没有我们需要的目录结构，需要手动创建。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009142845522-1696841307417-3.png"
                      alt="image-20231009142845522"
                ></p>
<p>先设置一步maven下载source文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009150446150-1696841307417-4.png"
                      alt="image-20231009150446150"
                ></p>
<p>然后解决目录问题。</p>
<p>首先创建源代码目录java，这里我的IDEA自动识别到了我的意图，直接帮我把java目录设置成了Source。</p>
<p>这一步也可以手动设置。右键目录 –&gt;Mark Directory as –&gt; Sources Root</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009143405071-1696841307417-5.png"
                      alt="image-20231009143405071"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231029144600454.png"
                      alt="image-20231029144600454"
                ></p>
<p>按照上述方法把test目录也补上，给每一个目录都Mark上该有的意义后如下所示</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231029144629156.png"
                      alt="image-20231029144629156"
                ></p>
<h2 id="2-配置tomcat服务器"><a href="#2-配置tomcat服务器" class="headerlink" title="2. 配置tomcat服务器"></a>2. 配置tomcat服务器</h2><p>点击这个按钮进行服务器配置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009143925676-1696841307417-8.png"
                      alt="image-20231009143925676"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009144056194-1696841307417-9.png"
                      alt="image-20231009144056194"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009144415589-1696841307417-10.png"
                      alt="image-20231009144415589"
                ></p>
<p>点击FIX之后会跳转到如下页面，点击右侧的加号，选择Artifact…，然后会弹出一个artifacts列表，这里我们选择Exploded的一项。</p>
<p><strong>带Exploded的就是不进行压缩的，不带Exploded的会产出压缩包。在开发的过程中建议使用Exploded模式，这样可以立刻查看文件中的变化</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009144437602-1696841307417-11.png"
                      alt="image-20231009144437602"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009144626425-1696841307417-12.png"
                      alt="image-20231009144626425"
                ></p>
<p>虚拟路径映射配置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009145101940-1696841307417-13.png"
                      alt="image-20231009145101940"
                ></p>
<p>这样我们的服务器就配置好啦</p>
<h2 id="3-认识maven"><a href="#3-认识maven" class="headerlink" title="3. 认识maven"></a>3. 认识maven</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009145516308-1696841307417-14.png"
                      alt="image-20231009145516308"
                ></p>
<p>Maven的一大特点是，当你在pom.xml文件中编写了你所需要的依赖后，<strong>它不仅会下载本依赖，还会下载依赖的依赖。</strong></p>
<p>图上右侧可以对依赖进行操作，比如常用的clean之后再install可以刷新依赖文件，再比如package是将所有依赖全部打包，等等。</p>
<p>还可以点击此按钮查看依赖之间的依赖结构。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8EMaven%E5%92%8CTomcat%E7%9A%84java%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20231009150613666-1696841307417-15.png"
                      alt="image-20231009150613666"
                ></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>针对基于机器学习的自动化渗透测试工具——DeepExloit的深度分析和使用</title>
    <url>/2023/11/14/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="DeepExploit调研报告"><a href="#DeepExploit调研报告" class="headerlink" title="DeepExploit调研报告"></a>DeepExploit调研报告</h1><h2 id="一、基本信息"><a href="#一、基本信息" class="headerlink" title="一、基本信息"></a>一、基本信息</h2><p>官方wiki感觉没有写什么有价值的东西，就installation可以看看。</p>
<p>官网的架构图如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122160848647.png"
                      alt="image-20231122160848647"
                ></p>
<p>DE通过RPC协议与msf进行通信。</p>
<p>主要就是使用了A3C强化学习算法，调用msf进行渗透。</p>
<p>分为两种模式：</p>
<ul>
<li>​	train：利用框架对靶机进行渗透测试，保存训练数据，训练好A3C模型</li>
<li>​	test：根据训练好的强化学习模型，对目标进行高效的渗透（比train模式多了一步后渗透）</li>
</ul>
<p>核心架构图如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122160940160.png"
                      alt="image-20231122160940160"
                ></p>
<h2 id="二、与机器学习的关系"><a href="#二、与机器学习的关系" class="headerlink" title="二、与机器学习的关系"></a>二、与机器学习的关系</h2><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>强化学习是机器学习中的一个领域，强调如何基于环境而行动，以取得最大化的预期利益，是除了监督学习和非监督学习之外的第三种基本的机器学习方法。其基本框架如图3所示，基本流程为：智能体（agent）通过观察环境（Environment）的状态（State）做出行动（action），该行动会作用于环境，改变环境的状态，并且产生相关联的奖励（reward），智能体通过观察新的状态和奖励来进行下一步动作，由此循环。在这个过程中，智能体会不断得到奖励（有好的有坏的），从而不断进化，最终能以利益最大的目标实施行动。</p>
<p>强化学习有几大要素，这些要素的定义至关重要，不同场景下，要素的定于也不尽相同，而这些要素的合理定义往往也决定强化学习算法能否生效。具体来说，想要使用强化学习来求解一个问题，首先需要定义如下3大要素：</p>
<ul>
<li>State（状态空间），state通常是算法的输入，包含agent作出action所需要的所有信息，需要满足马尔科夫性质，即agent可以仅根据当前做出动作，无需考虑过去的状态。</li>
<li>Action（动作空间），action一般就是算法的输出，action是agent能够对环境产生影响的手段，所以一个任务的action设置的最基本要求是能够对environment产生有效影响。</li>
<li>Reward（收益），reward是算法学习的指导，reward的设置往往决定了算法的最终效果是否理想，因此如何有效的设置reward也成为了强化学习应用的一个重要问题。</li>
</ul>
<p>在对以上3大要素进行合理定义后，算法（如A3C算法）才算有使用的基础。总之，强化学习任务中，3大要素的定义至关重要，定义越合理，问题的解决程度就越高。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122160956854.png"
                      alt="image-20231122160956854"
                ></p>
<h3 id="Deep-Exploit对强化学习三要素的定义"><a href="#Deep-Exploit对强化学习三要素的定义" class="headerlink" title="Deep Exploit对强化学习三要素的定义"></a>Deep Exploit对强化学习三要素的定义</h3><ul>
<li>状态空间。DE用5个状态表示其状态空间，在代码中表示为（ST_OS_TYPE，ST_SERV_NAME，ST_SERV_VER，ST_MODULE，ST_TARGET），分别代表：操作系统版本，端口上服务名称，服务版本，要利用msf的模块名称编号，模块中的target参数。</li>
<li>动作空间。DE的动作空间为metasploit模块中所有payload集合。如果使用的metasploit版本为v6.1.9，payload总数为593个。</li>
<li>收益。DE将收益定义为3种：R_GREAT&#x3D;100，R_GOOD &#x3D; 1，R_BAD &#x3D; -1，R_GREAT代表可以进行后渗透测试（返回的shell类型为meterpreter，而DE利用meterpreter进行后渗透），R_GOOD代表能返回shell但是不能获得meterpreter shell（意指无法利用该机器进行后渗透），R_BAD代表漏洞利用失败。实际上，在DE中，后渗透模块没有开发完善，只要能返回shell，都会被赋予最大收益GREAT。</li>
</ul>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>DE跟强化学习最紧密的联系就在于train模式部分。</p>
<p>首先，DE会初始化状态空间（包括OS版本、端口上的服务名称、服务版本、要利用的msf的module、模块中的target参数）：</p>
<ol>
<li><p>OS版本是不变的【实际上就是metasploit的target】（1&#x2F;5）。</p>
</li>
<li><p>DE会在收集到的信息中<strong>随机</strong>选择设备上的服务和版本（3&#x2F;5）。</p>
</li>
<li><p>确定了服务后，再metasploit中根据语句“search name: + ST_SERV_NAMEtype:exploit app:server”返回的可利用module列表，再<strong>随机</strong>选择一个module（4&#x2F;5）。</p>
</li>
<li><p>再在module可选的target列表中随机选择（5&#x2F;5）。</p>
<p>由此状态空间就全部确定了。</p>
</li>
</ol>
<p>然后，A3C算法会计算每个payload的概率，选择概率最高的payload调用metasploit进行漏洞利用，当渗透失败时，会<strong>随机更换target</strong>，由于不同target对应的可利用payload不一样，此时需要重新利用A3C算法计算概率最大的payload进行利用，当该步骤到一定次数还未成功，会再次进行状态空间初始化，对其他的服务、模块进行尝试。</p>
<h2 id="三、针对靶机Metaexploitable2进行测试"><a href="#三、针对靶机Metaexploitable2进行测试" class="headerlink" title="三、针对靶机Metaexploitable2进行测试"></a>三、针对靶机Metaexploitable2进行测试</h2><h3 id="train模式"><a href="#train模式" class="headerlink" title="train模式"></a>train模式</h3><p>漏洞清单如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101628484.png"
                      alt="image-20231122101628484"
                ></p>
<blockquote>
<p>python3 DeepExploit.py -t 192.168.75.142 -m train</p>
</blockquote>
<h4 id="1、先使用Nmap进行了信息收集"><a href="#1、先使用Nmap进行了信息收集" class="headerlink" title="1、先使用Nmap进行了信息收集"></a>1、先使用Nmap进行了信息收集</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101639746.png"
                      alt="image-20231122101639746"
                ></p>
<h4 id="2、载入相关信息"><a href="#2、载入相关信息" class="headerlink" title="2、载入相关信息"></a>2、载入相关信息</h4><p>分别载入了Metasploit的Exploit、Payload模块信息列表，还有收集到的端口信息。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101649702.png"
                      alt="image-20231122101649702"
                ></p>
<p>target info文件内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101658187.png"
                      alt="image-20231122101658187"
                ></p>
<h4 id="3、获取端口信息，主要看是不是webport"><a href="#3、获取端口信息，主要看是不是webport" class="headerlink" title="3、获取端口信息，主要看是不是webport"></a>3、获取端口信息，主要看是不是webport</h4><p>针对开放的WEB服务进行站内链接爬虫</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101708189.png"
                      alt="image-20231122101708189"
                ></p>
<h4 id="4、针对爬虫爬取的链接进行CMS指纹识别"><a href="#4、针对爬虫爬取的链接进行CMS指纹识别" class="headerlink" title="4、针对爬虫爬取的链接进行CMS指纹识别"></a>4、针对爬虫爬取的链接进行CMS指纹识别</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101722328.png"
                      alt="image-20231122101722328"
                ></p>
<h4 id="5、载入字典进行暴力破解"><a href="#5、载入字典进行暴力破解" class="headerlink" title="5、载入字典进行暴力破解"></a>5、载入字典进行暴力破解</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101738042.png"
                      alt="image-20231122101738042"
                ></p>
<h4 id="6、分析开放端口的msf信息（module列表之类的）"><a href="#6、分析开放端口的msf信息（module列表之类的）" class="headerlink" title="6、分析开放端口的msf信息（module列表之类的）"></a>6、分析开放端口的msf信息（module列表之类的）</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101747239.png"
                      alt="image-20231122101747239"
                ></p>
<h4 id="7、载入msf进行渗透"><a href="#7、载入msf进行渗透" class="headerlink" title="7、载入msf进行渗透"></a>7、载入msf进行渗透</h4><p>这里我开了十个线程，他会一边尝试一边进行reward记录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101757386.png"
                      alt="image-20231122101757386"
                ></p>
<p>这里可以看到有一个payload起效了，是5432端口的postgresql服务，reward给了100。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101807113.png"
                      alt="image-20231122101807113"
                ></p>
<h4 id="8、生成结果"><a href="#8、生成结果" class="headerlink" title="8、生成结果"></a>8、生成结果</h4><p>使用如下命令可以生成训练数据，但是好像并没有达到理想的状态，目前只看到了22行数据，但是metaexploitable2里面应该不是只有22个漏洞可以利用。</p>
<blockquote>
<p>python3 CreateReport.py -m train</p>
</blockquote>
<p>.&#x2F;report&#x2F;train&#x2F;DeepExploit_train_report.html展示了的训练数据。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101817476.png"
                      alt="image-20231122101817476"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101829500.png"
                      alt="image-20231122101829500"
                ></p>
<h3 id="test模式"><a href="#test模式" class="headerlink" title="test模式"></a>test模式</h3><p>已经对Metaexploitable2 train过一遍了，再test的话，一旦metasploit渗透测试成功，就会进行后渗透（但是后渗透体现在哪里我还没看出来）。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101840877.png"
                      alt="image-20231122101840877"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%92%88%E5%AF%B9%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DeepExloit%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8/image-20231122101852061.png"
                      alt="image-20231122101852061"
                ></p>
<h2 id="四、工具的一些缺陷"><a href="#四、工具的一些缺陷" class="headerlink" title="四、工具的一些缺陷"></a>四、工具的一些缺陷</h2><p>刚好有一个win7，就想跑来试试，结果我发现他跑不出来永恒之蓝TAT。就去查了然后整理了一下。</p>
<ol>
<li>服务支持问题。DE框架的“config.ini”文件中限定了DE只支持如下服务的渗透：vsftpd@ssh@telnet@postfix@bind@apache@rpc@samba@java@proftpd@mysql@postgresql@vnc@irc@jetty@tomcat@ldap@nginx@php@phpmyadmin@wordpress@joomla@drupal@sugarcrm@webmin@moodle@dav@oscommerce@tikiwiki@phpbb@mediawiki@unix@python@ubuntu@http@ms-wbt-server@upnp。<ol>
<li>metasploit所支持的服务远远不止这些，对于所有metasploit支持的服务，DE理论上都应该可以支持才对。然而这里却做了限定。</li>
<li>DE没有做不同软件对同一服务在名称上的映射。具体来说，nmap和metasploit对于同一服务往往使用不同名称进行表示，不同版本之间也有差异，如smb服务：在metasploit搜索关键词“smb”即可，而nmap对smb服务的识别结果为“microsoft-ds” ，该关键词在metasploit中无效。<strong>“MS17-010”永恒之蓝漏洞无法利用就是这个原因</strong>。</li>
</ol>
</li>
<li>算法逻辑问题，导致了很多无效尝试。<ol>
<li>DE会随机选择target尝试进行渗透，但是根据前文介绍，target代表的是操作系统，而操作系统DE在信息收集阶段已经识别了，并且作为状态中的一个固定变量，那么还有什么必要进行所有target的尝试呢？</li>
<li>第二，DE将“是否返回metepreter shell”作为漏洞是否利用成功的标志从而进行后渗透，既然如此为什么要尝试其他类型的payload呢？metasploit中的payload共计593种，meterpreter shell 只有167种，这意味着，有426种payload实际上无需尝试。</li>
<li>DE还存在“漏尝试”的情况，有些payload始终未被尝试。在训练模式下，A3C算法对每个payload计算概率，对利用成功率最大的payload进行尝试，这种方式直接导致，在同一模型、同一状态下，始终测试同一个payload，虽然模型在训练的时候会动态更新，但是这种设计思路仍会存在某些payload未曾测试的情况，遗漏有可能利用成功的payload。</li>
</ol>
</li>
<li>程序设计问题。DE在训练模式中使用了多线程进行加速，但是线程之间完全独立，metasploit渗透的各个参数（服务+模块+target）又都是随机的，这种设计机制会导致：同一线程内出现重复的尝试，不同线程出现重复的尝试。</li>
<li>渗透目标问题。DE框架判定渗透成功的标志为“返回了meterpreter shell”，计算的是在“服务，模块，target”确定的情况下，不同payload的成功概率，但是在一般渗透测试过程中，需要判断的往往是“某种漏洞能否利用成功”，换句话说，即metasploit中的某个模块能否利用成功，至于利用成功后的动作（payload）不是重点。若能改变渗透目标，计算每个模块的成功概率，会更加符合实际需求。</li>
</ol>
]]></content>
      <tags>
        <tag>web-security</tag>
      </tags>
  </entry>
</search>
